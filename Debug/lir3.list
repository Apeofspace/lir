
lir3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000928c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009524  08009524  00019524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000000  08009584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001bd4  20000184  08009708  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d58  08009708  00021d58  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   000296d2  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000046d8  00000000  00000000  00049884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013f0  00000000  00000000  0004df60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001268  00000000  00000000  0004f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039684  00000000  00000000  000505b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019aad  00000000  00000000  00089c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d6ea  00000000  00000000  000a36e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00200dd3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000052b4  00000000  00000000  00200e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000184 	.word	0x20000184
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800950c 	.word	0x0800950c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000188 	.word	0x20000188
 80002d4:	0800950c 	.word	0x0800950c

080002d8 <lirPulse>:
#include "lirh743zi.h"

void lirPulse(TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIO_Data, uint16_t GPIO_Data_Pin, GPIO_TypeDef* GPIO_Clck, uint16_t GPIO_Clck_Pin){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	4613      	mov	r3, r2
 80002e6:	80fb      	strh	r3, [r7, #6]
	if (PULSE_COUNT<MAX_PULSE_COUNT){
 80002e8:	4b4b      	ldr	r3, [pc, #300]	; (8000418 <lirPulse+0x140>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b4b      	ldr	r3, [pc, #300]	; (800041c <lirPulse+0x144>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d233      	bcs.n	800035e <lirPulse+0x86>
//		генерация клоков
		 GPIO_Clck->ODR ^= (0x1UL << (GPIO_Clck_Pin)); // PG2(CLCK)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	8b3b      	ldrh	r3, [r7, #24]
 80002fc:	2101      	movs	r1, #1
 80002fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000302:	405a      	eors	r2, r3
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	615a      	str	r2, [r3, #20]
		 PULSE_COUNT++;
 8000308:	4b43      	ldr	r3, [pc, #268]	; (8000418 <lirPulse+0x140>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	3301      	adds	r3, #1
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4b41      	ldr	r3, [pc, #260]	; (8000418 <lirPulse+0x140>)
 8000314:	701a      	strb	r2, [r3, #0]
//		 чтение бита в data по каждому нечетному клоку,пропуская первый
		 if ((PULSE_COUNT&0x1UL)&(PULSE_COUNT>2UL)){
 8000316:	4b40      	ldr	r3, [pc, #256]	; (8000418 <lirPulse+0x140>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b3d      	ldr	r3, [pc, #244]	; (8000418 <lirPulse+0x140>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b02      	cmp	r3, #2
 800032a:	bf8c      	ite	hi
 800032c:	2301      	movhi	r3, #1
 800032e:	2300      	movls	r3, #0
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4013      	ands	r3, r2
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d06a      	beq.n	8000410 <lirPulse+0x138>
		 		  data<<=0x1UL;
 800033a:	4b39      	ldr	r3, [pc, #228]	; (8000420 <lirPulse+0x148>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4a37      	ldr	r2, [pc, #220]	; (8000420 <lirPulse+0x148>)
 8000342:	6013      	str	r3, [r2, #0]
		 		  data |= (GPIO_Data->IDR >> GPIO_Data_Pin)&0x01; //read bit pG3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	691a      	ldr	r2, [r3, #16]
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	fa22 f303 	lsr.w	r3, r2, r3
 800034e:	f003 0201 	and.w	r2, r3, #1
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <lirPulse+0x148>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4313      	orrs	r3, r2
 8000358:	4a31      	ldr	r2, [pc, #196]	; (8000420 <lirPulse+0x148>)
 800035a:	6013      	str	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)tosend, 12);
//				обнуление
				data = 0;
				PULSE_COUNT = 0;
			}
}
 800035c:	e058      	b.n	8000410 <lirPulse+0x138>
				htim->Instance->CR1 &= ~(TIM_CR1_CEN);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f022 0201 	bic.w	r2, r2, #1
 800036c:	601a      	str	r2, [r3, #0]
				htim->Instance->CNT = 0;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
				tbuf = DWT->CYCCNT;
 8000376:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <lirPulse+0x14c>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4a2b      	ldr	r2, [pc, #172]	; (8000428 <lirPulse+0x150>)
 800037c:	6013      	str	r3, [r2, #0]
				DWT->CYCCNT = 0UL;
 800037e:	4b29      	ldr	r3, [pc, #164]	; (8000424 <lirPulse+0x14c>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
				tosend[0]= data&0x3FFFUL;
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <lirPulse+0x148>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800038c:	4a27      	ldr	r2, [pc, #156]	; (800042c <lirPulse+0x154>)
 800038e:	6013      	str	r3, [r2, #0]
				tosend[0]<<=16;
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <lirPulse+0x154>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	041b      	lsls	r3, r3, #16
 8000396:	4a25      	ldr	r2, [pc, #148]	; (800042c <lirPulse+0x154>)
 8000398:	6013      	str	r3, [r2, #0]
				tosend[0]|= ++count;
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <lirPulse+0x158>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	3301      	adds	r3, #1
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b22      	ldr	r3, [pc, #136]	; (8000430 <lirPulse+0x158>)
 80003a6:	4611      	mov	r1, r2
 80003a8:	8019      	strh	r1, [r3, #0]
 80003aa:	4b20      	ldr	r3, [pc, #128]	; (800042c <lirPulse+0x154>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4313      	orrs	r3, r2
 80003b0:	4a1e      	ldr	r2, [pc, #120]	; (800042c <lirPulse+0x154>)
 80003b2:	6013      	str	r3, [r2, #0]
				timestamp += DWTtoUS(tbuf);
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <lirPulse+0x150>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	ee07 3a90 	vmov	s15, r3
 80003bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000434 <lirPulse+0x15c>
 80003c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <lirPulse+0x160>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	ee07 3a90 	vmov	s15, r3
 80003d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <lirPulse+0x164>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	ee07 3a90 	vmov	s15, r3
 80003e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003ec:	ee17 2a90 	vmov	r2, s15
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <lirPulse+0x164>)
 80003f2:	601a      	str	r2, [r3, #0]
				tosend[1]= timestamp;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <lirPulse+0x164>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <lirPulse+0x154>)
 80003fa:	6053      	str	r3, [r2, #4]
				CDC_Transmit_FS((uint8_t*)tosend, 12);
 80003fc:	210c      	movs	r1, #12
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <lirPulse+0x154>)
 8000400:	f008 fbca 	bl	8008b98 <CDC_Transmit_FS>
				data = 0;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <lirPulse+0x148>)
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
				PULSE_COUNT = 0;
 800040a:	4b03      	ldr	r3, [pc, #12]	; (8000418 <lirPulse+0x140>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200003e0 	.word	0x200003e0
 800041c:	200003da 	.word	0x200003da
 8000420:	200003d4 	.word	0x200003d4
 8000424:	e0001000 	.word	0xe0001000
 8000428:	200003dc 	.word	0x200003dc
 800042c:	200003c8 	.word	0x200003c8
 8000430:	200003d8 	.word	0x200003d8
 8000434:	49742400 	.word	0x49742400
 8000438:	20000000 	.word	0x20000000
 800043c:	200003c4 	.word	0x200003c4

08000440 <lirCycle>:

void lirCycle(TIM_HandleTypeDef *htim, uint32_t IRQN){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
	htim->Instance->CR1 |= TIM_CR1_CEN;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f042 0201 	orr.w	r2, r2, #1
 8000458:	601a      	str	r2, [r3, #0]
	htim->Instance->DIER|= IRQN;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68d9      	ldr	r1, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	430a      	orrs	r2, r1
 8000468:	60da      	str	r2, [r3, #12]
	if (timestamp>0xFFFF0000) timestamp = 0; //чтобы избежать переполнения таймстампа
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <lirCycle+0x48>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000472:	d902      	bls.n	800047a <lirCycle+0x3a>
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <lirCycle+0x48>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	200003c4 	.word	0x200003c4

0800048c <lirInit>:

void lirInit(){
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	PULSE_COUNT = 0;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <lirInit+0x38>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
	MAX_PULSE_COUNT = (BITNESS + 1) * 2;
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <lirInit+0x3c>)
 8000498:	221e      	movs	r2, #30
 800049a:	701a      	strb	r2, [r3, #0]
	data = 0;
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <lirInit+0x40>)
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
	tbuf = 0;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <lirInit+0x44>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
	timestamp = 0;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <lirInit+0x48>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
	count = 0;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <lirInit+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	801a      	strh	r2, [r3, #0]
//	стоп слово для определения конца посылки
	tosend[2]=0xFAFBFCFD;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <lirInit+0x50>)
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <lirInit+0x54>)
 80004b8:	609a      	str	r2, [r3, #8]
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	200003e0 	.word	0x200003e0
 80004c8:	200003da 	.word	0x200003da
 80004cc:	200003d4 	.word	0x200003d4
 80004d0:	200003dc 	.word	0x200003dc
 80004d4:	200003c4 	.word	0x200003c4
 80004d8:	200003d8 	.word	0x200003d8
 80004dc:	200003c8 	.word	0x200003c8
 80004e0:	fafbfcfd 	.word	0xfafbfcfd

080004e4 <DWTinit>:

void DWTinit(){
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <DWTinit+0x2c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <DWTinit+0x2c>)
 80004ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004f2:	60d3      	str	r3, [r2, #12]
//	DWT->LAR = 0xC5ACCE55; //софтверный анлок??
	DWT->CYCCNT = 0U;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <DWTinit+0x30>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <DWTinit+0x30>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <DWTinit+0x30>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	e000edf0 	.word	0xe000edf0
 8000514:	e0001000 	.word	0xe0001000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fc1c 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f81e 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f964 	bl	80007f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000528:	f000 f89e 	bl	8000668 <MX_TIM1_Init>
  MX_TIM2_Init();
 800052c:	f000 f8ee 	bl	800070c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000530:	f008 fa72 	bl	8008a18 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DWTinit();
 8000534:	f7ff ffd6 	bl	80004e4 <DWTinit>
  lirInit();
 8000538:	f7ff ffa8 	bl	800048c <lirInit>

//  TIM1->CCER|=TIM_CCER_CC1E; //map to pins (pin PE9)
//  TIM1->BDTR|=TIM_BDTR_MOE; //main output enable
  TIM2->CR1|= TIM_CR1_CEN;
 800053c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6013      	str	r3, [r2, #0]
  TIM2->DIER|= TIM2_IRQn;
 800054c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000556:	f043 031c 	orr.w	r3, r3, #28
 800055a:	60d3      	str	r3, [r2, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x44>
	...

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09c      	sub	sp, #112	; 0x70
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	224c      	movs	r2, #76	; 0x4c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f008 ffc4 	bl	80094fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2220      	movs	r2, #32
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 ffbe 	bl	80094fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000580:	2002      	movs	r0, #2
 8000582:	f002 f95f 	bl	8002844 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b35      	ldr	r3, [pc, #212]	; (8000660 <SystemClock_Config+0x100>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a34      	ldr	r2, [pc, #208]	; (8000660 <SystemClock_Config+0x100>)
 8000590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <SystemClock_Config+0x100>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <SystemClock_Config+0x104>)
 80005a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a4:	4a2f      	ldr	r2, [pc, #188]	; (8000664 <SystemClock_Config+0x104>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <SystemClock_Config+0x104>)
 80005ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b8:	bf00      	nop
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <SystemClock_Config+0x100>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c6:	d1f8      	bne.n	80005ba <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005c8:	2322      	movs	r3, #34	; 0x22
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005e0:	230c      	movs	r3, #12
 80005e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005e4:	23b4      	movs	r3, #180	; 0xb4
 80005e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005f4:	2308      	movs	r3, #8
 80005f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000604:	4618      	mov	r0, r3
 8000606:	f002 f967 	bl	80028d8 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000610:	f000 fa1c 	bl	8000a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	233f      	movs	r3, #63	; 0x3f
 8000616:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2303      	movs	r3, #3
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000620:	2308      	movs	r3, #8
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800062c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000630:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fd5c 	bl	80030f8 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000646:	f000 fa01 	bl	8000a4c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800064a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800064e:	2100      	movs	r1, #0
 8000650:	2001      	movs	r0, #1
 8000652:	f002 ff07 	bl	8003464 <HAL_RCC_MCOConfig>
}
 8000656:	bf00      	nop
 8000658:	3770      	adds	r7, #112	; 0x70
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	58024800 	.word	0x58024800
 8000664:	58000400 	.word	0x58000400

08000668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_TIM1_Init+0x9c>)
 8000688:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <MX_TIM1_Init+0xa0>)
 800068a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_TIM1_Init+0x9c>)
 800068e:	2217      	movs	r2, #23
 8000690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_TIM1_Init+0x9c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_TIM1_Init+0x9c>)
 800069a:	2218      	movs	r2, #24
 800069c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006b2:	f004 f98f 	bl	80049d4 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006bc:	f000 f9c6 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006ce:	f004 fbcf 	bl	8004e70 <HAL_TIM_ConfigClockSource>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006d8:	f000 f9b8 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006ee:	f005 f8eb 	bl	80058c8 <HAL_TIMEx_MasterConfigSynchronization>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006f8:	f000 f9a8 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200003e4 	.word	0x200003e4
 8000708:	40010000 	.word	0x40010000

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */


  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000744:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8000746:	4b29      	ldr	r3, [pc, #164]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000748:	22ef      	movs	r2, #239	; 0xef
 800074a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_TIM2_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000754:	2295      	movs	r2, #149	; 0x95
 8000756:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_TIM2_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000764:	4821      	ldr	r0, [pc, #132]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000766:	f004 f935 	bl	80049d4 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000770:	f000 f96c 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077e:	4619      	mov	r1, r3
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000782:	f004 fb75 	bl	8004e70 <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800078c:	f000 f95e 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000792:	f004 f976 	bl	8004a82 <HAL_TIM_OC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800079c:	f000 f956 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	480f      	ldr	r0, [pc, #60]	; (80007ec <MX_TIM2_Init+0xe0>)
 80007b0:	f005 f88a 	bl	80058c8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007ba:	f000 f947 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_TIM2_Init+0xe0>)
 80007d6:	f004 fad5 	bl	8004d84 <HAL_TIM_OC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007e0:	f000 f934 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3738      	adds	r7, #56	; 0x38
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000430 	.word	0x20000430

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b8a      	ldr	r3, [pc, #552]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	4a88      	ldr	r2, [pc, #544]	; (8000a30 <MX_GPIO_Init+0x240>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000816:	4b86      	ldr	r3, [pc, #536]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000824:	4b82      	ldr	r3, [pc, #520]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082a:	4a81      	ldr	r2, [pc, #516]	; (8000a30 <MX_GPIO_Init+0x240>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000834:	4b7e      	ldr	r3, [pc, #504]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b7b      	ldr	r3, [pc, #492]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	4a79      	ldr	r2, [pc, #484]	; (8000a30 <MX_GPIO_Init+0x240>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000852:	4b77      	ldr	r3, [pc, #476]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000860:	4b73      	ldr	r3, [pc, #460]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	4a72      	ldr	r2, [pc, #456]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000870:	4b6f      	ldr	r3, [pc, #444]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	4b6c      	ldr	r3, [pc, #432]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	4a6a      	ldr	r2, [pc, #424]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088e:	4b68      	ldr	r3, [pc, #416]	; (8000a30 <MX_GPIO_Init+0x240>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b64      	ldr	r3, [pc, #400]	; (8000a30 <MX_GPIO_Init+0x240>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	4a63      	ldr	r2, [pc, #396]	; (8000a30 <MX_GPIO_Init+0x240>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <MX_GPIO_Init+0x240>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ba:	4b5d      	ldr	r3, [pc, #372]	; (8000a30 <MX_GPIO_Init+0x240>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	4a5b      	ldr	r2, [pc, #364]	; (8000a30 <MX_GPIO_Init+0x240>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b59      	ldr	r3, [pc, #356]	; (8000a30 <MX_GPIO_Init+0x240>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f244 0101 	movw	r1, #16385	; 0x4001
 80008de:	4855      	ldr	r0, [pc, #340]	; (8000a34 <MX_GPIO_Init+0x244>)
 80008e0:	f000 fdbc 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ea:	4853      	ldr	r0, [pc, #332]	; (8000a38 <MX_GPIO_Init+0x248>)
 80008ec:	f000 fdb6 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLCK_GPIO_Port, CLCK_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2104      	movs	r1, #4
 80008f4:	4851      	ldr	r0, [pc, #324]	; (8000a3c <MX_GPIO_Init+0x24c>)
 80008f6:	f000 fdb1 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2102      	movs	r1, #2
 80008fe:	4850      	ldr	r0, [pc, #320]	; (8000a40 <MX_GPIO_Init+0x250>)
 8000900:	f000 fdac 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	484a      	ldr	r0, [pc, #296]	; (8000a44 <MX_GPIO_Init+0x254>)
 800091a:	f000 fbef 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800091e:	2302      	movs	r3, #2
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800092e:	2306      	movs	r3, #6
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4842      	ldr	r0, [pc, #264]	; (8000a44 <MX_GPIO_Init+0x254>)
 800093a:	f000 fbdf 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800093e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4837      	ldr	r0, [pc, #220]	; (8000a34 <MX_GPIO_Init+0x244>)
 8000958:	f000 fbd0 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800095c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800096e:	2307      	movs	r3, #7
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	482f      	ldr	r0, [pc, #188]	; (8000a38 <MX_GPIO_Init+0x248>)
 800097a:	f000 fbbf 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800097e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4828      	ldr	r0, [pc, #160]	; (8000a38 <MX_GPIO_Init+0x248>)
 8000998:	f000 fbb0 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLCK_Pin */
  GPIO_InitStruct.Pin = CLCK_Pin;
 800099c:	2304      	movs	r3, #4
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CLCK_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4822      	ldr	r0, [pc, #136]	; (8000a3c <MX_GPIO_Init+0x24c>)
 80009b4:	f000 fba2 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_Pin */
  GPIO_InitStruct.Pin = DATA_Pin;
 80009b8:	2308      	movs	r3, #8
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481c      	ldr	r0, [pc, #112]	; (8000a3c <MX_GPIO_Init+0x24c>)
 80009cc:	f000 fb96 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_GPIO_Init+0x258>)
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4816      	ldr	r0, [pc, #88]	; (8000a3c <MX_GPIO_Init+0x24c>)
 80009e4:	f000 fb8a 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_GPIO_Init+0x254>)
 8000a06:	f000 fb79 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_GPIO_Init+0x250>)
 8000a22:	f000 fb6b 	bl	80010fc <HAL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	58024400 	.word	0x58024400
 8000a34:	58020400 	.word	0x58020400
 8000a38:	58020c00 	.word	0x58020c00
 8000a3c:	58021800 	.word	0x58021800
 8000a40:	58021000 	.word	0x58021000
 8000a44:	58020800 	.word	0x58020800
 8000a48:	11110000 	.word	0x11110000

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_MspInit+0x30>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a64:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x30>)
 8000a66:	f043 0302 	orr.w	r3, r3, #2
 8000a6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x30>)
 8000a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a74:	f003 0302 	and.w	r3, r3, #2
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	58024400 	.word	0x58024400

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <HAL_TIM_Base_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d117      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2019      	movs	r0, #25
 8000ac2:	f000 fae6 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ac6:	2019      	movs	r0, #25
 8000ac8:	f000 fafd 	bl	80010c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000acc:	e01b      	b.n	8000b06 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad6:	d116      	bne.n	8000b06 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ade:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <HAL_TIM_Base_MspInit+0x88>)
 8000aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	201c      	movs	r0, #28
 8000afc:	f000 fac9 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b00:	201c      	movs	r0, #28
 8000b02:	f000 fae0 	bl	80010c6 <HAL_NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40010000 	.word	0x40010000
 8000b14:	58024400 	.word	0x58024400

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f96a 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	TIM1->SR &= ~TIM_SR_UIF; //flag reset
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <TIM1_UP_IRQHandler+0x30>)
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <TIM1_UP_IRQHandler+0x30>)
 8000b78:	f023 0301 	bic.w	r3, r3, #1
 8000b7c:	6113      	str	r3, [r2, #16]
	lirPulse(&htim1, DATA_GPIO_Port, 3, CLCK_GPIO_Port, 2);
 8000b7e:	2302      	movs	r3, #2
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <TIM1_UP_IRQHandler+0x34>)
 8000b84:	2203      	movs	r2, #3
 8000b86:	4906      	ldr	r1, [pc, #24]	; (8000ba0 <TIM1_UP_IRQHandler+0x34>)
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <TIM1_UP_IRQHandler+0x38>)
 8000b8a:	f7ff fba5 	bl	80002d8 <lirPulse>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <TIM1_UP_IRQHandler+0x38>)
 8000b90:	f003 ffd8 	bl	8004b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	58021800 	.word	0x58021800
 8000ba4:	200003e4 	.word	0x200003e4

08000ba8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	TIM2->SR &= ~TIM_SR_UIF; //flag reset
 8000bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb6:	f023 0301 	bic.w	r3, r3, #1
 8000bba:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <TIM2_IRQHandler+0x28>)
 8000bbe:	f003 ffc1 	bl	8004b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  TIM1->CCER|=TIM_CCER_CC1E; //map to pins (pin PE9)
//  TIM1->BDTR|=TIM_BDTR_MOE; //main output enable
  lirCycle(&htim1, TIM1_UP_TIM10_IRQn);
 8000bc2:	2119      	movs	r1, #25
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <TIM2_IRQHandler+0x2c>)
 8000bc6:	f7ff fc3b 	bl	8000440 <lirCycle>
//  TIM1->DIER|= TIM1_CC_IRQn;
  /* USER CODE END TIM2_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000430 	.word	0x20000430
 8000bd4:	200003e4 	.word	0x200003e4

08000bd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <OTG_FS_IRQHandler+0x10>)
 8000bde:	f000 fdad 	bl	800173c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20001950 	.word	0x20001950

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <SystemInit+0xec>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a38      	ldr	r2, [pc, #224]	; (8000cd8 <SystemInit+0xec>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c00:	4b36      	ldr	r3, [pc, #216]	; (8000cdc <SystemInit+0xf0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d807      	bhi.n	8000c1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c0c:	4b33      	ldr	r3, [pc, #204]	; (8000cdc <SystemInit+0xf0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 030f 	bic.w	r3, r3, #15
 8000c14:	4a31      	ldr	r2, [pc, #196]	; (8000cdc <SystemInit+0xf0>)
 8000c16:	f043 0307 	orr.w	r3, r3, #7
 8000c1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c1c:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <SystemInit+0xf4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a2f      	ldr	r2, [pc, #188]	; (8000ce0 <SystemInit+0xf4>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c28:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <SystemInit+0xf4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <SystemInit+0xf4>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	492b      	ldr	r1, [pc, #172]	; (8000ce0 <SystemInit+0xf4>)
 8000c34:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <SystemInit+0xf8>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c3a:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <SystemInit+0xf0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <SystemInit+0xf0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f023 030f 	bic.w	r3, r3, #15
 8000c4e:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <SystemInit+0xf0>)
 8000c50:	f043 0307 	orr.w	r3, r3, #7
 8000c54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <SystemInit+0xf4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c5c:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <SystemInit+0xf4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <SystemInit+0xf4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <SystemInit+0xf4>)
 8000c6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ce8 <SystemInit+0xfc>)
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <SystemInit+0xf4>)
 8000c70:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <SystemInit+0x100>)
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <SystemInit+0xf4>)
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <SystemInit+0x104>)
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <SystemInit+0xf4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c80:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <SystemInit+0xf4>)
 8000c82:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <SystemInit+0x104>)
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c86:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <SystemInit+0xf4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c8c:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <SystemInit+0xf4>)
 8000c8e:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <SystemInit+0x104>)
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <SystemInit+0xf4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <SystemInit+0xf4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <SystemInit+0xf4>)
 8000c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <SystemInit+0xf4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <SystemInit+0x108>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <SystemInit+0x10c>)
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cb6:	d202      	bcs.n	8000cbe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <SystemInit+0x110>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <SystemInit+0x114>)
 8000cc0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cc4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SystemInit+0xec>)
 8000cc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ccc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	52002000 	.word	0x52002000
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ce8:	02020200 	.word	0x02020200
 8000cec:	01ff0000 	.word	0x01ff0000
 8000cf0:	01010280 	.word	0x01010280
 8000cf4:	5c001000 	.word	0x5c001000
 8000cf8:	ffff0000 	.word	0xffff0000
 8000cfc:	51008108 	.word	0x51008108
 8000d00:	52004000 	.word	0x52004000

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d08:	f7ff ff70 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	; (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d32:	f008 fbbf 	bl	80094b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fbef 	bl	8000518 <main>
  bx  lr
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000d48:	08009584 	.word	0x08009584
  ldr r2, =_sbss
 8000d4c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000d50:	20001d58 	.word	0x20001d58

08000d54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC3_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f000 f98c 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d64:	f002 fbe8 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_Init+0x68>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	f003 030f 	and.w	r3, r3, #15
 8000d74:	4913      	ldr	r1, [pc, #76]	; (8000dc4 <HAL_Init+0x6c>)
 8000d76:	5ccb      	ldrb	r3, [r1, r3]
 8000d78:	f003 031f 	and.w	r3, r3, #31
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_Init+0x68>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_Init+0x6c>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	fa22 f303 	lsr.w	r3, r2, r3
 8000d98:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <HAL_Init+0x70>)
 8000d9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d9c:	4a0b      	ldr	r2, [pc, #44]	; (8000dcc <HAL_Init+0x74>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 f814 	bl	8000dd0 <HAL_InitTick>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e002      	b.n	8000db8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000db2:	f7ff fe51 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	0800956c 	.word	0x0800956c
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	20000000 	.word	0x20000000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_InitTick+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e021      	b.n	8000e28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_InitTick+0x64>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_InitTick+0x60>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f971 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 f93b 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_InitTick+0x68>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	2000047c 	.word	0x2000047c

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2000047c 	.word	0x2000047c

08000e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff ffee 	bl	8000e64 <HAL_GetTick>
 8000e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e94:	d005      	beq.n	8000ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_Delay+0x44>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ea2:	bf00      	nop
 8000ea4:	f7ff ffde 	bl	8000e64 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d8f7      	bhi.n	8000ea4 <HAL_Delay+0x28>
  {
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000000c 	.word	0x2000000c

08000ec4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetREVID+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	0c1b      	lsrs	r3, r3, #16
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	5c001000 	.word	0x5c001000

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <__NVIC_SetPriorityGrouping+0x40>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x40>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00
 8000f20:	05fa0000 	.word	0x05fa0000

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff40 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff90 	bl	8000fd0 <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5f 	bl	8000f7c <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff33 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa4 	bl	8001038 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800110a:	4b89      	ldr	r3, [pc, #548]	; (8001330 <HAL_GPIO_Init+0x234>)
 800110c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800110e:	e194      	b.n	800143a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 8186 	beq.w	8001434 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d00b      	beq.n	8001148 <HAL_GPIO_Init+0x4c>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d007      	beq.n	8001148 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800113c:	2b11      	cmp	r3, #17
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b12      	cmp	r3, #18
 8001146:	d130      	bne.n	80011aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117e:	2201      	movs	r2, #1
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	f003 0201 	and.w	r2, r3, #1
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0xee>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b12      	cmp	r3, #18
 80011e8:	d123      	bne.n	8001232 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	08da      	lsrs	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3208      	adds	r2, #8
 80011f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	691a      	ldr	r2, [r3, #16]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	69b9      	ldr	r1, [r7, #24]
 800122e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0203 	and.w	r2, r3, #3
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80e0 	beq.w	8001434 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x238>)
 8001276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800127a:	4a2e      	ldr	r2, [pc, #184]	; (8001334 <HAL_GPIO_Init+0x238>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_GPIO_Init+0x238>)
 8001286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001292:	4a29      	ldr	r2, [pc, #164]	; (8001338 <HAL_GPIO_Init+0x23c>)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a20      	ldr	r2, [pc, #128]	; (800133c <HAL_GPIO_Init+0x240>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d052      	beq.n	8001364 <HAL_GPIO_Init+0x268>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_GPIO_Init+0x244>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d031      	beq.n	800132a <HAL_GPIO_Init+0x22e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <HAL_GPIO_Init+0x248>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d02b      	beq.n	8001326 <HAL_GPIO_Init+0x22a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x24c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d025      	beq.n	8001322 <HAL_GPIO_Init+0x226>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_GPIO_Init+0x250>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d01f      	beq.n	800131e <HAL_GPIO_Init+0x222>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_GPIO_Init+0x254>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d019      	beq.n	800131a <HAL_GPIO_Init+0x21e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1a      	ldr	r2, [pc, #104]	; (8001354 <HAL_GPIO_Init+0x258>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0x21a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_GPIO_Init+0x25c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x216>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_GPIO_Init+0x260>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x212>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a17      	ldr	r2, [pc, #92]	; (8001360 <HAL_GPIO_Init+0x264>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x20e>
 8001306:	2309      	movs	r3, #9
 8001308:	e02d      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800130a:	230a      	movs	r3, #10
 800130c:	e02b      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800130e:	2308      	movs	r3, #8
 8001310:	e029      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 8001312:	2307      	movs	r3, #7
 8001314:	e027      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 8001316:	2306      	movs	r3, #6
 8001318:	e025      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800131a:	2305      	movs	r3, #5
 800131c:	e023      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800131e:	2304      	movs	r3, #4
 8001320:	e021      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 8001322:	2303      	movs	r3, #3
 8001324:	e01f      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 8001326:	2302      	movs	r3, #2
 8001328:	e01d      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800132a:	2301      	movs	r3, #1
 800132c:	e01b      	b.n	8001366 <HAL_GPIO_Init+0x26a>
 800132e:	bf00      	nop
 8001330:	58000080 	.word	0x58000080
 8001334:	58024400 	.word	0x58024400
 8001338:	58000400 	.word	0x58000400
 800133c:	58020000 	.word	0x58020000
 8001340:	58020400 	.word	0x58020400
 8001344:	58020800 	.word	0x58020800
 8001348:	58020c00 	.word	0x58020c00
 800134c:	58021000 	.word	0x58021000
 8001350:	58021400 	.word	0x58021400
 8001354:	58021800 	.word	0x58021800
 8001358:	58021c00 	.word	0x58021c00
 800135c:	58022000 	.word	0x58022000
 8001360:	58022400 	.word	0x58022400
 8001364:	2300      	movs	r3, #0
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4093      	lsls	r3, r2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001376:	4938      	ldr	r1, [pc, #224]	; (8001458 <HAL_GPIO_Init+0x35c>)
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800142c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	3301      	adds	r3, #1
 8001438:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	f47f ae63 	bne.w	8001110 <HAL_GPIO_Init+0x14>
  }
}
 800144a:	bf00      	nop
 800144c:	bf00      	nop
 800144e:	3724      	adds	r7, #36	; 0x24
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	58000400 	.word	0x58000400

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800148e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001490:	b08f      	sub	sp, #60	; 0x3c
 8001492:	af0a      	add	r7, sp, #40	; 0x28
 8001494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e116      	b.n	80016ce <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f007 fcb4 	bl	8008e28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2203      	movs	r2, #3
 80014c4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f004 fbb9 	bl	8005c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	687e      	ldr	r6, [r7, #4]
 80014ec:	466d      	mov	r5, sp
 80014ee:	f106 0410 	add.w	r4, r6, #16
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001502:	1d33      	adds	r3, r6, #4
 8001504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001506:	6838      	ldr	r0, [r7, #0]
 8001508:	f004 fa84 	bl	8005a14 <USB_CoreInit>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2202      	movs	r2, #2
 8001516:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0d7      	b.n	80016ce <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f004 fba7 	bl	8005c78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e04a      	b.n	80015c6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	1a9b      	subs	r3, r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	333d      	adds	r3, #61	; 0x3d
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	333c      	adds	r3, #60	; 0x3c
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b298      	uxth	r0, r3
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	1a9b      	subs	r3, r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3342      	adds	r3, #66	; 0x42
 800156c:	4602      	mov	r2, r0
 800156e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	333f      	adds	r3, #63	; 0x3f
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	3344      	adds	r3, #68	; 0x44
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3348      	adds	r3, #72	; 0x48
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	3350      	adds	r3, #80	; 0x50
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	3301      	adds	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3af      	bcc.n	8001530 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e044      	b.n	8001660 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	1a9b      	subs	r3, r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3301      	adds	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3b5      	bcc.n	80015d6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	687e      	ldr	r6, [r7, #4]
 8001672:	466d      	mov	r5, sp
 8001674:	f106 0410 	add.w	r4, r6, #16
 8001678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800167c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001680:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001684:	e885 0003 	stmia.w	r5, {r0, r1}
 8001688:	1d33      	adds	r3, r6, #4
 800168a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168c:	6838      	ldr	r0, [r7, #0]
 800168e:	f004 fb1d 	bl	8005ccc <USB_DevInit>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e014      	b.n	80016ce <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d102      	bne.n	80016c2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f001 f891 	bl	80027e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f005 fb9d 	bl	8006e06 <USB_DevDisconnect>

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_PCD_Start+0x1c>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e020      	b.n	8001734 <HAL_PCD_Start+0x5e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d109      	bne.n	8001716 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001706:	2b01      	cmp	r3, #1
 8001708:	d005      	beq.n	8001716 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f004 fa8a 	bl	8005c34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f005 fb4d 	bl	8006dc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b08d      	sub	sp, #52	; 0x34
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fc0b 	bl	8006f6e <USB_GetMode>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 83ca 	bne.w	8001ef4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f005 fb6f 	bl	8006e48 <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 83c0 	beq.w	8001ef2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f005 fb66 	bl	8006e48 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d107      	bne.n	8001796 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f002 0202 	and.w	r2, r2, #2
 8001794:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f005 fb54 	bl	8006e48 <USB_ReadInterrupts>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d161      	bne.n	800186e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0210 	bic.w	r2, r2, #16
 80017b8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f003 020f 	and.w	r2, r3, #15
 80017c6:	4613      	mov	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	1a9b      	subs	r3, r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	3304      	adds	r3, #4
 80017d8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	0c5b      	lsrs	r3, r3, #17
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d124      	bne.n	8001830 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d035      	beq.n	800185e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	6a38      	ldr	r0, [r7, #32]
 8001806:	f005 f98b 	bl	8006b20 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001816:	441a      	add	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001828:	441a      	add	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	619a      	str	r2, [r3, #24]
 800182e:	e016      	b.n	800185e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	0c5b      	lsrs	r3, r3, #17
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	2b06      	cmp	r3, #6
 800183a:	d110      	bne.n	800185e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001842:	2208      	movs	r2, #8
 8001844:	4619      	mov	r1, r3
 8001846:	6a38      	ldr	r0, [r7, #32]
 8001848:	f005 f96a 	bl	8006b20 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001858:	441a      	add	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699a      	ldr	r2, [r3, #24]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0210 	orr.w	r2, r2, #16
 800186c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f005 fae8 	bl	8006e48 <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001882:	d16e      	bne.n	8001962 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f005 faee 	bl	8006e6e <USB_ReadDevAllOutEpInterrupt>
 8001892:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001894:	e062      	b.n	800195c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d057      	beq.n	8001950 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	4611      	mov	r1, r2
 80018aa:	4618      	mov	r0, r3
 80018ac:	f005 fb13 	bl	8006ed6 <USB_ReadDevOutEPInterrupt>
 80018b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c8:	461a      	mov	r2, r3
 80018ca:	2301      	movs	r3, #1
 80018cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fddd 	bl	8002490 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00c      	beq.n	80018fa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	015a      	lsls	r2, r3, #5
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ec:	461a      	mov	r2, r3
 80018ee:	2308      	movs	r3, #8
 80018f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fed7 	bl	80026a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	4413      	add	r3, r2
 800190c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001910:	461a      	mov	r2, r3
 8001912:	2310      	movs	r3, #16
 8001914:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192c:	461a      	mov	r2, r3
 800192e:	2320      	movs	r3, #32
 8001930:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4413      	add	r3, r2
 8001944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001948:	461a      	mov	r2, r3
 800194a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3301      	adds	r3, #1
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	2b00      	cmp	r3, #0
 8001960:	d199      	bne.n	8001896 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f005 fa6e 	bl	8006e48 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001972:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001976:	f040 80c0 	bne.w	8001afa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f005 fa8f 	bl	8006ea2 <USB_ReadDevAllInEpInterrupt>
 8001984:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800198a:	e0b2      	b.n	8001af2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80a7 	beq.w	8001ae6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f005 fab5 	bl	8006f12 <USB_ReadDevInEPInterrupt>
 80019a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d057      	beq.n	8001a64 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	2201      	movs	r2, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69f9      	ldr	r1, [r7, #28]
 80019d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019d4:	4013      	ands	r3, r2
 80019d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	015a      	lsls	r2, r3, #5
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	4413      	add	r3, r2
 80019e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e4:	461a      	mov	r2, r3
 80019e6:	2301      	movs	r3, #1
 80019e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d132      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	3348      	adds	r3, #72	; 0x48
 8001a02:	6819      	ldr	r1, [r3, #0]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4403      	add	r3, r0
 8001a12:	3344      	adds	r3, #68	; 0x44
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4419      	add	r1, r3
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4403      	add	r3, r0
 8001a26:	3348      	adds	r3, #72	; 0x48
 8001a28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d113      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x31c>
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3350      	adds	r3, #80	; 0x50
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a50:	461a      	mov	r2, r3
 8001a52:	2101      	movs	r1, #1
 8001a54:	f005 fabe 	bl	8006fd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f007 fa91 	bl	8008f86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	015a      	lsls	r2, r3, #5
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a96:	461a      	mov	r2, r3
 8001a98:	2310      	movs	r3, #16
 8001a9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2340      	movs	r3, #64	; 0x40
 8001ab6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	015a      	lsls	r2, r3, #5
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fc48 	bl	8002376 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3301      	adds	r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	085b      	lsrs	r3, r3, #1
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f47f af49 	bne.w	800198c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f005 f9a2 	bl	8006e48 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b0e:	d122      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d108      	bne.n	8001b40 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b36:	2100      	movs	r1, #0
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fe77 	bl	800282c <HAL_PCDEx_LPM_Callback>
 8001b3e:	e002      	b.n	8001b46 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f007 fa97 	bl	8009074 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f005 f974 	bl	8006e48 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b6a:	d112      	bne.n	8001b92 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d102      	bne.n	8001b82 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f007 fa53 	bl	8009028 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695a      	ldr	r2, [r3, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f005 f956 	bl	8006e48 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ba6:	d121      	bne.n	8001bec <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001bb6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d111      	bne.n	8001be6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	f003 020f 	and.w	r2, r3, #15
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001bdc:	2101      	movs	r1, #1
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fe24 	bl	800282c <HAL_PCDEx_LPM_Callback>
 8001be4:	e002      	b.n	8001bec <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f007 fa1e 	bl	8009028 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f005 f929 	bl	8006e48 <USB_ReadInterrupts>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c00:	f040 80c7 	bne.w	8001d92 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2110      	movs	r1, #16
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 f9b2 	bl	8005f88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c28:	e056      	b.n	8001cd8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	015a      	lsls	r2, r3, #5
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	4413      	add	r3, r2
 8001c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c36:	461a      	mov	r2, r3
 8001c38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c3c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4e:	0151      	lsls	r1, r2, #5
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	440a      	add	r2, r1
 8001c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c5c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	015a      	lsls	r2, r3, #5
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6e:	0151      	lsls	r1, r2, #5
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	440a      	add	r2, r1
 8001c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c7c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	015a      	lsls	r2, r3, #5
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	4413      	add	r3, r2
 8001c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c90:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca2:	0151      	lsls	r1, r2, #5
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	440a      	add	r2, r1
 8001ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cb0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb4:	015a      	lsls	r2, r3, #5
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc2:	0151      	lsls	r1, r2, #5
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	440a      	add	r2, r1
 8001cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ccc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cd0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d3a3      	bcc.n	8001c2a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001cf4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d016      	beq.n	8001d2c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0e:	f043 030b 	orr.w	r3, r3, #11
 8001d12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d24:	f043 030b 	orr.w	r3, r3, #11
 8001d28:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2a:	e015      	b.n	8001d58 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f242 032b 	movw	r3, #8235	; 0x202b
 8001d40:	4313      	orrs	r3, r2
 8001d42:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d52:	f043 030b 	orr.w	r3, r3, #11
 8001d56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f005 f929 	bl	8006fd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 f856 	bl	8006e48 <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001da6:	d124      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 f8ed 	bl	8006f8c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 f947 	bl	800604a <USB_GetDevSpeed>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681c      	ldr	r4, [r3, #0]
 8001dc8:	f001 fd30 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8001dcc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f003 fe8a 	bl	8005af0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f007 f8fa 	bl	8008fd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f005 f826 	bl	8006e48 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d10a      	bne.n	8001e1c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f007 f8d7 	bl	8008fba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f002 0208 	and.w	r2, r2, #8
 8001e1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 f811 	bl	8006e48 <USB_ReadInterrupts>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e30:	d10f      	bne.n	8001e52 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f007 f939 	bl	80090b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 fff6 	bl	8006e48 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e66:	d10f      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f007 f90c 	bl	8009090 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 ffdb 	bl	8006e48 <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f007 f91a 	bl	80090d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 ffc5 	bl	8006e48 <USB_ReadInterrupts>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d115      	bne.n	8001ef4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f007 f90a 	bl	80090f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	e000      	b.n	8001ef4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001ef2:	bf00      	nop
    }
  }
}
 8001ef4:	3734      	adds	r7, #52	; 0x34
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}

08001efa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_PCD_SetAddress+0x1a>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e013      	b.n	8001f3c <HAL_PCD_SetAddress+0x42>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 ff23 	bl	8006d78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	4608      	mov	r0, r1
 8001f4e:	4611      	mov	r1, r2
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	70fb      	strb	r3, [r7, #3]
 8001f56:	460b      	mov	r3, r1
 8001f58:	803b      	strh	r3, [r7, #0]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da0f      	bge.n	8001f8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 020f 	and.w	r2, r3, #15
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	3338      	adds	r3, #56	; 0x38
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3304      	adds	r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2201      	movs	r2, #1
 8001f86:	705a      	strb	r2, [r3, #1]
 8001f88:	e00f      	b.n	8001faa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	f003 020f 	and.w	r2, r3, #15
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	1a9b      	subs	r3, r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fb6:	883a      	ldrh	r2, [r7, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	78ba      	ldrb	r2, [r7, #2]
 8001fc0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	785b      	ldrb	r3, [r3, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fd4:	78bb      	ldrb	r3, [r7, #2]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d102      	bne.n	8001fe0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_EP_Open+0xaa>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e00e      	b.n	800200c <HAL_PCD_EP_Open+0xc8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f004 f849 	bl	8006094 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800200a:	7afb      	ldrb	r3, [r7, #11]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	da0f      	bge.n	8002048 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3338      	adds	r3, #56	; 0x38
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	705a      	strb	r2, [r3, #1]
 8002046:	e00f      	b.n	8002068 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	f003 020f 	and.w	r2, r3, #15
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3304      	adds	r3, #4
 8002060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	b2da      	uxtb	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <HAL_PCD_EP_Close+0x6e>
 800207e:	2302      	movs	r3, #2
 8002080:	e00e      	b.n	80020a0 <HAL_PCD_EP_Close+0x8c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68f9      	ldr	r1, [r7, #12]
 8002090:	4618      	mov	r0, r3
 8002092:	f004 f887 	bl	80061a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	460b      	mov	r3, r1
 80020b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	f003 020f 	and.w	r2, r3, #15
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4413      	add	r3, r2
 80020ce:	3304      	adds	r3, #4
 80020d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2200      	movs	r2, #0
 80020e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ea:	7afb      	ldrb	r3, [r7, #11]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d102      	bne.n	8002104 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6818      	ldr	r0, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	6979      	ldr	r1, [r7, #20]
 800211c:	f004 fb6a 	bl	80067f4 <USB_EP0StartXfer>
 8002120:	e008      	b.n	8002134 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	6979      	ldr	r1, [r7, #20]
 8002130:	f004 f914 	bl	800635c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002160:	681b      	ldr	r3, [r3, #0]
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	460b      	mov	r3, r1
 800217c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217e:	7afb      	ldrb	r3, [r7, #11]
 8002180:	f003 020f 	and.w	r2, r3, #15
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	3338      	adds	r3, #56	; 0x38
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2201      	movs	r2, #1
 80021ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021c8:	7afb      	ldrb	r3, [r7, #11]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	6979      	ldr	r1, [r7, #20]
 80021e0:	f004 fb08 	bl	80067f4 <USB_EP0StartXfer>
 80021e4:	e008      	b.n	80021f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	6979      	ldr	r1, [r7, #20]
 80021f4:	f004 f8b2 	bl	800635c <USB_EPStartXfer>
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 020f 	and.w	r2, r3, #15
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d901      	bls.n	8002220 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e050      	b.n	80022c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002224:	2b00      	cmp	r3, #0
 8002226:	da0f      	bge.n	8002248 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 020f 	and.w	r2, r3, #15
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	3338      	adds	r3, #56	; 0x38
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	705a      	strb	r2, [r3, #1]
 8002246:	e00d      	b.n	8002264 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_PCD_EP_SetStall+0x82>
 8002280:	2302      	movs	r3, #2
 8002282:	e01e      	b.n	80022c2 <HAL_PCD_EP_SetStall+0xc0>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68f9      	ldr	r1, [r7, #12]
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fc9c 	bl	8006bd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10a      	bne.n	80022b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	b2d9      	uxtb	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022b2:	461a      	mov	r2, r3
 80022b4:	f004 fe8e 	bl	8006fd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d901      	bls.n	80022e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e042      	b.n	800236e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da0f      	bge.n	8002310 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 020f 	and.w	r2, r3, #15
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	3338      	adds	r3, #56	; 0x38
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	3304      	adds	r3, #4
 8002306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	705a      	strb	r2, [r3, #1]
 800230e:	e00f      	b.n	8002330 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	f003 020f 	and.w	r2, r3, #15
 8002316:	4613      	mov	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	3304      	adds	r3, #4
 8002328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_PCD_EP_ClrStall+0x86>
 800234c:	2302      	movs	r3, #2
 800234e:	e00e      	b.n	800236e <HAL_PCD_EP_ClrStall+0xa4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68f9      	ldr	r1, [r7, #12]
 800235e:	4618      	mov	r0, r3
 8002360:	f004 fca4 	bl	8006cac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b08a      	sub	sp, #40	; 0x28
 800237a:	af02      	add	r7, sp, #8
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	3338      	adds	r3, #56	; 0x38
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	3304      	adds	r3, #4
 800239c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	699a      	ldr	r2, [r3, #24]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d901      	bls.n	80023ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e06c      	b.n	8002488 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	69fa      	ldr	r2, [r7, #28]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d902      	bls.n	80023ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3303      	adds	r3, #3
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d2:	e02b      	b.n	800242c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	695a      	ldr	r2, [r3, #20]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d902      	bls.n	80023f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	3303      	adds	r3, #3
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68d9      	ldr	r1, [r3, #12]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002408:	b2db      	uxtb	r3, r3
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4603      	mov	r3, r0
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f004 fb48 	bl	8006aa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	441a      	add	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	699a      	ldr	r2, [r3, #24]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	441a      	add	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	b29b      	uxth	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	429a      	cmp	r2, r3
 8002440:	d809      	bhi.n	8002456 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800244a:	429a      	cmp	r2, r3
 800244c:	d203      	bcs.n	8002456 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1be      	bne.n	80023d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	429a      	cmp	r2, r3
 8002460:	d811      	bhi.n	8002486 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f003 030f 	and.w	r3, r3, #15
 8002468:	2201      	movs	r2, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	43db      	mvns	r3, r3
 800247c:	6939      	ldr	r1, [r7, #16]
 800247e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002482:	4013      	ands	r3, r2
 8002484:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3720      	adds	r7, #32
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	333c      	adds	r3, #60	; 0x3c
 80024a8:	3304      	adds	r3, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	f040 80a0 	bne.w	8002608 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d015      	beq.n	80024fe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a72      	ldr	r2, [pc, #456]	; (80026a0 <PCD_EP_OutXfrComplete_int+0x210>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	f240 80dd 	bls.w	8002696 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80d7 	beq.w	8002696 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f4:	461a      	mov	r2, r3
 80024f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024fa:	6093      	str	r3, [r2, #8]
 80024fc:	e0cb      	b.n	8002696 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	461a      	mov	r2, r3
 8002516:	2320      	movs	r3, #32
 8002518:	6093      	str	r3, [r2, #8]
 800251a:	e0bc      	b.n	8002696 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 80b7 	bne.w	8002696 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a5d      	ldr	r2, [pc, #372]	; (80026a0 <PCD_EP_OutXfrComplete_int+0x210>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d90f      	bls.n	8002550 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002546:	461a      	mov	r2, r3
 8002548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800254c:	6093      	str	r3, [r2, #8]
 800254e:	e0a2      	b.n	8002696 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002562:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	0159      	lsls	r1, r3, #5
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	440b      	add	r3, r1
 800256c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002576:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4403      	add	r3, r0
 8002586:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800258a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4403      	add	r3, r0
 80025ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4419      	add	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4403      	add	r3, r0
 80025c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025c8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d114      	bne.n	80025fa <PCD_EP_OutXfrComplete_int+0x16a>
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d108      	bne.n	80025fa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025f2:	461a      	mov	r2, r3
 80025f4:	2101      	movs	r1, #1
 80025f6:	f004 fced 	bl	8006fd4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f006 fca5 	bl	8008f50 <HAL_PCD_DataOutStageCallback>
 8002606:	e046      	b.n	8002696 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4a26      	ldr	r2, [pc, #152]	; (80026a4 <PCD_EP_OutXfrComplete_int+0x214>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d124      	bne.n	800265a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002626:	461a      	mov	r2, r3
 8002628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262c:	6093      	str	r3, [r2, #8]
 800262e:	e032      	b.n	8002696 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002646:	461a      	mov	r2, r3
 8002648:	2320      	movs	r3, #32
 800264a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f006 fc7c 	bl	8008f50 <HAL_PCD_DataOutStageCallback>
 8002658:	e01d      	b.n	8002696 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d114      	bne.n	800268a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002682:	461a      	mov	r2, r3
 8002684:	2100      	movs	r1, #0
 8002686:	f004 fca5 	bl	8006fd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f006 fc5d 	bl	8008f50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	4f54300a 	.word	0x4f54300a
 80026a4:	4f54310a 	.word	0x4f54310a

080026a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	333c      	adds	r3, #60	; 0x3c
 80026c0:	3304      	adds	r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a15      	ldr	r2, [pc, #84]	; (8002730 <PCD_EP_OutSetupPacket_int+0x88>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d90e      	bls.n	80026fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d009      	beq.n	80026fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f4:	461a      	mov	r2, r3
 80026f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f006 fc15 	bl	8008f2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <PCD_EP_OutSetupPacket_int+0x88>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d90c      	bls.n	8002724 <PCD_EP_OutSetupPacket_int+0x7c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d108      	bne.n	8002724 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800271c:	461a      	mov	r2, r3
 800271e:	2101      	movs	r1, #1
 8002720:	f004 fc58 	bl	8006fd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	4f54300a 	.word	0x4f54300a

08002734 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
 8002740:	4613      	mov	r3, r2
 8002742:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d107      	bne.n	8002762 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002752:	883b      	ldrh	r3, [r7, #0]
 8002754:	0419      	lsls	r1, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	430a      	orrs	r2, r1
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
 8002760:	e028      	b.n	80027b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	0c1b      	lsrs	r3, r3, #16
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e00d      	b.n	8002792 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	3340      	adds	r3, #64	; 0x40
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	4413      	add	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	3301      	adds	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	3b01      	subs	r3, #1
 8002798:	429a      	cmp	r2, r3
 800279a:	d3ec      	bcc.n	8002776 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800279c:	883b      	ldrh	r3, [r7, #0]
 800279e:	0418      	lsls	r0, r3, #16
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	4302      	orrs	r2, r0
 80027ac:	3340      	adds	r3, #64	; 0x40
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_PCDEx_ActivateLPM+0x44>)
 8002814:	4313      	orrs	r3, r2
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	10000003 	.word	0x10000003

0800282c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_PWREx_ConfigSupply+0x70>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b04      	cmp	r3, #4
 8002856:	d00a      	beq.n	800286e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_PWREx_ConfigSupply+0x70>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e01f      	b.n	80028aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e01d      	b.n	80028aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_PWREx_ConfigSupply+0x70>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f023 0207 	bic.w	r2, r3, #7
 8002876:	490f      	ldr	r1, [pc, #60]	; (80028b4 <HAL_PWREx_ConfigSupply+0x70>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4313      	orrs	r3, r2
 800287c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800287e:	f7fe faf1 	bl	8000e64 <HAL_GetTick>
 8002882:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002884:	e009      	b.n	800289a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002886:	f7fe faed 	bl	8000e64 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002894:	d901      	bls.n	800289a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e007      	b.n	80028aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_PWREx_ConfigSupply+0x70>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028a6:	d1ee      	bne.n	8002886 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	58024800 	.word	0x58024800

080028b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	58024800 	.word	0x58024800

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	; 0x30
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e3ff      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8087 	beq.w	8002a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f8:	4b99      	ldr	r3, [pc, #612]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002902:	4b97      	ldr	r3, [pc, #604]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	2b10      	cmp	r3, #16
 800290c:	d007      	beq.n	800291e <HAL_RCC_OscConfig+0x46>
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	2b18      	cmp	r3, #24
 8002912:	d110      	bne.n	8002936 <HAL_RCC_OscConfig+0x5e>
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	4b90      	ldr	r3, [pc, #576]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x12c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d168      	bne.n	8002a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e3d9      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x76>
 8002940:	4b87      	ldr	r3, [pc, #540]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a86      	ldr	r2, [pc, #536]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e02e      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x98>
 8002956:	4b82      	ldr	r3, [pc, #520]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a81      	ldr	r2, [pc, #516]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b7f      	ldr	r3, [pc, #508]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a7e      	ldr	r2, [pc, #504]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xbc>
 800297a:	4b79      	ldr	r3, [pc, #484]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a78      	ldr	r2, [pc, #480]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b76      	ldr	r3, [pc, #472]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 8002994:	4b72      	ldr	r3, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a71      	ldr	r2, [pc, #452]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6e      	ldr	r2, [pc, #440]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fa56 	bl	8000e64 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fa52 	bl	8000e64 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e38d      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029ce:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0xe4>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fa42 	bl	8000e64 <HAL_GetTick>
 80029e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe fa3e 	bl	8000e64 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e379      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029f6:	4b5a      	ldr	r3, [pc, #360]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x10c>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80ae 	beq.w	8002b70 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a14:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a1c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a1e:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <HAL_RCC_OscConfig+0x162>
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	2b18      	cmp	r3, #24
 8002a2e:	d13a      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x1ce>
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d135      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a3a:	4b49      	ldr	r3, [pc, #292]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_RCC_OscConfig+0x17a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e34b      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	f7fe fa37 	bl	8000ec4 <HAL_GetREVID>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d817      	bhi.n	8002a90 <HAL_RCC_OscConfig+0x1b8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d108      	bne.n	8002a7a <HAL_RCC_OscConfig+0x1a2>
 8002a68:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a70:	4a3b      	ldr	r2, [pc, #236]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a76:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a78:	e07a      	b.n	8002b70 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7a:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	031b      	lsls	r3, r3, #12
 8002a88:	4935      	ldr	r1, [pc, #212]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a8e:	e06f      	b.n	8002b70 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4b33      	ldr	r3, [pc, #204]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	4930      	ldr	r1, [pc, #192]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa4:	e064      	b.n	8002b70 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d045      	beq.n	8002b3a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002aae:	4b2c      	ldr	r3, [pc, #176]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 0219 	bic.w	r2, r3, #25
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	4929      	ldr	r1, [pc, #164]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe f9d0 	bl	8000e64 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe f9cc 	bl	8000e64 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e307      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae6:	f7fe f9ed 	bl	8000ec4 <HAL_GetREVID>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f241 0203 	movw	r2, #4099	; 0x1003
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d817      	bhi.n	8002b24 <HAL_RCC_OscConfig+0x24c>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b40      	cmp	r3, #64	; 0x40
 8002afa:	d108      	bne.n	8002b0e <HAL_RCC_OscConfig+0x236>
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b04:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0a:	6053      	str	r3, [r2, #4]
 8002b0c:	e030      	b.n	8002b70 <HAL_RCC_OscConfig+0x298>
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	031b      	lsls	r3, r3, #12
 8002b1c:	4910      	ldr	r1, [pc, #64]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
 8002b22:	e025      	b.n	8002b70 <HAL_RCC_OscConfig+0x298>
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	490b      	ldr	r1, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]
 8002b38:	e01a      	b.n	8002b70 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <HAL_RCC_OscConfig+0x288>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe f98d 	bl	8000e64 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe f989 	bl	8000e64 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d903      	bls.n	8002b64 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e2c4      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
 8002b60:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b64:	4ba4      	ldr	r3, [pc, #656]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1ee      	bne.n	8002b4e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a9 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7e:	4b9e      	ldr	r3, [pc, #632]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b88:	4b9b      	ldr	r3, [pc, #620]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d007      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x2cc>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b18      	cmp	r3, #24
 8002b98:	d13a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x338>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d135      	bne.n	8002c10 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ba4:	4b94      	ldr	r3, [pc, #592]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2e4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e296      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bbc:	f7fe f982 	bl	8000ec4 <HAL_GetREVID>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d817      	bhi.n	8002bfa <HAL_RCC_OscConfig+0x322>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d108      	bne.n	8002be4 <HAL_RCC_OscConfig+0x30c>
 8002bd2:	4b89      	ldr	r3, [pc, #548]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bda:	4a87      	ldr	r2, [pc, #540]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002bdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002be0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002be2:	e075      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002be4:	4b84      	ldr	r3, [pc, #528]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	069b      	lsls	r3, r3, #26
 8002bf2:	4981      	ldr	r1, [pc, #516]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf8:	e06a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bfa:	4b7f      	ldr	r3, [pc, #508]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	061b      	lsls	r3, r3, #24
 8002c08:	497b      	ldr	r1, [pc, #492]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c0e:	e05f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d042      	beq.n	8002c9e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c18:	4b77      	ldr	r3, [pc, #476]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a76      	ldr	r2, [pc, #472]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c24:	f7fe f91e 	bl	8000e64 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c2c:	f7fe f91a 	bl	8000e64 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e255      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c3e:	4b6e      	ldr	r3, [pc, #440]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c4a:	f7fe f93b 	bl	8000ec4 <HAL_GetREVID>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d817      	bhi.n	8002c88 <HAL_RCC_OscConfig+0x3b0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d108      	bne.n	8002c72 <HAL_RCC_OscConfig+0x39a>
 8002c60:	4b65      	ldr	r3, [pc, #404]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c68:	4a63      	ldr	r2, [pc, #396]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c6e:	6053      	str	r3, [r2, #4]
 8002c70:	e02e      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3f8>
 8002c72:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	069b      	lsls	r3, r3, #26
 8002c80:	495d      	ldr	r1, [pc, #372]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
 8002c86:	e023      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3f8>
 8002c88:	4b5b      	ldr	r3, [pc, #364]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	061b      	lsls	r3, r3, #24
 8002c96:	4958      	ldr	r1, [pc, #352]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60cb      	str	r3, [r1, #12]
 8002c9c:	e018      	b.n	8002cd0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c9e:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a55      	ldr	r2, [pc, #340]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fe f8db 	bl	8000e64 <HAL_GetTick>
 8002cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cb2:	f7fe f8d7 	bl	8000e64 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e212      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f0      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d036      	beq.n	8002d4a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d019      	beq.n	8002d18 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce4:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce8:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f8b8 	bl	8000e64 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe f8b4 	bl	8000e64 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1ef      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x420>
 8002d16:	e018      	b.n	8002d4a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1c:	4a36      	ldr	r2, [pc, #216]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe f89e 	bl	8000e64 <HAL_GetTick>
 8002d28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe f89a 	bl	8000e64 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1d5      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d036      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d019      	beq.n	8002d92 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d6a:	f7fe f87b 	bl	8000e64 <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d72:	f7fe f877 	bl	8000e64 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e1b2      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x49a>
 8002d90:	e018      	b.n	8002dc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d92:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d9e:	f7fe f861 	bl	8000e64 <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002da6:	f7fe f85d 	bl	8000e64 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e198      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <HAL_RCC_OscConfig+0x520>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8085 	beq.w	8002edc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dd2:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <HAL_RCC_OscConfig+0x524>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <HAL_RCC_OscConfig+0x524>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dde:	f7fe f841 	bl	8000e64 <HAL_GetTick>
 8002de2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de4:	e00c      	b.n	8002e00 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7fe f83d 	bl	8000e64 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b64      	cmp	r3, #100	; 0x64
 8002df2:	d905      	bls.n	8002e00 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e178      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
 8002df8:	58024400 	.word	0x58024400
 8002dfc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e00:	4b96      	ldr	r3, [pc, #600]	; (800305c <HAL_RCC_OscConfig+0x784>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ec      	beq.n	8002de6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x54a>
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	4a91      	ldr	r2, [pc, #580]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e20:	e02d      	b.n	8002e7e <HAL_RCC_OscConfig+0x5a6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x56c>
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	4a8c      	ldr	r2, [pc, #560]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6713      	str	r3, [r2, #112]	; 0x70
 8002e36:	4b8a      	ldr	r3, [pc, #552]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a89      	ldr	r2, [pc, #548]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	e01c      	b.n	8002e7e <HAL_RCC_OscConfig+0x5a6>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCC_OscConfig+0x58e>
 8002e4c:	4b84      	ldr	r3, [pc, #528]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a83      	ldr	r2, [pc, #524]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	4b81      	ldr	r3, [pc, #516]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a80      	ldr	r2, [pc, #512]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e5e:	f043 0301 	orr.w	r3, r3, #1
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	e00b      	b.n	8002e7e <HAL_RCC_OscConfig+0x5a6>
 8002e66:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	4a7d      	ldr	r2, [pc, #500]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6713      	str	r3, [r2, #112]	; 0x70
 8002e72:	4b7b      	ldr	r3, [pc, #492]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a7a      	ldr	r2, [pc, #488]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002e78:	f023 0304 	bic.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d015      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e86:	f7fd ffed 	bl	8000e64 <HAL_GetTick>
 8002e8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e8c:	e00a      	b.n	8002ea4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fd ffe9 	bl	8000e64 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e122      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ea4:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ee      	beq.n	8002e8e <HAL_RCC_OscConfig+0x5b6>
 8002eb0:	e014      	b.n	8002edc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fd ffd7 	bl	8000e64 <HAL_GetTick>
 8002eb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fd ffd3 	bl	8000e64 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e10c      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ed0:	4b63      	ldr	r3, [pc, #396]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1ee      	bne.n	8002eba <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8101 	beq.w	80030e8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ee6:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eee:	2b18      	cmp	r3, #24
 8002ef0:	f000 80bc 	beq.w	800306c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	f040 8095 	bne.w	8003028 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b58      	ldr	r3, [pc, #352]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a57      	ldr	r2, [pc, #348]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fd ffab 	bl	8000e64 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fd ffa7 	bl	8000e64 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0e2      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f24:	4b4e      	ldr	r3, [pc, #312]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f34:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <HAL_RCC_OscConfig+0x78c>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f40:	0112      	lsls	r2, r2, #4
 8002f42:	430a      	orrs	r2, r1
 8002f44:	4946      	ldr	r1, [pc, #280]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	628b      	str	r3, [r1, #40]	; 0x28
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	025b      	lsls	r3, r3, #9
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	3b01      	subs	r3, #1
 8002f66:	041b      	lsls	r3, r3, #16
 8002f68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	3b01      	subs	r3, #1
 8002f74:	061b      	lsls	r3, r3, #24
 8002f76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f7a:	4939      	ldr	r1, [pc, #228]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f80:	4b37      	ldr	r3, [pc, #220]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	4a36      	ldr	r2, [pc, #216]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f8c:	4b34      	ldr	r3, [pc, #208]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f90:	4b35      	ldr	r3, [pc, #212]	; (8003068 <HAL_RCC_OscConfig+0x790>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f98:	00d2      	lsls	r2, r2, #3
 8002f9a:	4931      	ldr	r1, [pc, #196]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fa0:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	f023 020c 	bic.w	r2, r3, #12
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	492c      	ldr	r1, [pc, #176]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fb2:	4b2b      	ldr	r3, [pc, #172]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	f023 0202 	bic.w	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	4928      	ldr	r1, [pc, #160]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fc4:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	4a25      	ldr	r2, [pc, #148]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4a22      	ldr	r2, [pc, #136]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fec:	4a1c      	ldr	r2, [pc, #112]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8002ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd ff30 	bl	8000e64 <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003008:	f7fd ff2c 	bl	8000e64 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e067      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800301a:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0x730>
 8003026:	e05f      	b.n	80030e8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003028:	4b0d      	ldr	r3, [pc, #52]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 800302e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fd ff16 	bl	8000e64 <HAL_GetTick>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303c:	f7fd ff12 	bl	8000e64 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04d      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_RCC_OscConfig+0x788>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x764>
 800305a:	e045      	b.n	80030e8 <HAL_RCC_OscConfig+0x810>
 800305c:	58024800 	.word	0x58024800
 8003060:	58024400 	.word	0x58024400
 8003064:	fffffc0c 	.word	0xfffffc0c
 8003068:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCC_OscConfig+0x81c>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003072:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_RCC_OscConfig+0x81c>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	2b01      	cmp	r3, #1
 800307e:	d031      	beq.n	80030e4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f003 0203 	and.w	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308a:	429a      	cmp	r2, r3
 800308c:	d12a      	bne.n	80030e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d122      	bne.n	80030e4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d11a      	bne.n	80030e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0a5b      	lsrs	r3, r3, #9
 80030b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d111      	bne.n	80030e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	0c1b      	lsrs	r3, r3, #16
 80030c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d108      	bne.n	80030e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	0e1b      	lsrs	r3, r3, #24
 80030d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3730      	adds	r7, #48	; 0x30
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	58024400 	.word	0x58024400

080030f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e19c      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b8a      	ldr	r3, [pc, #552]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d910      	bls.n	800313c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b87      	ldr	r3, [pc, #540]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 020f 	bic.w	r2, r3, #15
 8003122:	4985      	ldr	r1, [pc, #532]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b83      	ldr	r3, [pc, #524]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e184      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	4b7b      	ldr	r3, [pc, #492]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003154:	429a      	cmp	r2, r3
 8003156:	d908      	bls.n	800316a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003158:	4b78      	ldr	r3, [pc, #480]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	4975      	ldr	r1, [pc, #468]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003166:	4313      	orrs	r3, r2
 8003168:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003182:	429a      	cmp	r2, r3
 8003184:	d908      	bls.n	8003198 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003186:	4b6d      	ldr	r3, [pc, #436]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	496a      	ldr	r1, [pc, #424]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003194:	4313      	orrs	r3, r2
 8003196:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699a      	ldr	r2, [r3, #24]
 80031a8:	4b64      	ldr	r3, [pc, #400]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d908      	bls.n	80031c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031b4:	4b61      	ldr	r3, [pc, #388]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	495e      	ldr	r1, [pc, #376]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	4b59      	ldr	r3, [pc, #356]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031de:	429a      	cmp	r2, r3
 80031e0:	d908      	bls.n	80031f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031e2:	4b56      	ldr	r3, [pc, #344]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4953      	ldr	r1, [pc, #332]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4b4d      	ldr	r3, [pc, #308]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	429a      	cmp	r2, r3
 800320e:	d908      	bls.n	8003222 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b4a      	ldr	r3, [pc, #296]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f023 020f 	bic.w	r2, r3, #15
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4947      	ldr	r1, [pc, #284]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800321e:	4313      	orrs	r3, r2
 8003220:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d055      	beq.n	80032da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4940      	ldr	r1, [pc, #256]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800323c:	4313      	orrs	r3, r2
 800323e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d107      	bne.n	8003258 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003248:	4b3c      	ldr	r3, [pc, #240]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d121      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0f6      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d107      	bne.n	8003270 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d115      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0ea      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003278:	4b30      	ldr	r3, [pc, #192]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0de      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d6      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f023 0207 	bic.w	r2, r3, #7
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4925      	ldr	r1, [pc, #148]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032aa:	f7fd fddb 	bl	8000e64 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032b2:	f7fd fdd7 	bl	8000e64 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0be      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c8:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d1eb      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d010      	beq.n	8003308 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	4b14      	ldr	r3, [pc, #80]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d208      	bcs.n	8003308 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f023 020f 	bic.w	r2, r3, #15
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	490e      	ldr	r1, [pc, #56]	; (800333c <HAL_RCC_ClockConfig+0x244>)
 8003304:	4313      	orrs	r3, r2
 8003306:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d214      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 020f 	bic.w	r2, r3, #15
 800331e:	4906      	ldr	r1, [pc, #24]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_RCC_ClockConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e086      	b.n	8003446 <HAL_RCC_ClockConfig+0x34e>
 8003338:	52002000 	.word	0x52002000
 800333c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d010      	beq.n	800336e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	4b3f      	ldr	r3, [pc, #252]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003358:	429a      	cmp	r2, r3
 800335a:	d208      	bcs.n	800336e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800335c:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	4939      	ldr	r1, [pc, #228]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 800336a:	4313      	orrs	r3, r2
 800336c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d010      	beq.n	800339c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	4b34      	ldr	r3, [pc, #208]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003386:	429a      	cmp	r2, r3
 8003388:	d208      	bcs.n	800339c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800338a:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	492e      	ldr	r1, [pc, #184]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003398:	4313      	orrs	r3, r2
 800339a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d010      	beq.n	80033ca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d208      	bcs.n	80033ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4922      	ldr	r1, [pc, #136]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69da      	ldr	r2, [r3, #28]
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d208      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033e6:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4917      	ldr	r1, [pc, #92]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033f8:	f000 f89e 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	0a1b      	lsrs	r3, r3, #8
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	4912      	ldr	r1, [pc, #72]	; (8003454 <HAL_RCC_ClockConfig+0x35c>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_RCC_ClockConfig+0x358>)
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <HAL_RCC_ClockConfig+0x35c>)
 8003420:	5cd3      	ldrb	r3, [r2, r3]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
 800342c:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <HAL_RCC_ClockConfig+0x360>)
 800342e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003430:	4a0a      	ldr	r2, [pc, #40]	; (800345c <HAL_RCC_ClockConfig+0x364>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x368>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fcc8 	bl	8000dd0 <HAL_InitTick>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	58024400 	.word	0x58024400
 8003454:	0800956c 	.word	0x0800956c
 8003458:	20000004 	.word	0x20000004
 800345c:	20000000 	.word	0x20000000
 8003460:	20000008 	.word	0x20000008

08003464 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	; 0x30
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d12a      	bne.n	80034cc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 8003478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800347c:	4a2b      	ldr	r2, [pc, #172]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003486:	4b29      	ldr	r3, [pc, #164]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 8003488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8003494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	2302      	movs	r3, #2
 800349c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349e:	2303      	movs	r3, #3
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80034a6:	2300      	movs	r3, #0
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80034aa:	f107 031c 	add.w	r3, r7, #28
 80034ae:	4619      	mov	r1, r3
 80034b0:	481f      	ldr	r0, [pc, #124]	; (8003530 <HAL_RCC_MCOConfig+0xcc>)
 80034b2:	f7fd fe23 	bl	80010fc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	430b      	orrs	r3, r1
 80034c4:	4919      	ldr	r1, [pc, #100]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80034ca:	e02a      	b.n	8003522 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80034cc:	4b17      	ldr	r3, [pc, #92]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 80034ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d2:	4a16      	ldr	r2, [pc, #88]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 80034de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80034ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	4619      	mov	r1, r3
 8003506:	480b      	ldr	r0, [pc, #44]	; (8003534 <HAL_RCC_MCOConfig+0xd0>)
 8003508:	f7fd fdf8 	bl	80010fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	01d9      	lsls	r1, r3, #7
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	430b      	orrs	r3, r1
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_MCOConfig+0xc8>)
 800351e:	4313      	orrs	r3, r2
 8003520:	610b      	str	r3, [r1, #16]
}
 8003522:	bf00      	nop
 8003524:	3730      	adds	r7, #48	; 0x30
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400
 8003530:	58020000 	.word	0x58020000
 8003534:	58020800 	.word	0x58020800

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800353e:	4bb3      	ldr	r3, [pc, #716]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003546:	2b18      	cmp	r3, #24
 8003548:	f200 8155 	bhi.w	80037f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <HAL_RCC_GetSysClockFreq+0x1c>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	080035b9 	.word	0x080035b9
 8003558:	080037f7 	.word	0x080037f7
 800355c:	080037f7 	.word	0x080037f7
 8003560:	080037f7 	.word	0x080037f7
 8003564:	080037f7 	.word	0x080037f7
 8003568:	080037f7 	.word	0x080037f7
 800356c:	080037f7 	.word	0x080037f7
 8003570:	080037f7 	.word	0x080037f7
 8003574:	080035df 	.word	0x080035df
 8003578:	080037f7 	.word	0x080037f7
 800357c:	080037f7 	.word	0x080037f7
 8003580:	080037f7 	.word	0x080037f7
 8003584:	080037f7 	.word	0x080037f7
 8003588:	080037f7 	.word	0x080037f7
 800358c:	080037f7 	.word	0x080037f7
 8003590:	080037f7 	.word	0x080037f7
 8003594:	080035e5 	.word	0x080035e5
 8003598:	080037f7 	.word	0x080037f7
 800359c:	080037f7 	.word	0x080037f7
 80035a0:	080037f7 	.word	0x080037f7
 80035a4:	080037f7 	.word	0x080037f7
 80035a8:	080037f7 	.word	0x080037f7
 80035ac:	080037f7 	.word	0x080037f7
 80035b0:	080037f7 	.word	0x080037f7
 80035b4:	080035eb 	.word	0x080035eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035b8:	4b94      	ldr	r3, [pc, #592]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035c4:	4b91      	ldr	r3, [pc, #580]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	4a90      	ldr	r2, [pc, #576]	; (8003810 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
 80035d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80035d6:	e111      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035d8:	4b8d      	ldr	r3, [pc, #564]	; (8003810 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035da:	61bb      	str	r3, [r7, #24]
    break;
 80035dc:	e10e      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80035de:	4b8d      	ldr	r3, [pc, #564]	; (8003814 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035e0:	61bb      	str	r3, [r7, #24]
    break;
 80035e2:	e10b      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80035e4:	4b8c      	ldr	r3, [pc, #560]	; (8003818 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80035e6:	61bb      	str	r3, [r7, #24]
    break;
 80035e8:	e108      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035ea:	4b88      	ldr	r3, [pc, #544]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80035f4:	4b85      	ldr	r3, [pc, #532]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003600:	4b82      	ldr	r3, [pc, #520]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800360a:	4b80      	ldr	r3, [pc, #512]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360e:	08db      	lsrs	r3, r3, #3
 8003610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003622:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80e1 	beq.w	80037f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b02      	cmp	r3, #2
 8003632:	f000 8083 	beq.w	800373c <HAL_RCC_GetSysClockFreq+0x204>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b02      	cmp	r3, #2
 800363a:	f200 80a1 	bhi.w	8003780 <HAL_RCC_GetSysClockFreq+0x248>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x114>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d056      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800364a:	e099      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800364c:	4b6f      	ldr	r3, [pc, #444]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d02d      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003658:	4b6c      	ldr	r3, [pc, #432]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	08db      	lsrs	r3, r3, #3
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	4a6b      	ldr	r2, [pc, #428]	; (8003810 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
 8003668:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	ee07 3a90 	vmov	s15, r3
 8003670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003682:	4b62      	ldr	r3, [pc, #392]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003692:	ed97 6a02 	vldr	s12, [r7, #8]
 8003696:	eddf 5a61 	vldr	s11, [pc, #388]	; 800381c <HAL_RCC_GetSysClockFreq+0x2e4>
 800369a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80036b2:	e087      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003820 <HAL_RCC_GetSysClockFreq+0x2e8>
 80036c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800381c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036f6:	e065      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003824 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370a:	4b40      	ldr	r3, [pc, #256]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371a:	ed97 6a02 	vldr	s12, [r7, #8]
 800371e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800381c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800373a:	e043      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003828 <HAL_RCC_GetSysClockFreq+0x2f0>
 800374a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374e:	4b2f      	ldr	r3, [pc, #188]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003762:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800381c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800377e:	e021      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003824 <HAL_RCC_GetSysClockFreq+0x2ec>
 800378e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800381c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	0a5b      	lsrs	r3, r3, #9
 80037ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ce:	3301      	adds	r3, #1
 80037d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80037e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037e8:	ee17 3a90 	vmov	r3, s15
 80037ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80037ee:	e005      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
    break;
 80037f4:	e002      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80037f6:	4b07      	ldr	r3, [pc, #28]	; (8003814 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80037f8:	61bb      	str	r3, [r7, #24]
    break;
 80037fa:	bf00      	nop
  }

  return sysclockfreq;
 80037fc:	69bb      	ldr	r3, [r7, #24]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	; 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	58024400 	.word	0x58024400
 8003810:	03d09000 	.word	0x03d09000
 8003814:	003d0900 	.word	0x003d0900
 8003818:	017d7840 	.word	0x017d7840
 800381c:	46000000 	.word	0x46000000
 8003820:	4c742400 	.word	0x4c742400
 8003824:	4a742400 	.word	0x4a742400
 8003828:	4bbebc20 	.word	0x4bbebc20

0800382c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003832:	f7ff fe81 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_RCC_GetHCLKFreq+0x50>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	490f      	ldr	r1, [pc, #60]	; (8003880 <HAL_RCC_GetHCLKFreq+0x54>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	fa22 f303 	lsr.w	r3, r2, r3
 800384e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_RCC_GetHCLKFreq+0x50>)
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <HAL_RCC_GetHCLKFreq+0x54>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	f003 031f 	and.w	r3, r3, #31
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	fa22 f303 	lsr.w	r3, r2, r3
 8003866:	4a07      	ldr	r2, [pc, #28]	; (8003884 <HAL_RCC_GetHCLKFreq+0x58>)
 8003868:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800386a:	4a07      	ldr	r2, [pc, #28]	; (8003888 <HAL_RCC_GetHCLKFreq+0x5c>)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <HAL_RCC_GetHCLKFreq+0x58>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	58024400 	.word	0x58024400
 8003880:	0800956c 	.word	0x0800956c
 8003884:	20000004 	.word	0x20000004
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003894:	2300      	movs	r3, #0
 8003896:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003898:	2300      	movs	r3, #0
 800389a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03f      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b0:	d02a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b6:	d824      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038bc:	d018      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c2:	d81e      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038cc:	d007      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038ce:	e018      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d0:	4bab      	ldr	r3, [pc, #684]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	4aaa      	ldr	r2, [pc, #680]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038dc:	e015      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3304      	adds	r3, #4
 80038e2:	2102      	movs	r1, #2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 ff11 	bl	800470c <RCCEx_PLL2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038ee:	e00c      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3324      	adds	r3, #36	; 0x24
 80038f4:	2102      	movs	r1, #2
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 ffba 	bl	8004870 <RCCEx_PLL3_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003900:	e003      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
      break;
 8003906:	e000      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003910:	4b9b      	ldr	r3, [pc, #620]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391c:	4998      	ldr	r1, [pc, #608]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	650b      	str	r3, [r1, #80]	; 0x50
 8003922:	e001      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03d      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	2b04      	cmp	r3, #4
 800393a:	d826      	bhi.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003959 	.word	0x08003959
 8003948:	08003967 	.word	0x08003967
 800394c:	08003979 	.word	0x08003979
 8003950:	08003991 	.word	0x08003991
 8003954:	08003991 	.word	0x08003991
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003958:	4b89      	ldr	r3, [pc, #548]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4a88      	ldr	r2, [pc, #544]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800395e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003962:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003964:	e015      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fecd 	bl	800470c <RCCEx_PLL2_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003976:	e00c      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3324      	adds	r3, #36	; 0x24
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f000 ff76 	bl	8004870 <RCCEx_PLL3_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003988:	e003      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
      break;
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003998:	4b79      	ldr	r3, [pc, #484]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	f023 0207 	bic.w	r2, r3, #7
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	4976      	ldr	r1, [pc, #472]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	650b      	str	r3, [r1, #80]	; 0x50
 80039aa:	e001      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d042      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c4:	d02b      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80039c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ca:	d825      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039cc:	2bc0      	cmp	r3, #192	; 0xc0
 80039ce:	d028      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039d0:	2bc0      	cmp	r3, #192	; 0xc0
 80039d2:	d821      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039d4:	2b80      	cmp	r3, #128	; 0x80
 80039d6:	d016      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d81d      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d007      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80039e4:	e018      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e6:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	4a65      	ldr	r2, [pc, #404]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039f2:	e017      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fe86 	bl	800470c <RCCEx_PLL2_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a04:	e00e      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3324      	adds	r3, #36	; 0x24
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 ff2f 	bl	8004870 <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a16:	e005      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a1c:	e002      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a2a:	4b55      	ldr	r3, [pc, #340]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	4952      	ldr	r1, [pc, #328]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	650b      	str	r3, [r1, #80]	; 0x50
 8003a3c:	e001      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d049      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a58:	d030      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5e:	d82a      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a64:	d02c      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a6a:	d824      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a70:	d018      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a76:	d81e      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a80:	d007      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003a82:	e018      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4a3d      	ldr	r2, [pc, #244]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a90:	e017      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2100      	movs	r1, #0
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fe37 	bl	800470c <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003aa2:	e00e      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3324      	adds	r3, #36	; 0x24
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 fee0 	bl	8004870 <RCCEx_PLL3_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ab4:	e005      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ac8:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003acc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ad6:	492a      	ldr	r1, [pc, #168]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	658b      	str	r3, [r1, #88]	; 0x58
 8003adc:	e001      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ade:	7dfb      	ldrb	r3, [r7, #23]
 8003ae0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04c      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003af8:	d030      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003afe:	d82a      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b04:	d02c      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003b06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b0a:	d824      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b10:	d018      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b16:	d81e      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b20:	d007      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003b22:	e018      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b30:	e017      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fde7 	bl	800470c <RCCEx_PLL2_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b42:	e00e      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3324      	adds	r3, #36	; 0x24
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fe90 	bl	8004870 <RCCEx_PLL3_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b54:	e005      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5a:	e002      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003b5c:	bf00      	nop
 8003b5e:	e000      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b76:	4902      	ldr	r1, [pc, #8]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	658b      	str	r3, [r1, #88]	; 0x58
 8003b7c:	e004      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003b7e:	bf00      	nop
 8003b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d032      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b98:	2b30      	cmp	r3, #48	; 0x30
 8003b9a:	d01c      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b9c:	2b30      	cmp	r3, #48	; 0x30
 8003b9e:	d817      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d00c      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d813      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d016      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d10f      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4baf      	ldr	r3, [pc, #700]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	4aae      	ldr	r2, [pc, #696]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003bbc:	e00e      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fda1 	bl	800470c <RCCEx_PLL2_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003bce:	e005      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd4:	e002      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d109      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003be2:	4ba3      	ldr	r3, [pc, #652]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bee:	49a0      	ldr	r1, [pc, #640]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bf4:	e001      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d047      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0e:	d030      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c14:	d82a      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c1a:	d02c      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c20:	d824      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c26:	d018      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2c:	d81e      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c36:	d007      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003c38:	e018      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3a:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	4a8c      	ldr	r2, [pc, #560]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c46:	e017      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fd5c 	bl	800470c <RCCEx_PLL2_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c58:	e00e      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3324      	adds	r3, #36	; 0x24
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fe05 	bl	8004870 <RCCEx_PLL3_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c6a:	e005      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c70:	e002      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c7e:	4b7c      	ldr	r3, [pc, #496]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c82:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	4979      	ldr	r1, [pc, #484]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	650b      	str	r3, [r1, #80]	; 0x50
 8003c90:	e001      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d049      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003caa:	d02e      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb0:	d828      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cb6:	d02a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cbc:	d822      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc2:	d026      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003cc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003cc8:	d81c      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cce:	d010      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003cd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cd4:	d816      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01d      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cde:	d111      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fd10 	bl	800470c <RCCEx_PLL2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003cf0:	e012      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3324      	adds	r3, #36	; 0x24
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fdb9 	bl	8004870 <RCCEx_PLL3_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d02:	e009      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75fb      	strb	r3, [r7, #23]
      break;
 8003d08:	e006      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e004      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d1e:	4b54      	ldr	r3, [pc, #336]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	4951      	ldr	r1, [pc, #324]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	650b      	str	r3, [r1, #80]	; 0x50
 8003d30:	e001      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d04b      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d4c:	d02e      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d52:	d828      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d58:	d02a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5e:	d822      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d64:	d026      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003d66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d6a:	d81c      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d70:	d010      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d76:	d816      	bhi.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01d      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d80:	d111      	bne.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3304      	adds	r3, #4
 8003d86:	2101      	movs	r1, #1
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fcbf 	bl	800470c <RCCEx_PLL2_Config>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d92:	e012      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3324      	adds	r3, #36	; 0x24
 8003d98:	2101      	movs	r1, #1
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fd68 	bl	8004870 <RCCEx_PLL3_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003da4:	e009      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	75fb      	strb	r3, [r7, #23]
      break;
 8003daa:	e006      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003dac:	bf00      	nop
 8003dae:	e004      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dce:	4928      	ldr	r1, [pc, #160]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	658b      	str	r3, [r1, #88]	; 0x58
 8003dd4:	e001      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02f      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dee:	d00e      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df4:	d814      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d015      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dfe:	d10f      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a1a      	ldr	r2, [pc, #104]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e0c:	e00c      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	2101      	movs	r1, #1
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fc79 	bl	800470c <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e1e:	e003      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
      break;
 8003e24:	e000      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e28:	7dfb      	ldrb	r3, [r7, #23]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	490d      	ldr	r1, [pc, #52]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	650b      	str	r3, [r1, #80]	; 0x50
 8003e40:	e001      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	7dfb      	ldrb	r3, [r7, #23]
 8003e44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d033      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d81c      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003e9b 	.word	0x08003e9b
 8003e64:	08003e75 	.word	0x08003e75
 8003e68:	08003e83 	.word	0x08003e83
 8003e6c:	08003e9b 	.word	0x08003e9b
 8003e70:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e74:	4bb8      	ldr	r3, [pc, #736]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	4ab7      	ldr	r2, [pc, #732]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e80:	e00c      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3304      	adds	r3, #4
 8003e86:	2102      	movs	r1, #2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fc3f 	bl	800470c <RCCEx_PLL2_Config>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003e92:	e003      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	75fb      	strb	r3, [r7, #23]
      break;
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ea2:	4bad      	ldr	r3, [pc, #692]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea6:	f023 0203 	bic.w	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	49aa      	ldr	r1, [pc, #680]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003eb4:	e001      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	7dfb      	ldrb	r3, [r7, #23]
 8003eb8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 8086 	beq.w	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec8:	4ba4      	ldr	r3, [pc, #656]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4aa3      	ldr	r2, [pc, #652]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ed4:	f7fc ffc6 	bl	8000e64 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eda:	e009      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003edc:	f7fc ffc2 	bl	8000e64 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d902      	bls.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	75fb      	strb	r3, [r7, #23]
        break;
 8003eee:	e005      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ef0:	4b9a      	ldr	r3, [pc, #616]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ef      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d166      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f02:	4b95      	ldr	r3, [pc, #596]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f0c:	4053      	eors	r3, r2
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d013      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f16:	4b90      	ldr	r3, [pc, #576]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f20:	4b8d      	ldr	r3, [pc, #564]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	4a8c      	ldr	r2, [pc, #560]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2c:	4b8a      	ldr	r3, [pc, #552]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a89      	ldr	r2, [pc, #548]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f38:	4a87      	ldr	r2, [pc, #540]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f48:	d115      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fc ff8b 	bl	8000e64 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f50:	e00b      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fc ff87 	bl	8000e64 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d902      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	75fb      	strb	r3, [r7, #23]
            break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6a:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ed      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003f76:	7dfb      	ldrb	r3, [r7, #23]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d126      	bne.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003f8c:	4b72      	ldr	r3, [pc, #456]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f9a:	0919      	lsrs	r1, r3, #4
 8003f9c:	4b70      	ldr	r3, [pc, #448]	; (8004160 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	496d      	ldr	r1, [pc, #436]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]
 8003fa6:	e005      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003fa8:	4b6b      	ldr	r3, [pc, #428]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	4a6a      	ldr	r2, [pc, #424]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003fb2:	6113      	str	r3, [r2, #16]
 8003fb4:	4b68      	ldr	r3, [pc, #416]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc2:	4965      	ldr	r1, [pc, #404]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	670b      	str	r3, [r1, #112]	; 0x70
 8003fc8:	e004      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	75bb      	strb	r3, [r7, #22]
 8003fce:	e001      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d07e      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe4:	2b28      	cmp	r3, #40	; 0x28
 8003fe6:	d867      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	080040bf 	.word	0x080040bf
 8003ff4:	080040b9 	.word	0x080040b9
 8003ff8:	080040b9 	.word	0x080040b9
 8003ffc:	080040b9 	.word	0x080040b9
 8004000:	080040b9 	.word	0x080040b9
 8004004:	080040b9 	.word	0x080040b9
 8004008:	080040b9 	.word	0x080040b9
 800400c:	080040b9 	.word	0x080040b9
 8004010:	08004095 	.word	0x08004095
 8004014:	080040b9 	.word	0x080040b9
 8004018:	080040b9 	.word	0x080040b9
 800401c:	080040b9 	.word	0x080040b9
 8004020:	080040b9 	.word	0x080040b9
 8004024:	080040b9 	.word	0x080040b9
 8004028:	080040b9 	.word	0x080040b9
 800402c:	080040b9 	.word	0x080040b9
 8004030:	080040a7 	.word	0x080040a7
 8004034:	080040b9 	.word	0x080040b9
 8004038:	080040b9 	.word	0x080040b9
 800403c:	080040b9 	.word	0x080040b9
 8004040:	080040b9 	.word	0x080040b9
 8004044:	080040b9 	.word	0x080040b9
 8004048:	080040b9 	.word	0x080040b9
 800404c:	080040b9 	.word	0x080040b9
 8004050:	080040bf 	.word	0x080040bf
 8004054:	080040b9 	.word	0x080040b9
 8004058:	080040b9 	.word	0x080040b9
 800405c:	080040b9 	.word	0x080040b9
 8004060:	080040b9 	.word	0x080040b9
 8004064:	080040b9 	.word	0x080040b9
 8004068:	080040b9 	.word	0x080040b9
 800406c:	080040b9 	.word	0x080040b9
 8004070:	080040bf 	.word	0x080040bf
 8004074:	080040b9 	.word	0x080040b9
 8004078:	080040b9 	.word	0x080040b9
 800407c:	080040b9 	.word	0x080040b9
 8004080:	080040b9 	.word	0x080040b9
 8004084:	080040b9 	.word	0x080040b9
 8004088:	080040b9 	.word	0x080040b9
 800408c:	080040b9 	.word	0x080040b9
 8004090:	080040bf 	.word	0x080040bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fb36 	bl	800470c <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040a4:	e00c      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3324      	adds	r3, #36	; 0x24
 80040aa:	2101      	movs	r1, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fbdf 	bl	8004870 <RCCEx_PLL3_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040b6:	e003      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
      break;
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80040be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	4921      	ldr	r1, [pc, #132]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	654b      	str	r3, [r1, #84]	; 0x54
 80040d8:	e001      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040da:	7dfb      	ldrb	r3, [r7, #23]
 80040dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d03e      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d820      	bhi.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	0800413b 	.word	0x0800413b
 80040fc:	08004111 	.word	0x08004111
 8004100:	08004123 	.word	0x08004123
 8004104:	0800413b 	.word	0x0800413b
 8004108:	0800413b 	.word	0x0800413b
 800410c:	0800413b 	.word	0x0800413b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 faf8 	bl	800470c <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004120:	e00c      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2101      	movs	r1, #1
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fba1 	bl	8004870 <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004132:	e003      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
      break;
 8004138:	e000      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800413a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d110      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f023 0207 	bic.w	r2, r3, #7
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414e:	4902      	ldr	r1, [pc, #8]	; (8004158 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	654b      	str	r3, [r1, #84]	; 0x54
 8004154:	e008      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004156:	bf00      	nop
 8004158:	58024400 	.word	0x58024400
 800415c:	58024800 	.word	0x58024800
 8004160:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d039      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417a:	2b05      	cmp	r3, #5
 800417c:	d820      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	080041c7 	.word	0x080041c7
 8004188:	0800419d 	.word	0x0800419d
 800418c:	080041af 	.word	0x080041af
 8004190:	080041c7 	.word	0x080041c7
 8004194:	080041c7 	.word	0x080041c7
 8004198:	080041c7 	.word	0x080041c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fab2 	bl	800470c <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041ac:	e00c      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3324      	adds	r3, #36	; 0x24
 80041b2:	2101      	movs	r1, #1
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fb5b 	bl	8004870 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041be:	e003      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
      break;
 80041c4:	e000      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80041c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ce:	4bb7      	ldr	r3, [pc, #732]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	f023 0207 	bic.w	r2, r3, #7
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	49b3      	ldr	r1, [pc, #716]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	658b      	str	r3, [r1, #88]	; 0x58
 80041e2:	e001      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
 80041e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d04b      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041fe:	d02e      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004204:	d828      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d02a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004210:	d822      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004216:	d026      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004218:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800421c:	d81c      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004222:	d010      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004228:	d816      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01d      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800422e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004232:	d111      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fa66 	bl	800470c <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004244:	e012      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3324      	adds	r3, #36	; 0x24
 800424a:	2102      	movs	r1, #2
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fb0f 	bl	8004870 <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004256:	e009      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	e006      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800425e:	bf00      	nop
 8004260:	e004      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004262:	bf00      	nop
 8004264:	e002      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800426a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004272:	4b8e      	ldr	r3, [pc, #568]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004280:	498a      	ldr	r1, [pc, #552]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004282:	4313      	orrs	r3, r2
 8004284:	654b      	str	r3, [r1, #84]	; 0x54
 8004286:	e001      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d04b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042a2:	d02e      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80042a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042a8:	d828      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d02a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d822      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ba:	d026      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80042bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c0:	d81c      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c6:	d010      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042cc:	d816      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01d      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d6:	d111      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fa14 	bl	800470c <RCCEx_PLL2_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042e8:	e012      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3324      	adds	r3, #36	; 0x24
 80042ee:	2102      	movs	r1, #2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fabd 	bl	8004870 <RCCEx_PLL3_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80042fa:	e009      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004300:	e006      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004302:	bf00      	nop
 8004304:	e004      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004306:	bf00      	nop
 8004308:	e002      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800430a:	bf00      	nop
 800430c:	e000      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800430e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004324:	4961      	ldr	r1, [pc, #388]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004326:	4313      	orrs	r3, r2
 8004328:	658b      	str	r3, [r1, #88]	; 0x58
 800432a:	e001      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d04b      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004342:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004346:	d02e      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004348:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800434c:	d828      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800434e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004352:	d02a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004358:	d822      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800435a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800435e:	d026      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004360:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004364:	d81c      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004366:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800436a:	d010      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800436c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004370:	d816      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01d      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437a:	d111      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f9c2 	bl	800470c <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800438c:	e012      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3324      	adds	r3, #36	; 0x24
 8004392:	2102      	movs	r1, #2
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fa6b 	bl	8004870 <RCCEx_PLL3_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800439e:	e009      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	75fb      	strb	r3, [r7, #23]
      break;
 80043a4:	e006      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043a6:	bf00      	nop
 80043a8:	e004      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043aa:	bf00      	nop
 80043ac:	e002      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043ba:	4b3c      	ldr	r3, [pc, #240]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c8:	4938      	ldr	r1, [pc, #224]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	658b      	str	r3, [r1, #88]	; 0x58
 80043ce:	e001      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	d10a      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3324      	adds	r3, #36	; 0x24
 80043f0:	2102      	movs	r1, #2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fa3c 	bl	8004870 <RCCEx_PLL3_Config>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004402:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004410:	4926      	ldr	r1, [pc, #152]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004412:	4313      	orrs	r3, r2
 8004414:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442c:	d10a      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3324      	adds	r3, #36	; 0x24
 8004432:	2102      	movs	r1, #2
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fa1b 	bl	8004870 <RCCEx_PLL3_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004452:	4916      	ldr	r1, [pc, #88]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004454:	4313      	orrs	r3, r2
 8004456:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d036      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800446a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800446e:	d01f      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004470:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004474:	d817      	bhi.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447e:	d009      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004480:	e011      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f000 f93f 	bl	800470c <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004492:	e00e      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	2102      	movs	r1, #2
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f9e8 	bl	8004870 <RCCEx_PLL3_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044a4:	e005      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80044ac:	58024400 	.word	0x58024400
      break;
 80044b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044b8:	4b93      	ldr	r3, [pc, #588]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044c6:	4990      	ldr	r1, [pc, #576]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	658b      	str	r3, [r1, #88]	; 0x58
 80044cc:	e001      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
 80044d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d033      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044e8:	d01c      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80044ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ee:	d816      	bhi.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80044f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f4:	d003      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80044f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044fa:	d007      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80044fc:	e00f      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fe:	4b82      	ldr	r3, [pc, #520]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	4a81      	ldr	r2, [pc, #516]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800450a:	e00c      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3324      	adds	r3, #36	; 0x24
 8004510:	2101      	movs	r1, #1
 8004512:	4618      	mov	r0, r3
 8004514:	f000 f9ac 	bl	8004870 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800451c:	e003      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
      break;
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800452c:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800452e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004530:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453a:	4973      	ldr	r1, [pc, #460]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	654b      	str	r3, [r1, #84]	; 0x54
 8004540:	e001      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d029      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800455a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455e:	d007      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004560:	e00f      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004562:	4b69      	ldr	r3, [pc, #420]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	4a68      	ldr	r2, [pc, #416]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800456c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800456e:	e00b      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3304      	adds	r3, #4
 8004574:	2102      	movs	r1, #2
 8004576:	4618      	mov	r0, r3
 8004578:	f000 f8c8 	bl	800470c <RCCEx_PLL2_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004580:	e002      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
      break;
 8004586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800458e:	4b5e      	ldr	r3, [pc, #376]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	495b      	ldr	r1, [pc, #364]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800459c:	4313      	orrs	r3, r2
 800459e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045a0:	e001      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3324      	adds	r3, #36	; 0x24
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 f959 	bl	8004870 <RCCEx_PLL3_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d030      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045dc:	d017      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80045de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e2:	d811      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e8:	d013      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80045ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ee:	d80b      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d010      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80045f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f8:	d106      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045fa:	4b43      	ldr	r3, [pc, #268]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	4a42      	ldr	r2, [pc, #264]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004604:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004606:	e007      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	e004      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800460e:	bf00      	nop
 8004610:	e002      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800461e:	4b3a      	ldr	r3, [pc, #232]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004622:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462a:	4937      	ldr	r1, [pc, #220]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800462c:	4313      	orrs	r3, r2
 800462e:	654b      	str	r3, [r1, #84]	; 0x54
 8004630:	e001      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004642:	4b31      	ldr	r3, [pc, #196]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	492e      	ldr	r1, [pc, #184]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004650:	4313      	orrs	r3, r2
 8004652:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d009      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004660:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800466e:	4926      	ldr	r1, [pc, #152]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004684:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468c:	491e      	ldr	r1, [pc, #120]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800468e:	4313      	orrs	r3, r2
 8004690:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	4a19      	ldr	r2, [pc, #100]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046a8:	6113      	str	r3, [r2, #16]
 80046aa:	4b17      	ldr	r3, [pc, #92]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046b4:	4914      	ldr	r1, [pc, #80]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	da08      	bge.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ce:	490e      	ldr	r1, [pc, #56]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	4906      	ldr	r1, [pc, #24]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80046f4:	7dbb      	ldrb	r3, [r7, #22]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	58024400 	.word	0x58024400

0800470c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800471a:	4b53      	ldr	r3, [pc, #332]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b03      	cmp	r3, #3
 8004724:	d101      	bne.n	800472a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e099      	b.n	800485e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800472a:	4b4f      	ldr	r3, [pc, #316]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a4e      	ldr	r2, [pc, #312]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004730:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004736:	f7fc fb95 	bl	8000e64 <HAL_GetTick>
 800473a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800473c:	e008      	b.n	8004750 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800473e:	f7fc fb91 	bl	8000e64 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e086      	b.n	800485e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004750:	4b45      	ldr	r3, [pc, #276]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f0      	bne.n	800473e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800475c:	4b42      	ldr	r3, [pc, #264]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	031b      	lsls	r3, r3, #12
 800476a:	493f      	ldr	r1, [pc, #252]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 800476c:	4313      	orrs	r3, r2
 800476e:	628b      	str	r3, [r1, #40]	; 0x28
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	3b01      	subs	r3, #1
 8004776:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	3b01      	subs	r3, #1
 8004780:	025b      	lsls	r3, r3, #9
 8004782:	b29b      	uxth	r3, r3
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	3b01      	subs	r3, #1
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	3b01      	subs	r3, #1
 800479a:	061b      	lsls	r3, r3, #24
 800479c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047a0:	4931      	ldr	r1, [pc, #196]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047a6:	4b30      	ldr	r3, [pc, #192]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	492d      	ldr	r1, [pc, #180]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047b8:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	f023 0220 	bic.w	r2, r3, #32
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	4928      	ldr	r1, [pc, #160]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047ca:	4b27      	ldr	r3, [pc, #156]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	4a26      	ldr	r2, [pc, #152]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047d0:	f023 0310 	bic.w	r3, r3, #16
 80047d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047d6:	4b24      	ldr	r3, [pc, #144]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <RCCEx_PLL2_Config+0x160>)
 80047dc:	4013      	ands	r3, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	69d2      	ldr	r2, [r2, #28]
 80047e2:	00d2      	lsls	r2, r2, #3
 80047e4:	4920      	ldr	r1, [pc, #128]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047ea:	4b1f      	ldr	r3, [pc, #124]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047f0:	f043 0310 	orr.w	r3, r3, #16
 80047f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047fc:	4b1a      	ldr	r3, [pc, #104]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	4a19      	ldr	r2, [pc, #100]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004806:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004808:	e00f      	b.n	800482a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d106      	bne.n	800481e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004810:	4b15      	ldr	r3, [pc, #84]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4a14      	ldr	r2, [pc, #80]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800481c:	e005      	b.n	800482a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	4a11      	ldr	r2, [pc, #68]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004828:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800482a:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a0e      	ldr	r2, [pc, #56]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004830:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004836:	f7fc fb15 	bl	8000e64 <HAL_GetTick>
 800483a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800483c:	e008      	b.n	8004850 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800483e:	f7fc fb11 	bl	8000e64 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e006      	b.n	800485e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <RCCEx_PLL2_Config+0x15c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	58024400 	.word	0x58024400
 800486c:	ffff0007 	.word	0xffff0007

08004870 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800487e:	4b53      	ldr	r3, [pc, #332]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b03      	cmp	r3, #3
 8004888:	d101      	bne.n	800488e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e099      	b.n	80049c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800488e:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a4e      	ldr	r2, [pc, #312]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489a:	f7fc fae3 	bl	8000e64 <HAL_GetTick>
 800489e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048a2:	f7fc fadf 	bl	8000e64 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e086      	b.n	80049c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048b4:	4b45      	ldr	r3, [pc, #276]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f0      	bne.n	80048a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048c0:	4b42      	ldr	r3, [pc, #264]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	051b      	lsls	r3, r3, #20
 80048ce:	493f      	ldr	r1, [pc, #252]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	628b      	str	r3, [r1, #40]	; 0x28
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	3b01      	subs	r3, #1
 80048da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	025b      	lsls	r3, r3, #9
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	041b      	lsls	r3, r3, #16
 80048f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	061b      	lsls	r3, r3, #24
 8004900:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004904:	4931      	ldr	r1, [pc, #196]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800490a:	4b30      	ldr	r3, [pc, #192]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 800490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	492d      	ldr	r1, [pc, #180]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004918:	4313      	orrs	r3, r2
 800491a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4928      	ldr	r1, [pc, #160]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 800492a:	4313      	orrs	r3, r2
 800492c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800492e:	4b27      	ldr	r3, [pc, #156]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004932:	4a26      	ldr	r2, [pc, #152]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800493a:	4b24      	ldr	r3, [pc, #144]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 800493c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <RCCEx_PLL3_Config+0x160>)
 8004940:	4013      	ands	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	69d2      	ldr	r2, [r2, #28]
 8004946:	00d2      	lsls	r2, r2, #3
 8004948:	4920      	ldr	r1, [pc, #128]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 800494a:	4313      	orrs	r3, r2
 800494c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800494e:	4b1f      	ldr	r3, [pc, #124]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4a1e      	ldr	r2, [pc, #120]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004966:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800496a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800496c:	e00f      	b.n	800498e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d106      	bne.n	8004982 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4a14      	ldr	r2, [pc, #80]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 800497a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004980:	e005      	b.n	800498e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	4a11      	ldr	r2, [pc, #68]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800498c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800498e:	4b0f      	ldr	r3, [pc, #60]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 8004994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004998:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499a:	f7fc fa63 	bl	8000e64 <HAL_GetTick>
 800499e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049a0:	e008      	b.n	80049b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049a2:	f7fc fa5f 	bl	8000e64 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e006      	b.n	80049c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049b4:	4b05      	ldr	r3, [pc, #20]	; (80049cc <RCCEx_PLL3_Config+0x15c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	58024400 	.word	0x58024400
 80049d0:	ffff0007 	.word	0xffff0007

080049d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e049      	b.n	8004a7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc f846 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f000 fb52 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e049      	b.n	8004b28 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f841 	bl	8004b30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f000 fafb 	bl	80050bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d122      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d11b      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0202 	mvn.w	r2, #2
 8004b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fa7a 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa6c 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fa7d 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d122      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d11b      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0204 	mvn.w	r2, #4
 8004bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa50 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa42 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fa53 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b08      	cmp	r3, #8
 8004c00:	d122      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d11b      	bne.n	8004c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0208 	mvn.w	r2, #8
 8004c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa26 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fa18 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa29 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d122      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d11b      	bne.n	8004c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0210 	mvn.w	r2, #16
 8004c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2208      	movs	r2, #8
 8004c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f9fc 	bl	8005080 <HAL_TIM_IC_CaptureCallback>
 8004c88:	e005      	b.n	8004c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f9ee 	bl	800506c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f9ff 	bl	8005094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d107      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0201 	mvn.w	r2, #1
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9c8 	bl	8005058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b80      	cmp	r3, #128	; 0x80
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce0:	2b80      	cmp	r3, #128	; 0x80
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fe7c 	bl	80059ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d02:	d10e      	bne.n	8004d22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d107      	bne.n	8004d22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fe6f 	bl	8005a00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d10e      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d107      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f9ad 	bl	80050a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d10e      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b20      	cmp	r3, #32
 8004d68:	d107      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f06f 0220 	mvn.w	r2, #32
 8004d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fe2f 	bl	80059d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_TIM_OC_ConfigChannel+0x1a>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e064      	b.n	8004e68 <HAL_TIM_OC_ConfigChannel+0xe4>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b14      	cmp	r3, #20
 8004daa:	d857      	bhi.n	8004e5c <HAL_TIM_OC_ConfigChannel+0xd8>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004e5d 	.word	0x08004e5d
 8004dbc:	08004e5d 	.word	0x08004e5d
 8004dc0:	08004e5d 	.word	0x08004e5d
 8004dc4:	08004e17 	.word	0x08004e17
 8004dc8:	08004e5d 	.word	0x08004e5d
 8004dcc:	08004e5d 	.word	0x08004e5d
 8004dd0:	08004e5d 	.word	0x08004e5d
 8004dd4:	08004e25 	.word	0x08004e25
 8004dd8:	08004e5d 	.word	0x08004e5d
 8004ddc:	08004e5d 	.word	0x08004e5d
 8004de0:	08004e5d 	.word	0x08004e5d
 8004de4:	08004e33 	.word	0x08004e33
 8004de8:	08004e5d 	.word	0x08004e5d
 8004dec:	08004e5d 	.word	0x08004e5d
 8004df0:	08004e5d 	.word	0x08004e5d
 8004df4:	08004e41 	.word	0x08004e41
 8004df8:	08004e5d 	.word	0x08004e5d
 8004dfc:	08004e5d 	.word	0x08004e5d
 8004e00:	08004e5d 	.word	0x08004e5d
 8004e04:	08004e4f 	.word	0x08004e4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f9ee 	bl	80051f0 <TIM_OC1_SetConfig>
      break;
 8004e14:	e023      	b.n	8004e5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fa77 	bl	8005310 <TIM_OC2_SetConfig>
      break;
 8004e22:	e01c      	b.n	8004e5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fafa 	bl	8005424 <TIM_OC3_SetConfig>
      break;
 8004e30:	e015      	b.n	8004e5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 fb79 	bl	8005530 <TIM_OC4_SetConfig>
      break;
 8004e3e:	e00e      	b.n	8004e5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fbda 	bl	8005600 <TIM_OC5_SetConfig>
      break;
 8004e4c:	e007      	b.n	8004e5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 fc35 	bl	80056c4 <TIM_OC6_SetConfig>
      break;
 8004e5a:	e000      	b.n	8004e5e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIM_ConfigClockSource+0x18>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e0db      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x1d0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4b69      	ldr	r3, [pc, #420]	; (8005048 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a63      	ldr	r2, [pc, #396]	; (800504c <HAL_TIM_ConfigClockSource+0x1dc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	f000 80a9 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
 8004ec4:	4a61      	ldr	r2, [pc, #388]	; (800504c <HAL_TIM_ConfigClockSource+0x1dc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	f200 80ae 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004ecc:	4a60      	ldr	r2, [pc, #384]	; (8005050 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	f000 80a1 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
 8004ed4:	4a5e      	ldr	r2, [pc, #376]	; (8005050 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	f200 80a6 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004edc:	4a5d      	ldr	r2, [pc, #372]	; (8005054 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	f000 8099 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
 8004ee4:	4a5b      	ldr	r2, [pc, #364]	; (8005054 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	f200 809e 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004eec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ef0:	f000 8091 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
 8004ef4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ef8:	f200 8096 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f00:	f000 8089 	beq.w	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f08:	f200 808e 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f10:	d03e      	beq.n	8004f90 <HAL_TIM_ConfigClockSource+0x120>
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f16:	f200 8087 	bhi.w	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	f000 8085 	beq.w	800502c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d87f      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f28:	2b70      	cmp	r3, #112	; 0x70
 8004f2a:	d01a      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0xf2>
 8004f2c:	2b70      	cmp	r3, #112	; 0x70
 8004f2e:	d87b      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f30:	2b60      	cmp	r3, #96	; 0x60
 8004f32:	d050      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x166>
 8004f34:	2b60      	cmp	r3, #96	; 0x60
 8004f36:	d877      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f38:	2b50      	cmp	r3, #80	; 0x50
 8004f3a:	d03c      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x146>
 8004f3c:	2b50      	cmp	r3, #80	; 0x50
 8004f3e:	d873      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d058      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0x186>
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d86f      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f48:	2b30      	cmp	r3, #48	; 0x30
 8004f4a:	d064      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f4c:	2b30      	cmp	r3, #48	; 0x30
 8004f4e:	d86b      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d060      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d867      	bhi.n	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d05c      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d05a      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f60:	e062      	b.n	8005028 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6899      	ldr	r1, [r3, #8]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f000 fc89 	bl	8005888 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	609a      	str	r2, [r3, #8]
      break;
 8004f8e:	e04e      	b.n	800502e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6899      	ldr	r1, [r3, #8]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f000 fc72 	bl	8005888 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb2:	609a      	str	r2, [r3, #8]
      break;
 8004fb4:	e03b      	b.n	800502e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f000 fbe2 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2150      	movs	r1, #80	; 0x50
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fc3c 	bl	800584c <TIM_ITRx_SetConfig>
      break;
 8004fd4:	e02b      	b.n	800502e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6859      	ldr	r1, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f000 fc01 	bl	80057ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2160      	movs	r1, #96	; 0x60
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fc2c 	bl	800584c <TIM_ITRx_SetConfig>
      break;
 8004ff4:	e01b      	b.n	800502e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	461a      	mov	r2, r3
 8005004:	f000 fbc2 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2140      	movs	r1, #64	; 0x40
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fc1c 	bl	800584c <TIM_ITRx_SetConfig>
      break;
 8005014:	e00b      	b.n	800502e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f000 fc13 	bl	800584c <TIM_ITRx_SetConfig>
        break;
 8005026:	e002      	b.n	800502e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8005028:	bf00      	nop
 800502a:	e000      	b.n	800502e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800502c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	ffceff88 	.word	0xffceff88
 800504c:	00100040 	.word	0x00100040
 8005050:	00100030 	.word	0x00100030
 8005054:	00100020 	.word	0x00100020

08005058 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a40      	ldr	r2, [pc, #256]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050da:	d00f      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a3d      	ldr	r2, [pc, #244]	; (80051d4 <TIM_Base_SetConfig+0x118>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a3c      	ldr	r2, [pc, #240]	; (80051d8 <TIM_Base_SetConfig+0x11c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a3b      	ldr	r2, [pc, #236]	; (80051dc <TIM_Base_SetConfig+0x120>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01f      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d01b      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <TIM_Base_SetConfig+0x118>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d017      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2b      	ldr	r2, [pc, #172]	; (80051d8 <TIM_Base_SetConfig+0x11c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a2a      	ldr	r2, [pc, #168]	; (80051dc <TIM_Base_SetConfig+0x120>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00f      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a29      	ldr	r2, [pc, #164]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00b      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a28      	ldr	r2, [pc, #160]	; (80051e4 <TIM_Base_SetConfig+0x128>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a27      	ldr	r2, [pc, #156]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d003      	beq.n	8005156 <TIM_Base_SetConfig+0x9a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a26      	ldr	r2, [pc, #152]	; (80051ec <TIM_Base_SetConfig+0x130>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d108      	bne.n	8005168 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800515c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <TIM_Base_SetConfig+0x114>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <TIM_Base_SetConfig+0x124>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <TIM_Base_SetConfig+0x128>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a10      	ldr	r2, [pc, #64]	; (80051e8 <TIM_Base_SetConfig+0x12c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_Base_SetConfig+0xf8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <TIM_Base_SetConfig+0x130>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d103      	bne.n	80051bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	615a      	str	r2, [r3, #20]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40010400 	.word	0x40010400
 80051e4:	40014000 	.word	0x40014000
 80051e8:	40014400 	.word	0x40014400
 80051ec:	40014800 	.word	0x40014800

080051f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	f023 0201 	bic.w	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4b37      	ldr	r3, [pc, #220]	; (80052f8 <TIM_OC1_SetConfig+0x108>)
 800521c:	4013      	ands	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0303 	bic.w	r3, r3, #3
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f023 0302 	bic.w	r3, r3, #2
 8005238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a2d      	ldr	r2, [pc, #180]	; (80052fc <TIM_OC1_SetConfig+0x10c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00f      	beq.n	800526c <TIM_OC1_SetConfig+0x7c>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a2c      	ldr	r2, [pc, #176]	; (8005300 <TIM_OC1_SetConfig+0x110>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00b      	beq.n	800526c <TIM_OC1_SetConfig+0x7c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a2b      	ldr	r2, [pc, #172]	; (8005304 <TIM_OC1_SetConfig+0x114>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_OC1_SetConfig+0x7c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <TIM_OC1_SetConfig+0x118>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_OC1_SetConfig+0x7c>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a29      	ldr	r2, [pc, #164]	; (800530c <TIM_OC1_SetConfig+0x11c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10c      	bne.n	8005286 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f023 0308 	bic.w	r3, r3, #8
 8005272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1c      	ldr	r2, [pc, #112]	; (80052fc <TIM_OC1_SetConfig+0x10c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00f      	beq.n	80052ae <TIM_OC1_SetConfig+0xbe>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <TIM_OC1_SetConfig+0x110>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00b      	beq.n	80052ae <TIM_OC1_SetConfig+0xbe>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <TIM_OC1_SetConfig+0x114>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_OC1_SetConfig+0xbe>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a19      	ldr	r2, [pc, #100]	; (8005308 <TIM_OC1_SetConfig+0x118>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC1_SetConfig+0xbe>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a18      	ldr	r2, [pc, #96]	; (800530c <TIM_OC1_SetConfig+0x11c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d111      	bne.n	80052d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	621a      	str	r2, [r3, #32]
}
 80052ec:	bf00      	nop
 80052ee:	371c      	adds	r7, #28
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	fffeff8f 	.word	0xfffeff8f
 80052fc:	40010000 	.word	0x40010000
 8005300:	40010400 	.word	0x40010400
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800

08005310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f023 0210 	bic.w	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4b34      	ldr	r3, [pc, #208]	; (800540c <TIM_OC2_SetConfig+0xfc>)
 800533c:	4013      	ands	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	021b      	lsls	r3, r3, #8
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0320 	bic.w	r3, r3, #32
 800535a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a29      	ldr	r2, [pc, #164]	; (8005410 <TIM_OC2_SetConfig+0x100>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_OC2_SetConfig+0x68>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a28      	ldr	r2, [pc, #160]	; (8005414 <TIM_OC2_SetConfig+0x104>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10d      	bne.n	8005394 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800537e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <TIM_OC2_SetConfig+0x100>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <TIM_OC2_SetConfig+0xac>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <TIM_OC2_SetConfig+0x104>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_OC2_SetConfig+0xac>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <TIM_OC2_SetConfig+0x108>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_OC2_SetConfig+0xac>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a1b      	ldr	r2, [pc, #108]	; (800541c <TIM_OC2_SetConfig+0x10c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_OC2_SetConfig+0xac>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <TIM_OC2_SetConfig+0x110>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d113      	bne.n	80053e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	feff8fff 	.word	0xfeff8fff
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800

08005424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800546c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	021b      	lsls	r3, r3, #8
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a27      	ldr	r2, [pc, #156]	; (800551c <TIM_OC3_SetConfig+0xf8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC3_SetConfig+0x66>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a26      	ldr	r2, [pc, #152]	; (8005520 <TIM_OC3_SetConfig+0xfc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d10d      	bne.n	80054a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005490:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1c      	ldr	r2, [pc, #112]	; (800551c <TIM_OC3_SetConfig+0xf8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_OC3_SetConfig+0xaa>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <TIM_OC3_SetConfig+0xfc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_OC3_SetConfig+0xaa>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <TIM_OC3_SetConfig+0x100>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_OC3_SetConfig+0xaa>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a19      	ldr	r2, [pc, #100]	; (8005528 <TIM_OC3_SetConfig+0x104>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_OC3_SetConfig+0xaa>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a18      	ldr	r2, [pc, #96]	; (800552c <TIM_OC3_SetConfig+0x108>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d113      	bne.n	80054f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	621a      	str	r2, [r3, #32]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	40010000 	.word	0x40010000
 8005520:	40010400 	.word	0x40010400
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800

08005530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	021b      	lsls	r3, r3, #8
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800557a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	031b      	lsls	r3, r3, #12
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a18      	ldr	r2, [pc, #96]	; (80055ec <TIM_OC4_SetConfig+0xbc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00f      	beq.n	80055b0 <TIM_OC4_SetConfig+0x80>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <TIM_OC4_SetConfig+0xc0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d00b      	beq.n	80055b0 <TIM_OC4_SetConfig+0x80>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <TIM_OC4_SetConfig+0xc4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d007      	beq.n	80055b0 <TIM_OC4_SetConfig+0x80>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <TIM_OC4_SetConfig+0xc8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d003      	beq.n	80055b0 <TIM_OC4_SetConfig+0x80>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a14      	ldr	r2, [pc, #80]	; (80055fc <TIM_OC4_SetConfig+0xcc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d109      	bne.n	80055c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	019b      	lsls	r3, r3, #6
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000
 80055f0:	40010400 	.word	0x40010400
 80055f4:	40014000 	.word	0x40014000
 80055f8:	40014400 	.word	0x40014400
 80055fc:	40014800 	.word	0x40014800

08005600 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005640:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	041b      	lsls	r3, r3, #16
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <TIM_OC5_SetConfig+0xb0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00f      	beq.n	8005676 <TIM_OC5_SetConfig+0x76>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <TIM_OC5_SetConfig+0xb4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00b      	beq.n	8005676 <TIM_OC5_SetConfig+0x76>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <TIM_OC5_SetConfig+0xb8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d007      	beq.n	8005676 <TIM_OC5_SetConfig+0x76>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a14      	ldr	r2, [pc, #80]	; (80056bc <TIM_OC5_SetConfig+0xbc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_OC5_SetConfig+0x76>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a13      	ldr	r2, [pc, #76]	; (80056c0 <TIM_OC5_SetConfig+0xc0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d109      	bne.n	800568a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	021b      	lsls	r3, r3, #8
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	621a      	str	r2, [r3, #32]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40010400 	.word	0x40010400
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40014400 	.word	0x40014400
 80056c0:	40014800 	.word	0x40014800

080056c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	051b      	lsls	r3, r3, #20
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a18      	ldr	r2, [pc, #96]	; (8005778 <TIM_OC6_SetConfig+0xb4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00f      	beq.n	800573c <TIM_OC6_SetConfig+0x78>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a17      	ldr	r2, [pc, #92]	; (800577c <TIM_OC6_SetConfig+0xb8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00b      	beq.n	800573c <TIM_OC6_SetConfig+0x78>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a16      	ldr	r2, [pc, #88]	; (8005780 <TIM_OC6_SetConfig+0xbc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d007      	beq.n	800573c <TIM_OC6_SetConfig+0x78>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a15      	ldr	r2, [pc, #84]	; (8005784 <TIM_OC6_SetConfig+0xc0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_OC6_SetConfig+0x78>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a14      	ldr	r2, [pc, #80]	; (8005788 <TIM_OC6_SetConfig+0xc4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d109      	bne.n	8005750 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	029b      	lsls	r3, r3, #10
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400
 8005780:	40014000 	.word	0x40014000
 8005784:	40014400 	.word	0x40014400
 8005788:	40014800 	.word	0x40014800

0800578c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 030a 	bic.w	r3, r3, #10
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b087      	sub	sp, #28
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0210 	bic.w	r2, r3, #16
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005826:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4b09      	ldr	r3, [pc, #36]	; (8005884 <TIM_ITRx_SetConfig+0x38>)
 8005860:	4013      	ands	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	f043 0307 	orr.w	r3, r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	609a      	str	r2, [r3, #8]
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	ffcfff8f 	.word	0xffcfff8f

08005888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	021a      	lsls	r2, r3, #8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	609a      	str	r2, [r3, #8]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058dc:	2302      	movs	r3, #2
 80058de:	e068      	b.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a2e      	ldr	r2, [pc, #184]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2d      	ldr	r2, [pc, #180]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d108      	bne.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800591a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d01d      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d018      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d013      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d00e      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10c      	bne.n	80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800598c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	4313      	orrs	r3, r2
 8005996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40010400 	.word	0x40010400
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00
 80059d4:	40001800 	.word	0x40001800

080059d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a14:	b084      	sub	sp, #16
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	f107 001c 	add.w	r0, r7, #28
 8005a22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d120      	bne.n	8005a6e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <USB_CoreInit+0xd4>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d105      	bne.n	8005a62 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 fb14 	bl	8007090 <USB_CoreReset>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	73fb      	strb	r3, [r7, #15]
 8005a6c:	e01a      	b.n	8005aa4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f001 fb08 	bl	8007090 <USB_CoreReset>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
 8005a96:	e005      	b.n	8005aa4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d116      	bne.n	8005ad8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ab8:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <USB_CoreInit+0xd8>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f043 0206 	orr.w	r2, r3, #6
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f043 0220 	orr.w	r2, r3, #32
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ae4:	b004      	add	sp, #16
 8005ae6:	4770      	bx	lr
 8005ae8:	ffbdffbf 	.word	0xffbdffbf
 8005aec:	03ee0000 	.word	0x03ee0000

08005af0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d165      	bne.n	8005bd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a41      	ldr	r2, [pc, #260]	; (8005c0c <USB_SetTurnaroundTime+0x11c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d906      	bls.n	8005b1a <USB_SetTurnaroundTime+0x2a>
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4a40      	ldr	r2, [pc, #256]	; (8005c10 <USB_SetTurnaroundTime+0x120>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d202      	bcs.n	8005b1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b14:	230f      	movs	r3, #15
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e062      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	4a3c      	ldr	r2, [pc, #240]	; (8005c10 <USB_SetTurnaroundTime+0x120>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d306      	bcc.n	8005b30 <USB_SetTurnaroundTime+0x40>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4a3b      	ldr	r2, [pc, #236]	; (8005c14 <USB_SetTurnaroundTime+0x124>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d202      	bcs.n	8005b30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b2a:	230e      	movs	r3, #14
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	e057      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	4a38      	ldr	r2, [pc, #224]	; (8005c14 <USB_SetTurnaroundTime+0x124>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d306      	bcc.n	8005b46 <USB_SetTurnaroundTime+0x56>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4a37      	ldr	r2, [pc, #220]	; (8005c18 <USB_SetTurnaroundTime+0x128>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d202      	bcs.n	8005b46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b40:	230d      	movs	r3, #13
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e04c      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4a33      	ldr	r2, [pc, #204]	; (8005c18 <USB_SetTurnaroundTime+0x128>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d306      	bcc.n	8005b5c <USB_SetTurnaroundTime+0x6c>
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4a32      	ldr	r2, [pc, #200]	; (8005c1c <USB_SetTurnaroundTime+0x12c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d802      	bhi.n	8005b5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005b56:	230c      	movs	r3, #12
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e041      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <USB_SetTurnaroundTime+0x12c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d906      	bls.n	8005b72 <USB_SetTurnaroundTime+0x82>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4a2e      	ldr	r2, [pc, #184]	; (8005c20 <USB_SetTurnaroundTime+0x130>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d802      	bhi.n	8005b72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005b6c:	230b      	movs	r3, #11
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e036      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <USB_SetTurnaroundTime+0x130>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d906      	bls.n	8005b88 <USB_SetTurnaroundTime+0x98>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <USB_SetTurnaroundTime+0x134>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d802      	bhi.n	8005b88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b82:	230a      	movs	r3, #10
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e02b      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4a26      	ldr	r2, [pc, #152]	; (8005c24 <USB_SetTurnaroundTime+0x134>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d906      	bls.n	8005b9e <USB_SetTurnaroundTime+0xae>
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4a25      	ldr	r2, [pc, #148]	; (8005c28 <USB_SetTurnaroundTime+0x138>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d202      	bcs.n	8005b9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b98:	2309      	movs	r3, #9
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	e020      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <USB_SetTurnaroundTime+0x138>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d306      	bcc.n	8005bb4 <USB_SetTurnaroundTime+0xc4>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <USB_SetTurnaroundTime+0x13c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d802      	bhi.n	8005bb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005bae:	2308      	movs	r3, #8
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e015      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	4a1d      	ldr	r2, [pc, #116]	; (8005c2c <USB_SetTurnaroundTime+0x13c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d906      	bls.n	8005bca <USB_SetTurnaroundTime+0xda>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4a1c      	ldr	r2, [pc, #112]	; (8005c30 <USB_SetTurnaroundTime+0x140>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d202      	bcs.n	8005bca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005bc4:	2307      	movs	r3, #7
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e00a      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005bca:	2306      	movs	r3, #6
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e007      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d102      	bne.n	8005bdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005bd6:	2309      	movs	r3, #9
 8005bd8:	617b      	str	r3, [r7, #20]
 8005bda:	e001      	b.n	8005be0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005bdc:	2309      	movs	r3, #9
 8005bde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	029b      	lsls	r3, r3, #10
 8005bf4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	00d8acbf 	.word	0x00d8acbf
 8005c10:	00e4e1c0 	.word	0x00e4e1c0
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	01067380 	.word	0x01067380
 8005c1c:	011a499f 	.word	0x011a499f
 8005c20:	01312cff 	.word	0x01312cff
 8005c24:	014ca43f 	.word	0x014ca43f
 8005c28:	016e3600 	.word	0x016e3600
 8005c2c:	01a6ab1f 	.word	0x01a6ab1f
 8005c30:	01e84800 	.word	0x01e84800

08005c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f043 0201 	orr.w	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 0201 	bic.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d106      	bne.n	8005ca4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60da      	str	r2, [r3, #12]
 8005ca2:	e00b      	b.n	8005cbc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60da      	str	r2, [r3, #12]
 8005cb6:	e001      	b.n	8005cbc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e003      	b.n	8005cc4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005cbc:	2032      	movs	r0, #50	; 0x32
 8005cbe:	f7fb f8dd 	bl	8000e7c <HAL_Delay>

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ccc:	b084      	sub	sp, #16
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	e009      	b.n	8005d00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3340      	adds	r3, #64	; 0x40
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b0e      	cmp	r3, #14
 8005d04:	d9f2      	bls.n	8005cec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d11c      	bne.n	8005d46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d1a:	f043 0302 	orr.w	r3, r3, #2
 8005d1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	e005      	b.n	8005d52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d64:	4619      	mov	r1, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	680b      	ldr	r3, [r1, #0]
 8005d70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d10c      	bne.n	8005d92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d104      	bne.n	8005d88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d7e:	2100      	movs	r1, #0
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f949 	bl	8006018 <USB_SetDevSpeed>
 8005d86:	e008      	b.n	8005d9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d88:	2101      	movs	r1, #1
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f944 	bl	8006018 <USB_SetDevSpeed>
 8005d90:	e003      	b.n	8005d9a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d92:	2103      	movs	r1, #3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f93f 	bl	8006018 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d9a:	2110      	movs	r1, #16
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f8f3 	bl	8005f88 <USB_FlushTxFifo>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f911 	bl	8005fd4 <USB_FlushRxFifo>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	461a      	mov	r2, r3
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de0:	2300      	movs	r3, #0
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e043      	b.n	8005e6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfc:	d118      	bne.n	8005e30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	461a      	mov	r2, r3
 8005e12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e013      	b.n	8005e42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e26:	461a      	mov	r2, r3
 8005e28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e008      	b.n	8005e42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	2300      	movs	r3, #0
 8005e40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2300      	movs	r3, #0
 8005e52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	461a      	mov	r2, r3
 8005e62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d3b7      	bcc.n	8005de6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	e043      	b.n	8005f04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e92:	d118      	bne.n	8005ec6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	015a      	lsls	r2, r3, #5
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e013      	b.n	8005ed8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	e008      	b.n	8005ed8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005efc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	3301      	adds	r3, #1
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d3b7      	bcc.n	8005e7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d105      	bne.n	8005f40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f043 0210 	orr.w	r2, r3, #16
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699a      	ldr	r2, [r3, #24]
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <USB_DevInit+0x2b4>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f043 0208 	orr.w	r2, r3, #8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d105      	bne.n	8005f70 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <USB_DevInit+0x2b8>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f7c:	b004      	add	sp, #16
 8005f7e:	4770      	bx	lr
 8005f80:	803c3800 	.word	0x803c3800
 8005f84:	40000004 	.word	0x40000004

08005f88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	019b      	lsls	r3, r3, #6
 8005f9a:	f043 0220 	orr.w	r2, r3, #32
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <USB_FlushTxFifo+0x48>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d901      	bls.n	8005fb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e006      	b.n	8005fc2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d0f0      	beq.n	8005fa2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	00030d40 	.word	0x00030d40

08005fd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2210      	movs	r2, #16
 8005fe4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <USB_FlushRxFifo+0x40>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e006      	b.n	8006006 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b10      	cmp	r3, #16
 8006002:	d0f0      	beq.n	8005fe6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	00030d40 	.word	0x00030d40

08006018 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	68f9      	ldr	r1, [r7, #12]
 8006034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006038:	4313      	orrs	r3, r2
 800603a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 0306 	and.w	r3, r3, #6
 8006062:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800606a:	2300      	movs	r3, #0
 800606c:	75fb      	strb	r3, [r7, #23]
 800606e:	e00a      	b.n	8006086 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d002      	beq.n	800607c <USB_GetDevSpeed+0x32>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b06      	cmp	r3, #6
 800607a:	d102      	bne.n	8006082 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800607c:	2302      	movs	r3, #2
 800607e:	75fb      	strb	r3, [r7, #23]
 8006080:	e001      	b.n	8006086 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006082:	230f      	movs	r3, #15
 8006084:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006086:	7dfb      	ldrb	r3, [r7, #23]
}
 8006088:	4618      	mov	r0, r3
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d139      	bne.n	8006124 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	2101      	movs	r1, #1
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d153      	bne.n	8006190 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	78db      	ldrb	r3, [r3, #3]
 8006102:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006104:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	059b      	lsls	r3, r3, #22
 800610a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800610c:	431a      	orrs	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	0159      	lsls	r1, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	440b      	add	r3, r1
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	4619      	mov	r1, r3
 800611c:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <USB_ActivateEndpoint+0x10c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	600b      	str	r3, [r1, #0]
 8006122:	e035      	b.n	8006190 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	2101      	movs	r1, #1
 8006136:	fa01 f303 	lsl.w	r3, r1, r3
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	68f9      	ldr	r1, [r7, #12]
 800613e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006142:	4313      	orrs	r3, r2
 8006144:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d119      	bne.n	8006190 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	78db      	ldrb	r3, [r3, #3]
 8006176:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006178:	430b      	orrs	r3, r1
 800617a:	431a      	orrs	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	0159      	lsls	r1, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	440b      	add	r3, r1
 8006184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006188:	4619      	mov	r1, r3
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <USB_ActivateEndpoint+0x10c>)
 800618c:	4313      	orrs	r3, r2
 800618e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	10008000 	.word	0x10008000

080061a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d161      	bne.n	8006284 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d6:	d11f      	bne.n	8006218 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006216:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	2101      	movs	r1, #1
 800622a:	fa01 f303 	lsl.w	r3, r1, r3
 800622e:	b29b      	uxth	r3, r3
 8006230:	43db      	mvns	r3, r3
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006238:	4013      	ands	r3, r2
 800623a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	2101      	movs	r1, #1
 800624e:	fa01 f303 	lsl.w	r3, r1, r3
 8006252:	b29b      	uxth	r3, r3
 8006254:	43db      	mvns	r3, r3
 8006256:	68f9      	ldr	r1, [r7, #12]
 8006258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800625c:	4013      	ands	r3, r2
 800625e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	0159      	lsls	r1, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	440b      	add	r3, r1
 8006276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627a:	4619      	mov	r1, r3
 800627c:	4b35      	ldr	r3, [pc, #212]	; (8006354 <USB_DeactivateEndpoint+0x1b0>)
 800627e:	4013      	ands	r3, r2
 8006280:	600b      	str	r3, [r1, #0]
 8006282:	e060      	b.n	8006346 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800629a:	d11f      	bne.n	80062dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	0151      	lsls	r1, r2, #5
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	440a      	add	r2, r1
 80062b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	2101      	movs	r1, #1
 80062ee:	fa01 f303 	lsl.w	r3, r1, r3
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	43db      	mvns	r3, r3
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062fc:	4013      	ands	r3, r2
 80062fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	2101      	movs	r1, #1
 8006312:	fa01 f303 	lsl.w	r3, r1, r3
 8006316:	041b      	lsls	r3, r3, #16
 8006318:	43db      	mvns	r3, r3
 800631a:	68f9      	ldr	r1, [r7, #12]
 800631c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006320:	4013      	ands	r3, r2
 8006322:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	0159      	lsls	r1, r3, #5
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	440b      	add	r3, r1
 800633a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633e:	4619      	mov	r1, r3
 8006340:	4b05      	ldr	r3, [pc, #20]	; (8006358 <USB_DeactivateEndpoint+0x1b4>)
 8006342:	4013      	ands	r3, r2
 8006344:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	ec337800 	.word	0xec337800
 8006358:	eff37800 	.word	0xeff37800

0800635c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b01      	cmp	r3, #1
 800637a:	f040 8163 	bne.w	8006644 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d132      	bne.n	80063ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	0159      	lsls	r1, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	440b      	add	r3, r1
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	4619      	mov	r1, r3
 80063a2:	4ba5      	ldr	r3, [pc, #660]	; (8006638 <USB_EPStartXfer+0x2dc>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d4:	691a      	ldr	r2, [r3, #16]
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	0159      	lsls	r1, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	440b      	add	r3, r1
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	4619      	mov	r1, r3
 80063e4:	4b95      	ldr	r3, [pc, #596]	; (800663c <USB_EPStartXfer+0x2e0>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	610b      	str	r3, [r1, #16]
 80063ea:	e074      	b.n	80064d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	691a      	ldr	r2, [r3, #16]
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	0159      	lsls	r1, r3, #5
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	440b      	add	r3, r1
 8006402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006406:	4619      	mov	r1, r3
 8006408:	4b8c      	ldr	r3, [pc, #560]	; (800663c <USB_EPStartXfer+0x2e0>)
 800640a:	4013      	ands	r3, r2
 800640c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	0159      	lsls	r1, r3, #5
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	440b      	add	r3, r1
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	4619      	mov	r1, r3
 800642a:	4b83      	ldr	r3, [pc, #524]	; (8006638 <USB_EPStartXfer+0x2dc>)
 800642c:	4013      	ands	r3, r2
 800642e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643c:	691a      	ldr	r2, [r3, #16]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6959      	ldr	r1, [r3, #20]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	440b      	add	r3, r1
 8006448:	1e59      	subs	r1, r3, #1
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006452:	04d9      	lsls	r1, r3, #19
 8006454:	4b7a      	ldr	r3, [pc, #488]	; (8006640 <USB_EPStartXfer+0x2e4>)
 8006456:	400b      	ands	r3, r1
 8006458:	69b9      	ldr	r1, [r7, #24]
 800645a:	0148      	lsls	r0, r1, #5
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	4401      	add	r1, r0
 8006460:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006464:	4313      	orrs	r3, r2
 8006466:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647e:	69b9      	ldr	r1, [r7, #24]
 8006480:	0148      	lsls	r0, r1, #5
 8006482:	69f9      	ldr	r1, [r7, #28]
 8006484:	4401      	add	r1, r0
 8006486:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800648a:	4313      	orrs	r3, r2
 800648c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	78db      	ldrb	r3, [r3, #3]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d11f      	bne.n	80064d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80064b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d14b      	bne.n	8006574 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d009      	beq.n	80064f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f0:	461a      	mov	r2, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	78db      	ldrb	r3, [r3, #3]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d128      	bne.n	8006552 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650c:	2b00      	cmp	r3, #0
 800650e:	d110      	bne.n	8006532 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	e00f      	b.n	8006552 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	0151      	lsls	r1, r2, #5
 8006544:	69fa      	ldr	r2, [r7, #28]
 8006546:	440a      	add	r2, r1
 8006548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006550:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e133      	b.n	80067dc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006592:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	78db      	ldrb	r3, [r3, #3]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d015      	beq.n	80065c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 811b 	beq.w	80067dc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	2101      	movs	r1, #1
 80065b8:	fa01 f303 	lsl.w	r3, r1, r3
 80065bc:	69f9      	ldr	r1, [r7, #28]
 80065be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065c2:	4313      	orrs	r3, r2
 80065c4:	634b      	str	r3, [r1, #52]	; 0x34
 80065c6:	e109      	b.n	80067dc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d110      	bne.n	80065fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	e00f      	b.n	800661a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006618:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	68d9      	ldr	r1, [r3, #12]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	781a      	ldrb	r2, [r3, #0]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	b298      	uxth	r0, r3
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4603      	mov	r3, r0
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 fa38 	bl	8006aa4 <USB_WritePacket>
 8006634:	e0d2      	b.n	80067dc <USB_EPStartXfer+0x480>
 8006636:	bf00      	nop
 8006638:	e007ffff 	.word	0xe007ffff
 800663c:	fff80000 	.word	0xfff80000
 8006640:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	4413      	add	r3, r2
 800664c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006650:	691a      	ldr	r2, [r3, #16]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	0159      	lsls	r1, r3, #5
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	440b      	add	r3, r1
 800665a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665e:	4619      	mov	r1, r3
 8006660:	4b61      	ldr	r3, [pc, #388]	; (80067e8 <USB_EPStartXfer+0x48c>)
 8006662:	4013      	ands	r3, r2
 8006664:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	0159      	lsls	r1, r3, #5
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	440b      	add	r3, r1
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	4619      	mov	r1, r3
 8006682:	4b5a      	ldr	r3, [pc, #360]	; (80067ec <USB_EPStartXfer+0x490>)
 8006684:	4013      	ands	r3, r2
 8006686:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d123      	bne.n	80066d8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a6:	69b9      	ldr	r1, [r7, #24]
 80066a8:	0148      	lsls	r0, r1, #5
 80066aa:	69f9      	ldr	r1, [r7, #28]
 80066ac:	4401      	add	r1, r0
 80066ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066b2:	4313      	orrs	r3, r2
 80066b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066d4:	6113      	str	r3, [r2, #16]
 80066d6:	e033      	b.n	8006740 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	695a      	ldr	r2, [r3, #20]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4413      	add	r3, r2
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	691a      	ldr	r2, [r3, #16]
 80066fc:	8afb      	ldrh	r3, [r7, #22]
 80066fe:	04d9      	lsls	r1, r3, #19
 8006700:	4b3b      	ldr	r3, [pc, #236]	; (80067f0 <USB_EPStartXfer+0x494>)
 8006702:	400b      	ands	r3, r1
 8006704:	69b9      	ldr	r1, [r7, #24]
 8006706:	0148      	lsls	r0, r1, #5
 8006708:	69f9      	ldr	r1, [r7, #28]
 800670a:	4401      	add	r1, r0
 800670c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006710:	4313      	orrs	r3, r2
 8006712:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	8af9      	ldrh	r1, [r7, #22]
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006730:	69b9      	ldr	r1, [r7, #24]
 8006732:	0148      	lsls	r0, r1, #5
 8006734:	69f9      	ldr	r1, [r7, #28]
 8006736:	4401      	add	r1, r0
 8006738:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800673c:	4313      	orrs	r3, r2
 800673e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d10d      	bne.n	8006762 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d009      	beq.n	8006762 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	68d9      	ldr	r1, [r3, #12]
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675e:	460a      	mov	r2, r1
 8006760:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	78db      	ldrb	r3, [r3, #3]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d128      	bne.n	80067bc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006776:	2b00      	cmp	r3, #0
 8006778:	d110      	bne.n	800679c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	440a      	add	r2, r1
 8006790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006794:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e00f      	b.n	80067bc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	fff80000 	.word	0xfff80000
 80067ec:	e007ffff 	.word	0xe007ffff
 80067f0:	1ff80000 	.word	0x1ff80000

080067f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	2b01      	cmp	r3, #1
 8006812:	f040 80cd 	bne.w	80069b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d132      	bne.n	8006884 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682a:	691a      	ldr	r2, [r3, #16]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	0159      	lsls	r1, r3, #5
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	440b      	add	r3, r1
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	4619      	mov	r1, r3
 800683a:	4b98      	ldr	r3, [pc, #608]	; (8006a9c <USB_EP0StartXfer+0x2a8>)
 800683c:	4013      	ands	r3, r2
 800683e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	440a      	add	r2, r1
 8006856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800685e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	0159      	lsls	r1, r3, #5
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	440b      	add	r3, r1
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	4619      	mov	r1, r3
 800687c:	4b88      	ldr	r3, [pc, #544]	; (8006aa0 <USB_EP0StartXfer+0x2ac>)
 800687e:	4013      	ands	r3, r2
 8006880:	610b      	str	r3, [r1, #16]
 8006882:	e04e      	b.n	8006922 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	0159      	lsls	r1, r3, #5
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	440b      	add	r3, r1
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	4619      	mov	r1, r3
 80068a0:	4b7f      	ldr	r3, [pc, #508]	; (8006aa0 <USB_EP0StartXfer+0x2ac>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	0159      	lsls	r1, r3, #5
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	440b      	add	r3, r1
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	4619      	mov	r1, r3
 80068c2:	4b76      	ldr	r3, [pc, #472]	; (8006a9c <USB_EP0StartXfer+0x2a8>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d903      	bls.n	80068dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006908:	691a      	ldr	r2, [r3, #16]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006912:	6939      	ldr	r1, [r7, #16]
 8006914:	0148      	lsls	r0, r1, #5
 8006916:	6979      	ldr	r1, [r7, #20]
 8006918:	4401      	add	r1, r0
 800691a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800691e:	4313      	orrs	r3, r2
 8006920:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006922:	79fb      	ldrb	r3, [r7, #7]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d11e      	bne.n	8006966 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	461a      	mov	r2, r3
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	440a      	add	r2, r1
 800695a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800695e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	e092      	b.n	8006a8c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4413      	add	r3, r2
 800696e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	440a      	add	r2, r1
 800697c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006980:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006984:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d07e      	beq.n	8006a8c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	2101      	movs	r1, #1
 80069a0:	fa01 f303 	lsl.w	r3, r1, r3
 80069a4:	6979      	ldr	r1, [r7, #20]
 80069a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069aa:	4313      	orrs	r3, r2
 80069ac:	634b      	str	r3, [r1, #52]	; 0x34
 80069ae:	e06d      	b.n	8006a8c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	0159      	lsls	r1, r3, #5
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	440b      	add	r3, r1
 80069c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ca:	4619      	mov	r1, r3
 80069cc:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <USB_EP0StartXfer+0x2ac>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069de:	691a      	ldr	r2, [r3, #16]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	0159      	lsls	r1, r3, #5
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	440b      	add	r3, r1
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	4619      	mov	r1, r3
 80069ee:	4b2b      	ldr	r3, [pc, #172]	; (8006a9c <USB_EP0StartXfer+0x2a8>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a3a:	6939      	ldr	r1, [r7, #16]
 8006a3c:	0148      	lsls	r0, r1, #5
 8006a3e:	6979      	ldr	r1, [r7, #20]
 8006a40:	4401      	add	r1, r0
 8006a42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a46:	4313      	orrs	r3, r2
 8006a48:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10d      	bne.n	8006a6c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d009      	beq.n	8006a6c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	68d9      	ldr	r1, [r3, #12]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	460a      	mov	r2, r1
 8006a6a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	0151      	lsls	r1, r2, #5
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	440a      	add	r2, r1
 8006a82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	e007ffff 	.word	0xe007ffff
 8006aa0:	fff80000 	.word	0xfff80000

08006aa4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b089      	sub	sp, #36	; 0x24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	71fb      	strb	r3, [r7, #7]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d123      	bne.n	8006b12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006aca:	88bb      	ldrh	r3, [r7, #4]
 8006acc:	3303      	adds	r3, #3
 8006ace:	089b      	lsrs	r3, r3, #2
 8006ad0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e018      	b.n	8006b0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	031a      	lsls	r2, r3, #12
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	3301      	adds	r3, #1
 8006af6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	3301      	adds	r3, #1
 8006afc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	3301      	adds	r3, #1
 8006b02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	3301      	adds	r3, #1
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d3e2      	bcc.n	8006ad8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3724      	adds	r7, #36	; 0x24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b08b      	sub	sp, #44	; 0x2c
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	089b      	lsrs	r3, r3, #2
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	623b      	str	r3, [r7, #32]
 8006b4a:	e014      	b.n	8006b76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	3301      	adds	r3, #1
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	3301      	adds	r3, #1
 8006b68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	3301      	adds	r3, #1
 8006b74:	623b      	str	r3, [r7, #32]
 8006b76:	6a3a      	ldr	r2, [r7, #32]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d3e6      	bcc.n	8006b4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b7e:	8bfb      	ldrh	r3, [r7, #30]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01e      	beq.n	8006bc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f107 0310 	add.w	r3, r7, #16
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b98:	693a      	ldr	r2, [r7, #16]
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	701a      	strb	r2, [r3, #0]
      i++;
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	3301      	adds	r3, #1
 8006bae:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006bb6:	8bfb      	ldrh	r3, [r7, #30]
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006bbc:	8bfb      	ldrh	r3, [r7, #30]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1ea      	bne.n	8006b98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	372c      	adds	r7, #44	; 0x2c
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d12c      	bne.n	8006c46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	db12      	blt.n	8006c24 <USB_EPSetStall+0x54>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00f      	beq.n	8006c24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	0151      	lsls	r1, r2, #5
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	440a      	add	r2, r1
 8006c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e02b      	b.n	8006c9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	db12      	blt.n	8006c7e <USB_EPSetStall+0xae>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00f      	beq.n	8006c7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	0151      	lsls	r1, r2, #5
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	440a      	add	r2, r1
 8006c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d128      	bne.n	8006d1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ce6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	78db      	ldrb	r3, [r3, #3]
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d003      	beq.n	8006cf8 <USB_EPClearStall+0x4c>
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	78db      	ldrb	r3, [r3, #3]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d138      	bne.n	8006d6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	e027      	b.n	8006d6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	78db      	ldrb	r3, [r3, #3]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d003      	beq.n	8006d4a <USB_EPClearStall+0x9e>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	78db      	ldrb	r3, [r3, #3]
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d10f      	bne.n	8006d6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006dac:	68f9      	ldr	r1, [r7, #12]
 8006dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006db2:	4313      	orrs	r3, r2
 8006db4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df2:	f023 0302 	bic.w	r3, r3, #2
 8006df6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e20:	f023 0303 	bic.w	r3, r3, #3
 8006e24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e34:	f043 0302 	orr.w	r3, r3, #2
 8006e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e60:	68fb      	ldr	r3, [r7, #12]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	0c1b      	lsrs	r3, r3, #16
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	b29b      	uxth	r3, r3
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4013      	ands	r3, r2
 8006f02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f04:	68bb      	ldr	r3, [r7, #8]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b087      	sub	sp, #28
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	f003 030f 	and.w	r3, r3, #15
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f42:	01db      	lsls	r3, r3, #7
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f4c:	78fb      	ldrb	r3, [r7, #3]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f60:	68bb      	ldr	r3, [r7, #8]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
	...

08006f8c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <USB_ActivateSetup+0x44>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	fffff800 	.word	0xfffff800

08006fd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b087      	sub	sp, #28
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	333c      	adds	r3, #60	; 0x3c
 8006fea:	3304      	adds	r3, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4a26      	ldr	r2, [pc, #152]	; (800708c <USB_EP0_OutStart+0xb8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d90a      	bls.n	800700e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007004:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007008:	d101      	bne.n	800700e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	e037      	b.n	800707e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007014:	461a      	mov	r2, r3
 8007016:	2300      	movs	r3, #0
 8007018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800702c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800703c:	f043 0318 	orr.w	r3, r3, #24
 8007040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007050:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007054:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007056:	7afb      	ldrb	r3, [r7, #11]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d10f      	bne.n	800707c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007062:	461a      	mov	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007076:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800707a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	4f54300a 	.word	0x4f54300a

08007090 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3301      	adds	r3, #1
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4a13      	ldr	r2, [pc, #76]	; (80070f4 <USB_CoreReset+0x64>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d901      	bls.n	80070ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e01b      	b.n	80070e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	daf2      	bge.n	800709c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f043 0201 	orr.w	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3301      	adds	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4a09      	ldr	r2, [pc, #36]	; (80070f4 <USB_CoreReset+0x64>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d901      	bls.n	80070d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e006      	b.n	80070e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d0f0      	beq.n	80070c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	00030d40 	.word	0x00030d40

080070f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007104:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007108:	f002 f990 	bl	800942c <USBD_static_malloc>
 800710c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800711c:	2302      	movs	r3, #2
 800711e:	e066      	b.n	80071ee <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	7c1b      	ldrb	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d119      	bne.n	8007164 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007134:	2202      	movs	r2, #2
 8007136:	2181      	movs	r1, #129	; 0x81
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f002 f854 	bl	80091e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007148:	2202      	movs	r2, #2
 800714a:	2101      	movs	r1, #1
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f002 f84a 	bl	80091e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2210      	movs	r2, #16
 800715e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007162:	e016      	b.n	8007192 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007164:	2340      	movs	r3, #64	; 0x40
 8007166:	2202      	movs	r2, #2
 8007168:	2181      	movs	r1, #129	; 0x81
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f002 f83b 	bl	80091e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007176:	2340      	movs	r3, #64	; 0x40
 8007178:	2202      	movs	r2, #2
 800717a:	2101      	movs	r1, #1
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f002 f832 	bl	80091e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2210      	movs	r2, #16
 800718e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007192:	2308      	movs	r3, #8
 8007194:	2203      	movs	r2, #3
 8007196:	2182      	movs	r1, #130	; 0x82
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f002 f824 	bl	80091e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7c1b      	ldrb	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d109      	bne.n	80071dc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071d2:	2101      	movs	r1, #1
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f002 f8f5 	bl	80093c4 <USBD_LL_PrepareReceive>
 80071da:	e007      	b.n	80071ec <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071e2:	2340      	movs	r3, #64	; 0x40
 80071e4:	2101      	movs	r1, #1
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f002 f8ec 	bl	80093c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007202:	2181      	movs	r1, #129	; 0x81
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f002 f814 	bl	8009232 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007210:	2101      	movs	r1, #1
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 f80d 	bl	8009232 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007220:	2182      	movs	r1, #130	; 0x82
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f002 f805 	bl	8009232 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00e      	beq.n	8007260 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007252:	4618      	mov	r0, r3
 8007254:	f002 f8f8 	bl	8009448 <USBD_static_free>
    pdev->pClassData = NULL;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800727c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800727e:	2300      	movs	r3, #0
 8007280:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007290:	2303      	movs	r3, #3
 8007292:	e0af      	b.n	80073f4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800729c:	2b00      	cmp	r3, #0
 800729e:	d03f      	beq.n	8007320 <USBD_CDC_Setup+0xb4>
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	f040 809f 	bne.w	80073e4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	88db      	ldrh	r3, [r3, #6]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d02e      	beq.n	800730c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b25b      	sxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	da16      	bge.n	80072e6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80072c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	88d2      	ldrh	r2, [r2, #6]
 80072ca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	88db      	ldrh	r3, [r3, #6]
 80072d0:	2b07      	cmp	r3, #7
 80072d2:	bf28      	it	cs
 80072d4:	2307      	movcs	r3, #7
 80072d6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	89fa      	ldrh	r2, [r7, #14]
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 fb19 	bl	8008916 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80072e4:	e085      	b.n	80073f2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	785a      	ldrb	r2, [r3, #1]
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	88db      	ldrh	r3, [r3, #6]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80072fc:	6939      	ldr	r1, [r7, #16]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	88db      	ldrh	r3, [r3, #6]
 8007302:	461a      	mov	r2, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 fb32 	bl	800896e <USBD_CtlPrepareRx>
      break;
 800730a:	e072      	b.n	80073f2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	7850      	ldrb	r0, [r2, #1]
 8007318:	2200      	movs	r2, #0
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	4798      	blx	r3
      break;
 800731e:	e068      	b.n	80073f2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	2b0b      	cmp	r3, #11
 8007326:	d852      	bhi.n	80073ce <USBD_CDC_Setup+0x162>
 8007328:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <USBD_CDC_Setup+0xc4>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	08007361 	.word	0x08007361
 8007334:	080073dd 	.word	0x080073dd
 8007338:	080073cf 	.word	0x080073cf
 800733c:	080073cf 	.word	0x080073cf
 8007340:	080073cf 	.word	0x080073cf
 8007344:	080073cf 	.word	0x080073cf
 8007348:	080073cf 	.word	0x080073cf
 800734c:	080073cf 	.word	0x080073cf
 8007350:	080073cf 	.word	0x080073cf
 8007354:	080073cf 	.word	0x080073cf
 8007358:	0800738b 	.word	0x0800738b
 800735c:	080073b5 	.word	0x080073b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b03      	cmp	r3, #3
 800736a:	d107      	bne.n	800737c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800736c:	f107 030a 	add.w	r3, r7, #10
 8007370:	2202      	movs	r2, #2
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 face 	bl	8008916 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800737a:	e032      	b.n	80073e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fa58 	bl	8008834 <USBD_CtlError>
            ret = USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	75fb      	strb	r3, [r7, #23]
          break;
 8007388:	e02b      	b.n	80073e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b03      	cmp	r3, #3
 8007394:	d107      	bne.n	80073a6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007396:	f107 030d 	add.w	r3, r7, #13
 800739a:	2201      	movs	r2, #1
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 fab9 	bl	8008916 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073a4:	e01d      	b.n	80073e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 fa43 	bl	8008834 <USBD_CtlError>
            ret = USBD_FAIL;
 80073ae:	2303      	movs	r3, #3
 80073b0:	75fb      	strb	r3, [r7, #23]
          break;
 80073b2:	e016      	b.n	80073e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d00f      	beq.n	80073e0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f001 fa36 	bl	8008834 <USBD_CtlError>
            ret = USBD_FAIL;
 80073c8:	2303      	movs	r3, #3
 80073ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073cc:	e008      	b.n	80073e0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fa2f 	bl	8008834 <USBD_CtlError>
          ret = USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	75fb      	strb	r3, [r7, #23]
          break;
 80073da:	e002      	b.n	80073e2 <USBD_CDC_Setup+0x176>
          break;
 80073dc:	bf00      	nop
 80073de:	e008      	b.n	80073f2 <USBD_CDC_Setup+0x186>
          break;
 80073e0:	bf00      	nop
      }
      break;
 80073e2:	e006      	b.n	80073f2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fa24 	bl	8008834 <USBD_CtlError>
      ret = USBD_FAIL;
 80073ec:	2303      	movs	r3, #3
 80073ee:	75fb      	strb	r3, [r7, #23]
      break;
 80073f0:	bf00      	nop
  }

  return (uint8_t)ret;
 80073f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800740e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800741a:	2303      	movs	r3, #3
 800741c:	e04f      	b.n	80074be <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007424:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	4613      	mov	r3, r2
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	440b      	add	r3, r1
 8007434:	3318      	adds	r3, #24
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d029      	beq.n	8007490 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	6879      	ldr	r1, [r7, #4]
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	440b      	add	r3, r1
 800744a:	3318      	adds	r3, #24
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	78f9      	ldrb	r1, [r7, #3]
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	460b      	mov	r3, r1
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	1a5b      	subs	r3, r3, r1
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4403      	add	r3, r0
 800745c:	3344      	adds	r3, #68	; 0x44
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	fbb2 f1f3 	udiv	r1, r2, r3
 8007464:	fb03 f301 	mul.w	r3, r3, r1
 8007468:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800746a:	2b00      	cmp	r3, #0
 800746c:	d110      	bne.n	8007490 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	3318      	adds	r3, #24
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007482:	78f9      	ldrb	r1, [r7, #3]
 8007484:	2300      	movs	r3, #0
 8007486:	2200      	movs	r2, #0
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f001 ff7a 	bl	8009382 <USBD_LL_Transmit>
 800748e:	e015      	b.n	80074bc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00b      	beq.n	80074bc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e015      	b.n	8007514 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 ff8a 	bl	8009406 <USBD_LL_GetRxDataSize>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800750e:	4611      	mov	r1, r2
 8007510:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800752a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007532:	2303      	movs	r3, #3
 8007534:	e01b      	b.n	800756e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d015      	beq.n	800756c <USBD_CDC_EP0_RxReady+0x50>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007546:	2bff      	cmp	r3, #255	; 0xff
 8007548:	d010      	beq.n	800756c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007558:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007560:	b292      	uxth	r2, r2
 8007562:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	22ff      	movs	r2, #255	; 0xff
 8007568:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2243      	movs	r2, #67	; 0x43
 8007584:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007586:	4b03      	ldr	r3, [pc, #12]	; (8007594 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007588:	4618      	mov	r0, r3
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	20000098 	.word	0x20000098

08007598 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2243      	movs	r2, #67	; 0x43
 80075a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80075a6:	4b03      	ldr	r3, [pc, #12]	; (80075b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	20000054 	.word	0x20000054

080075b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2243      	movs	r2, #67	; 0x43
 80075c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80075c6:	4b03      	ldr	r3, [pc, #12]	; (80075d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	200000dc 	.word	0x200000dc

080075d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	220a      	movs	r2, #10
 80075e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075e6:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	20000010 	.word	0x20000010

080075f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	e004      	b.n	8007616 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007622:	b480      	push	{r7}
 8007624:	b087      	sub	sp, #28
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007634:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800763c:	2303      	movs	r3, #3
 800763e:	e008      	b.n	8007652 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007676:	2303      	movs	r3, #3
 8007678:	e004      	b.n	8007684 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800769e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e01a      	b.n	80076e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d114      	bne.n	80076e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2201      	movs	r2, #1
 80076c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076da:	2181      	movs	r1, #129	; 0x81
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fe50 	bl	8009382 <USBD_LL_Transmit>

    ret = USBD_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800770a:	2303      	movs	r3, #3
 800770c:	e016      	b.n	800773c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7c1b      	ldrb	r3, [r3, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d109      	bne.n	800772a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800771c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007720:	2101      	movs	r1, #1
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fe4e 	bl	80093c4 <USBD_LL_PrepareReceive>
 8007728:	e007      	b.n	800773a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007730:	2340      	movs	r3, #64	; 0x40
 8007732:	2101      	movs	r1, #1
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 fe45 	bl	80093c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007758:	2303      	movs	r3, #3
 800775a:	e01f      	b.n	800779c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	79fa      	ldrb	r2, [r7, #7]
 800778e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f001 fcbd 	bl	8009110 <USBD_LL_Init>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]

  return ret;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e016      	b.n	80077ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	f107 020e 	add.w	r2, r7, #14
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	4602      	mov	r2, r0
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fcd8 	bl	80091b0 <USBD_LL_Start>
 8007800:	4603      	mov	r3, r0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800782c:	2303      	movs	r3, #3
 800782e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007836:	2b00      	cmp	r3, #0
 8007838:	d009      	beq.n	800784e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	78fa      	ldrb	r2, [r7, #3]
 8007844:	4611      	mov	r1, r2
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
 800784a:	4603      	mov	r3, r0
 800784c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	78fa      	ldrb	r2, [r7, #3]
 8007878:	4611      	mov	r1, r2
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
  }

  return USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f000 ff90 	bl	80087c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d01a      	beq.n	80078fa <USBD_LL_SetupStage+0x72>
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d822      	bhi.n	800790e <USBD_LL_SetupStage+0x86>
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <USBD_LL_SetupStage+0x4a>
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d00a      	beq.n	80078e6 <USBD_LL_SetupStage+0x5e>
 80078d0:	e01d      	b.n	800790e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa62 	bl	8007da4 <USBD_StdDevReq>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
      break;
 80078e4:	e020      	b.n	8007928 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ec:	4619      	mov	r1, r3
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fac6 	bl	8007e80 <USBD_StdItfReq>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]
      break;
 80078f8:	e016      	b.n	8007928 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb05 	bl	8007f12 <USBD_StdEPReq>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
      break;
 800790c:	e00c      	b.n	8007928 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007918:	b2db      	uxtb	r3, r3
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fca7 	bl	8009270 <USBD_LL_StallEP>
 8007922:	4603      	mov	r3, r0
 8007924:	73fb      	strb	r3, [r7, #15]
      break;
 8007926:	bf00      	nop
  }

  return ret;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b086      	sub	sp, #24
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	460b      	mov	r3, r1
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007940:	7afb      	ldrb	r3, [r7, #11]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d138      	bne.n	80079b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800794c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007954:	2b03      	cmp	r3, #3
 8007956:	d14a      	bne.n	80079ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	429a      	cmp	r2, r3
 8007962:	d913      	bls.n	800798c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	1ad2      	subs	r2, r2, r3
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	4293      	cmp	r3, r2
 800797c:	bf28      	it	cs
 800797e:	4613      	movcs	r3, r2
 8007980:	461a      	mov	r2, r3
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f001 f80f 	bl	80089a8 <USBD_CtlContinueRx>
 800798a:	e030      	b.n	80079ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b03      	cmp	r3, #3
 8007996:	d10b      	bne.n	80079b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f001 f80a 	bl	80089ca <USBD_CtlSendStatus>
 80079b6:	e01a      	b.n	80079ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d114      	bne.n	80079ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00e      	beq.n	80079ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	7afa      	ldrb	r2, [r7, #11]
 80079da:	4611      	mov	r1, r2
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	4798      	blx	r3
 80079e0:	4603      	mov	r3, r0
 80079e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80079e4:	7dfb      	ldrb	r3, [r7, #23]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
 80079ec:	e000      	b.n	80079f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	460b      	mov	r3, r1
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a06:	7afb      	ldrb	r3, [r7, #11]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d16b      	bne.n	8007ae4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3314      	adds	r3, #20
 8007a10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d156      	bne.n	8007aca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d914      	bls.n	8007a52 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	1ad2      	subs	r2, r2, r3
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 ff84 	bl	800894c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a44:	2300      	movs	r3, #0
 8007a46:	2200      	movs	r2, #0
 8007a48:	2100      	movs	r1, #0
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f001 fcba 	bl	80093c4 <USBD_LL_PrepareReceive>
 8007a50:	e03b      	b.n	8007aca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d11c      	bne.n	8007a98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d316      	bcc.n	8007a98 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d20f      	bcs.n	8007a98 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 ff65 	bl	800894c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2100      	movs	r1, #0
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f001 fc97 	bl	80093c4 <USBD_LL_PrepareReceive>
 8007a96:	e018      	b.n	8007aca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d10b      	bne.n	8007abc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007abc:	2180      	movs	r1, #128	; 0x80
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f001 fbd6 	bl	8009270 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 ff93 	bl	80089f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d122      	bne.n	8007b1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff fe98 	bl	800780a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ae2:	e01a      	b.n	8007b1a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d114      	bne.n	8007b1a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00e      	beq.n	8007b1a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	7afa      	ldrb	r2, [r7, #11]
 8007b06:	4611      	mov	r1, r2
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	4798      	blx	r3
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	e000      	b.n	8007b1c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e02f      	b.n	8007bb8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00f      	beq.n	8007b82 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d009      	beq.n	8007b82 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6852      	ldr	r2, [r2, #4]
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b82:	2340      	movs	r3, #64	; 0x40
 8007b84:	2200      	movs	r2, #0
 8007b86:	2100      	movs	r1, #0
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fb2c 	bl	80091e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2240      	movs	r2, #64	; 0x40
 8007b9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b9e:	2340      	movs	r3, #64	; 0x40
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2180      	movs	r1, #128	; 0x80
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fb1e 	bl	80091e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2240      	movs	r2, #64	; 0x40
 8007bb4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	78fa      	ldrb	r2, [r7, #3]
 8007bd0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2204      	movs	r2, #4
 8007bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d106      	bne.n	8007c2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e012      	b.n	8007c78 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d10b      	bne.n	8007c76 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d005      	beq.n	8007c76 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e014      	b.n	8007cc4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d10d      	bne.n	8007cc2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d007      	beq.n	8007cc2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	78fa      	ldrb	r2, [r7, #3]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e014      	b.n	8007d10 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d10d      	bne.n	8007d0e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d009      	beq.n	8007d5c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6852      	ldr	r2, [r2, #4]
 8007d54:	b2d2      	uxtb	r2, r2
 8007d56:	4611      	mov	r1, r2
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
  }

  return USBD_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b087      	sub	sp, #28
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007d84:	8a3b      	ldrh	r3, [r7, #16]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	b21a      	sxth	r2, r3
 8007d8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b21b      	sxth	r3, r3
 8007d92:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d94:	89fb      	ldrh	r3, [r7, #14]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	371c      	adds	r7, #28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
	...

08007da4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dba:	2b40      	cmp	r3, #64	; 0x40
 8007dbc:	d005      	beq.n	8007dca <USBD_StdDevReq+0x26>
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d853      	bhi.n	8007e6a <USBD_StdDevReq+0xc6>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <USBD_StdDevReq+0x3a>
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d14f      	bne.n	8007e6a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	4798      	blx	r3
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]
      break;
 8007ddc:	e04a      	b.n	8007e74 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	785b      	ldrb	r3, [r3, #1]
 8007de2:	2b09      	cmp	r3, #9
 8007de4:	d83b      	bhi.n	8007e5e <USBD_StdDevReq+0xba>
 8007de6:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <USBD_StdDevReq+0x48>)
 8007de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dec:	08007e41 	.word	0x08007e41
 8007df0:	08007e55 	.word	0x08007e55
 8007df4:	08007e5f 	.word	0x08007e5f
 8007df8:	08007e4b 	.word	0x08007e4b
 8007dfc:	08007e5f 	.word	0x08007e5f
 8007e00:	08007e1f 	.word	0x08007e1f
 8007e04:	08007e15 	.word	0x08007e15
 8007e08:	08007e5f 	.word	0x08007e5f
 8007e0c:	08007e37 	.word	0x08007e37
 8007e10:	08007e29 	.word	0x08007e29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f9de 	bl	80081d8 <USBD_GetDescriptor>
          break;
 8007e1c:	e024      	b.n	8007e68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fb43 	bl	80084ac <USBD_SetAddress>
          break;
 8007e26:	e01f      	b.n	8007e68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fb82 	bl	8008534 <USBD_SetConfig>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]
          break;
 8007e34:	e018      	b.n	8007e68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fc21 	bl	8008680 <USBD_GetConfig>
          break;
 8007e3e:	e013      	b.n	8007e68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fc52 	bl	80086ec <USBD_GetStatus>
          break;
 8007e48:	e00e      	b.n	8007e68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fc81 	bl	8008754 <USBD_SetFeature>
          break;
 8007e52:	e009      	b.n	8007e68 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fc90 	bl	800877c <USBD_ClrFeature>
          break;
 8007e5c:	e004      	b.n	8007e68 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fce7 	bl	8008834 <USBD_CtlError>
          break;
 8007e66:	bf00      	nop
      }
      break;
 8007e68:	e004      	b.n	8007e74 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fce1 	bl	8008834 <USBD_CtlError>
      break;
 8007e72:	bf00      	nop
  }

  return ret;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop

08007e80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e96:	2b40      	cmp	r3, #64	; 0x40
 8007e98:	d005      	beq.n	8007ea6 <USBD_StdItfReq+0x26>
 8007e9a:	2b40      	cmp	r3, #64	; 0x40
 8007e9c:	d82f      	bhi.n	8007efe <USBD_StdItfReq+0x7e>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <USBD_StdItfReq+0x26>
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d12b      	bne.n	8007efe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d81d      	bhi.n	8007ef0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	889b      	ldrh	r3, [r3, #4]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d813      	bhi.n	8007ee6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	4798      	blx	r3
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	88db      	ldrh	r3, [r3, #6]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d110      	bne.n	8007efa <USBD_StdItfReq+0x7a>
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10d      	bne.n	8007efa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fd73 	bl	80089ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ee4:	e009      	b.n	8007efa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fca3 	bl	8008834 <USBD_CtlError>
          break;
 8007eee:	e004      	b.n	8007efa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fc9e 	bl	8008834 <USBD_CtlError>
          break;
 8007ef8:	e000      	b.n	8007efc <USBD_StdItfReq+0x7c>
          break;
 8007efa:	bf00      	nop
      }
      break;
 8007efc:	e004      	b.n	8007f08 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fc97 	bl	8008834 <USBD_CtlError>
      break;
 8007f06:	bf00      	nop
  }

  return ret;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	889b      	ldrh	r3, [r3, #4]
 8007f24:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d007      	beq.n	8007f42 <USBD_StdEPReq+0x30>
 8007f32:	2b40      	cmp	r3, #64	; 0x40
 8007f34:	f200 8145 	bhi.w	80081c2 <USBD_StdEPReq+0x2b0>
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00c      	beq.n	8007f56 <USBD_StdEPReq+0x44>
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	f040 8140 	bne.w	80081c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	4798      	blx	r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
      break;
 8007f54:	e13a      	b.n	80081cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d007      	beq.n	8007f6e <USBD_StdEPReq+0x5c>
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	f300 8129 	bgt.w	80081b6 <USBD_StdEPReq+0x2a4>
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d07f      	beq.n	8008068 <USBD_StdEPReq+0x156>
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d03c      	beq.n	8007fe6 <USBD_StdEPReq+0xd4>
 8007f6c:	e123      	b.n	80081b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d002      	beq.n	8007f80 <USBD_StdEPReq+0x6e>
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d016      	beq.n	8007fac <USBD_StdEPReq+0x9a>
 8007f7e:	e02c      	b.n	8007fda <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00d      	beq.n	8007fa2 <USBD_StdEPReq+0x90>
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b80      	cmp	r3, #128	; 0x80
 8007f8a:	d00a      	beq.n	8007fa2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f001 f96d 	bl	8009270 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f96:	2180      	movs	r1, #128	; 0x80
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f969 	bl	8009270 <USBD_LL_StallEP>
 8007f9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fa0:	e020      	b.n	8007fe4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fc45 	bl	8008834 <USBD_CtlError>
              break;
 8007faa:	e01b      	b.n	8007fe4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	885b      	ldrh	r3, [r3, #2]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10e      	bne.n	8007fd2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00b      	beq.n	8007fd2 <USBD_StdEPReq+0xc0>
 8007fba:	7bbb      	ldrb	r3, [r7, #14]
 8007fbc:	2b80      	cmp	r3, #128	; 0x80
 8007fbe:	d008      	beq.n	8007fd2 <USBD_StdEPReq+0xc0>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	88db      	ldrh	r3, [r3, #6]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d104      	bne.n	8007fd2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 f94f 	bl	8009270 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fcf9 	bl	80089ca <USBD_CtlSendStatus>

              break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fc29 	bl	8008834 <USBD_CtlError>
              break;
 8007fe2:	bf00      	nop
          }
          break;
 8007fe4:	e0ec      	b.n	80081c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d002      	beq.n	8007ff8 <USBD_StdEPReq+0xe6>
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d016      	beq.n	8008024 <USBD_StdEPReq+0x112>
 8007ff6:	e030      	b.n	800805a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00d      	beq.n	800801a <USBD_StdEPReq+0x108>
 8007ffe:	7bbb      	ldrb	r3, [r7, #14]
 8008000:	2b80      	cmp	r3, #128	; 0x80
 8008002:	d00a      	beq.n	800801a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f001 f931 	bl	8009270 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800800e:	2180      	movs	r1, #128	; 0x80
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 f92d 	bl	8009270 <USBD_LL_StallEP>
 8008016:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008018:	e025      	b.n	8008066 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fc09 	bl	8008834 <USBD_CtlError>
              break;
 8008022:	e020      	b.n	8008066 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	885b      	ldrh	r3, [r3, #2]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11b      	bne.n	8008064 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f001 f937 	bl	80092ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fcc2 	bl	80089ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
 8008054:	4603      	mov	r3, r0
 8008056:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008058:	e004      	b.n	8008064 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fbe9 	bl	8008834 <USBD_CtlError>
              break;
 8008062:	e000      	b.n	8008066 <USBD_StdEPReq+0x154>
              break;
 8008064:	bf00      	nop
          }
          break;
 8008066:	e0ab      	b.n	80081c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b02      	cmp	r3, #2
 8008072:	d002      	beq.n	800807a <USBD_StdEPReq+0x168>
 8008074:	2b03      	cmp	r3, #3
 8008076:	d032      	beq.n	80080de <USBD_StdEPReq+0x1cc>
 8008078:	e097      	b.n	80081aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d007      	beq.n	8008090 <USBD_StdEPReq+0x17e>
 8008080:	7bbb      	ldrb	r3, [r7, #14]
 8008082:	2b80      	cmp	r3, #128	; 0x80
 8008084:	d004      	beq.n	8008090 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fbd3 	bl	8008834 <USBD_CtlError>
                break;
 800808e:	e091      	b.n	80081b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da0b      	bge.n	80080b0 <USBD_StdEPReq+0x19e>
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	3310      	adds	r3, #16
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	4413      	add	r3, r2
 80080ac:	3304      	adds	r3, #4
 80080ae:	e00b      	b.n	80080c8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
 80080b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4413      	add	r3, r2
 80080c6:	3304      	adds	r3, #4
 80080c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2202      	movs	r2, #2
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fc1d 	bl	8008916 <USBD_CtlSendData>
              break;
 80080dc:	e06a      	b.n	80081b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	da11      	bge.n	800810a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
 80080e8:	f003 020f 	and.w	r2, r3, #15
 80080ec:	6879      	ldr	r1, [r7, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	440b      	add	r3, r1
 80080f8:	3324      	adds	r3, #36	; 0x24
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d117      	bne.n	8008130 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fb96 	bl	8008834 <USBD_CtlError>
                  break;
 8008108:	e054      	b.n	80081b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	f003 020f 	and.w	r2, r3, #15
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	440b      	add	r3, r1
 800811c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d104      	bne.n	8008130 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fb83 	bl	8008834 <USBD_CtlError>
                  break;
 800812e:	e041      	b.n	80081b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008130:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008134:	2b00      	cmp	r3, #0
 8008136:	da0b      	bge.n	8008150 <USBD_StdEPReq+0x23e>
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	3310      	adds	r3, #16
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	4413      	add	r3, r2
 800814c:	3304      	adds	r3, #4
 800814e:	e00b      	b.n	8008168 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	4413      	add	r3, r2
 8008166:	3304      	adds	r3, #4
 8008168:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <USBD_StdEPReq+0x264>
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d103      	bne.n	800817e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	e00e      	b.n	800819c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f001 f8b2 	bl	80092ec <USBD_LL_IsStallEP>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2201      	movs	r2, #1
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	e002      	b.n	800819c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2202      	movs	r2, #2
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fbb7 	bl	8008916 <USBD_CtlSendData>
              break;
 80081a8:	e004      	b.n	80081b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fb41 	bl	8008834 <USBD_CtlError>
              break;
 80081b2:	bf00      	nop
          }
          break;
 80081b4:	e004      	b.n	80081c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80081b6:	6839      	ldr	r1, [r7, #0]
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fb3b 	bl	8008834 <USBD_CtlError>
          break;
 80081be:	bf00      	nop
      }
      break;
 80081c0:	e004      	b.n	80081cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 fb35 	bl	8008834 <USBD_CtlError>
      break;
 80081ca:	bf00      	nop
  }

  return ret;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081ea:	2300      	movs	r3, #0
 80081ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	885b      	ldrh	r3, [r3, #2]
 80081f2:	0a1b      	lsrs	r3, r3, #8
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	3b01      	subs	r3, #1
 80081f8:	2b06      	cmp	r3, #6
 80081fa:	f200 8128 	bhi.w	800844e <USBD_GetDescriptor+0x276>
 80081fe:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <USBD_GetDescriptor+0x2c>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	08008221 	.word	0x08008221
 8008208:	08008239 	.word	0x08008239
 800820c:	08008279 	.word	0x08008279
 8008210:	0800844f 	.word	0x0800844f
 8008214:	0800844f 	.word	0x0800844f
 8008218:	080083ef 	.word	0x080083ef
 800821c:	0800841b 	.word	0x0800841b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	f107 0108 	add.w	r1, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
      break;
 8008236:	e112      	b.n	800845e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	7c1b      	ldrb	r3, [r3, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10d      	bne.n	800825c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	f107 0208 	add.w	r2, r7, #8
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
 8008250:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	2202      	movs	r2, #2
 8008258:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800825a:	e100      	b.n	800845e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	f107 0208 	add.w	r2, r7, #8
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
 800826c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3301      	adds	r3, #1
 8008272:	2202      	movs	r2, #2
 8008274:	701a      	strb	r2, [r3, #0]
      break;
 8008276:	e0f2      	b.n	800845e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	885b      	ldrh	r3, [r3, #2]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b05      	cmp	r3, #5
 8008280:	f200 80ac 	bhi.w	80083dc <USBD_GetDescriptor+0x204>
 8008284:	a201      	add	r2, pc, #4	; (adr r2, 800828c <USBD_GetDescriptor+0xb4>)
 8008286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828a:	bf00      	nop
 800828c:	080082a5 	.word	0x080082a5
 8008290:	080082d9 	.word	0x080082d9
 8008294:	0800830d 	.word	0x0800830d
 8008298:	08008341 	.word	0x08008341
 800829c:	08008375 	.word	0x08008375
 80082a0:	080083a9 	.word	0x080083a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	7c12      	ldrb	r2, [r2, #16]
 80082bc:	f107 0108 	add.w	r1, r7, #8
 80082c0:	4610      	mov	r0, r2
 80082c2:	4798      	blx	r3
 80082c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082c6:	e091      	b.n	80083ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fab2 	bl	8008834 <USBD_CtlError>
            err++;
 80082d0:	7afb      	ldrb	r3, [r7, #11]
 80082d2:	3301      	adds	r3, #1
 80082d4:	72fb      	strb	r3, [r7, #11]
          break;
 80082d6:	e089      	b.n	80083ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	7c12      	ldrb	r2, [r2, #16]
 80082f0:	f107 0108 	add.w	r1, r7, #8
 80082f4:	4610      	mov	r0, r2
 80082f6:	4798      	blx	r3
 80082f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fa:	e077      	b.n	80083ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa98 	bl	8008834 <USBD_CtlError>
            err++;
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	3301      	adds	r3, #1
 8008308:	72fb      	strb	r3, [r7, #11]
          break;
 800830a:	e06f      	b.n	80083ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00b      	beq.n	8008330 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	7c12      	ldrb	r2, [r2, #16]
 8008324:	f107 0108 	add.w	r1, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
 800832c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800832e:	e05d      	b.n	80083ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fa7e 	bl	8008834 <USBD_CtlError>
            err++;
 8008338:	7afb      	ldrb	r3, [r7, #11]
 800833a:	3301      	adds	r3, #1
 800833c:	72fb      	strb	r3, [r7, #11]
          break;
 800833e:	e055      	b.n	80083ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	7c12      	ldrb	r2, [r2, #16]
 8008358:	f107 0108 	add.w	r1, r7, #8
 800835c:	4610      	mov	r0, r2
 800835e:	4798      	blx	r3
 8008360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008362:	e043      	b.n	80083ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa64 	bl	8008834 <USBD_CtlError>
            err++;
 800836c:	7afb      	ldrb	r3, [r7, #11]
 800836e:	3301      	adds	r3, #1
 8008370:	72fb      	strb	r3, [r7, #11]
          break;
 8008372:	e03b      	b.n	80083ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	7c12      	ldrb	r2, [r2, #16]
 800838c:	f107 0108 	add.w	r1, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008396:	e029      	b.n	80083ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa4a 	bl	8008834 <USBD_CtlError>
            err++;
 80083a0:	7afb      	ldrb	r3, [r7, #11]
 80083a2:	3301      	adds	r3, #1
 80083a4:	72fb      	strb	r3, [r7, #11]
          break;
 80083a6:	e021      	b.n	80083ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	7c12      	ldrb	r2, [r2, #16]
 80083c0:	f107 0108 	add.w	r1, r7, #8
 80083c4:	4610      	mov	r0, r2
 80083c6:	4798      	blx	r3
 80083c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ca:	e00f      	b.n	80083ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fa30 	bl	8008834 <USBD_CtlError>
            err++;
 80083d4:	7afb      	ldrb	r3, [r7, #11]
 80083d6:	3301      	adds	r3, #1
 80083d8:	72fb      	strb	r3, [r7, #11]
          break;
 80083da:	e007      	b.n	80083ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa28 	bl	8008834 <USBD_CtlError>
          err++;
 80083e4:	7afb      	ldrb	r3, [r7, #11]
 80083e6:	3301      	adds	r3, #1
 80083e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80083ea:	bf00      	nop
      }
      break;
 80083ec:	e037      	b.n	800845e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	7c1b      	ldrb	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d109      	bne.n	800840a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fe:	f107 0208 	add.w	r2, r7, #8
 8008402:	4610      	mov	r0, r2
 8008404:	4798      	blx	r3
 8008406:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008408:	e029      	b.n	800845e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fa11 	bl	8008834 <USBD_CtlError>
        err++;
 8008412:	7afb      	ldrb	r3, [r7, #11]
 8008414:	3301      	adds	r3, #1
 8008416:	72fb      	strb	r3, [r7, #11]
      break;
 8008418:	e021      	b.n	800845e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	7c1b      	ldrb	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10d      	bne.n	800843e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	f107 0208 	add.w	r2, r7, #8
 800842e:	4610      	mov	r0, r2
 8008430:	4798      	blx	r3
 8008432:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	3301      	adds	r3, #1
 8008438:	2207      	movs	r2, #7
 800843a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800843c:	e00f      	b.n	800845e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f9f7 	bl	8008834 <USBD_CtlError>
        err++;
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	3301      	adds	r3, #1
 800844a:	72fb      	strb	r3, [r7, #11]
      break;
 800844c:	e007      	b.n	800845e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f9ef 	bl	8008834 <USBD_CtlError>
      err++;
 8008456:	7afb      	ldrb	r3, [r7, #11]
 8008458:	3301      	adds	r3, #1
 800845a:	72fb      	strb	r3, [r7, #11]
      break;
 800845c:	bf00      	nop
  }

  if (err != 0U)
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d11e      	bne.n	80084a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	88db      	ldrh	r3, [r3, #6]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d016      	beq.n	800849a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800846c:	893b      	ldrh	r3, [r7, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00e      	beq.n	8008490 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	88da      	ldrh	r2, [r3, #6]
 8008476:	893b      	ldrh	r3, [r7, #8]
 8008478:	4293      	cmp	r3, r2
 800847a:	bf28      	it	cs
 800847c:	4613      	movcs	r3, r2
 800847e:	b29b      	uxth	r3, r3
 8008480:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008482:	893b      	ldrh	r3, [r7, #8]
 8008484:	461a      	mov	r2, r3
 8008486:	68f9      	ldr	r1, [r7, #12]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fa44 	bl	8008916 <USBD_CtlSendData>
 800848e:	e009      	b.n	80084a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008490:	6839      	ldr	r1, [r7, #0]
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 f9ce 	bl	8008834 <USBD_CtlError>
 8008498:	e004      	b.n	80084a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa95 	bl	80089ca <USBD_CtlSendStatus>
 80084a0:	e000      	b.n	80084a4 <USBD_GetDescriptor+0x2cc>
    return;
 80084a2:	bf00      	nop
  }
}
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop

080084ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	889b      	ldrh	r3, [r3, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d131      	bne.n	8008522 <USBD_SetAddress+0x76>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	88db      	ldrh	r3, [r3, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d12d      	bne.n	8008522 <USBD_SetAddress+0x76>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	885b      	ldrh	r3, [r3, #2]
 80084ca:	2b7f      	cmp	r3, #127	; 0x7f
 80084cc:	d829      	bhi.n	8008522 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d104      	bne.n	80084f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f9a3 	bl	8008834 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ee:	e01d      	b.n	800852c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	7bfa      	ldrb	r2, [r7, #15]
 80084f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 ff21 	bl	8009344 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa61 	bl	80089ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008508:	7bfb      	ldrb	r3, [r7, #15]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2202      	movs	r2, #2
 8008512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008516:	e009      	b.n	800852c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008520:	e004      	b.n	800852c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f985 	bl	8008834 <USBD_CtlError>
  }
}
 800852a:	bf00      	nop
 800852c:	bf00      	nop
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	885b      	ldrh	r3, [r3, #2]
 8008546:	b2da      	uxtb	r2, r3
 8008548:	4b4c      	ldr	r3, [pc, #304]	; (800867c <USBD_SetConfig+0x148>)
 800854a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800854c:	4b4b      	ldr	r3, [pc, #300]	; (800867c <USBD_SetConfig+0x148>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d905      	bls.n	8008560 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f96c 	bl	8008834 <USBD_CtlError>
    return USBD_FAIL;
 800855c:	2303      	movs	r3, #3
 800855e:	e088      	b.n	8008672 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b02      	cmp	r3, #2
 800856a:	d002      	beq.n	8008572 <USBD_SetConfig+0x3e>
 800856c:	2b03      	cmp	r3, #3
 800856e:	d025      	beq.n	80085bc <USBD_SetConfig+0x88>
 8008570:	e071      	b.n	8008656 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008572:	4b42      	ldr	r3, [pc, #264]	; (800867c <USBD_SetConfig+0x148>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d01c      	beq.n	80085b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800857a:	4b40      	ldr	r3, [pc, #256]	; (800867c <USBD_SetConfig+0x148>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008584:	4b3d      	ldr	r3, [pc, #244]	; (800867c <USBD_SetConfig+0x148>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	4619      	mov	r1, r3
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f7ff f948 	bl	8007820 <USBD_SetClassConfig>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f949 	bl	8008834 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085a2:	e065      	b.n	8008670 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fa10 	bl	80089ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2203      	movs	r2, #3
 80085ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085b2:	e05d      	b.n	8008670 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fa08 	bl	80089ca <USBD_CtlSendStatus>
      break;
 80085ba:	e059      	b.n	8008670 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085bc:	4b2f      	ldr	r3, [pc, #188]	; (800867c <USBD_SetConfig+0x148>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d112      	bne.n	80085ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085cc:	4b2b      	ldr	r3, [pc, #172]	; (800867c <USBD_SetConfig+0x148>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085d6:	4b29      	ldr	r3, [pc, #164]	; (800867c <USBD_SetConfig+0x148>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff f93b 	bl	8007858 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f9f1 	bl	80089ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085e8:	e042      	b.n	8008670 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80085ea:	4b24      	ldr	r3, [pc, #144]	; (800867c <USBD_SetConfig+0x148>)
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d02a      	beq.n	800864e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7ff f929 	bl	8007858 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008606:	4b1d      	ldr	r3, [pc, #116]	; (800867c <USBD_SetConfig+0x148>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008610:	4b1a      	ldr	r3, [pc, #104]	; (800867c <USBD_SetConfig+0x148>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff f902 	bl	8007820 <USBD_SetClassConfig>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00f      	beq.n	8008646 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f903 	bl	8008834 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff f90e 	bl	8007858 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008644:	e014      	b.n	8008670 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f9bf 	bl	80089ca <USBD_CtlSendStatus>
      break;
 800864c:	e010      	b.n	8008670 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f9bb 	bl	80089ca <USBD_CtlSendStatus>
      break;
 8008654:	e00c      	b.n	8008670 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f8eb 	bl	8008834 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <USBD_SetConfig+0x148>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff f8f7 	bl	8007858 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800866a:	2303      	movs	r3, #3
 800866c:	73fb      	strb	r3, [r7, #15]
      break;
 800866e:	bf00      	nop
  }

  return ret;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	200001a0 	.word	0x200001a0

08008680 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	88db      	ldrh	r3, [r3, #6]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d004      	beq.n	800869c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f8cd 	bl	8008834 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800869a:	e023      	b.n	80086e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	dc02      	bgt.n	80086ae <USBD_GetConfig+0x2e>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	dc03      	bgt.n	80086b4 <USBD_GetConfig+0x34>
 80086ac:	e015      	b.n	80086da <USBD_GetConfig+0x5a>
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d00b      	beq.n	80086ca <USBD_GetConfig+0x4a>
 80086b2:	e012      	b.n	80086da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	3308      	adds	r3, #8
 80086be:	2201      	movs	r2, #1
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f927 	bl	8008916 <USBD_CtlSendData>
        break;
 80086c8:	e00c      	b.n	80086e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3304      	adds	r3, #4
 80086ce:	2201      	movs	r2, #1
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f91f 	bl	8008916 <USBD_CtlSendData>
        break;
 80086d8:	e004      	b.n	80086e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f8a9 	bl	8008834 <USBD_CtlError>
        break;
 80086e2:	bf00      	nop
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	3b01      	subs	r3, #1
 8008700:	2b02      	cmp	r3, #2
 8008702:	d81e      	bhi.n	8008742 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	88db      	ldrh	r3, [r3, #6]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d004      	beq.n	8008716 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f890 	bl	8008834 <USBD_CtlError>
        break;
 8008714:	e01a      	b.n	800874c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	f043 0202 	orr.w	r2, r3, #2
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	330c      	adds	r3, #12
 8008736:	2202      	movs	r2, #2
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f8eb 	bl	8008916 <USBD_CtlSendData>
      break;
 8008740:	e004      	b.n	800874c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f875 	bl	8008834 <USBD_CtlError>
      break;
 800874a:	bf00      	nop
  }
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	885b      	ldrh	r3, [r3, #2]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d106      	bne.n	8008774 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f92b 	bl	80089ca <USBD_CtlSendStatus>
  }
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800878c:	b2db      	uxtb	r3, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	2b02      	cmp	r3, #2
 8008792:	d80b      	bhi.n	80087ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	885b      	ldrh	r3, [r3, #2]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d10c      	bne.n	80087b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f910 	bl	80089ca <USBD_CtlSendStatus>
      }
      break;
 80087aa:	e004      	b.n	80087b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f840 	bl	8008834 <USBD_CtlError>
      break;
 80087b4:	e000      	b.n	80087b8 <USBD_ClrFeature+0x3c>
      break;
 80087b6:	bf00      	nop
  }
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	781a      	ldrb	r2, [r3, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	781a      	ldrb	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3301      	adds	r3, #1
 80087e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7ff fabb 	bl	8007d66 <SWAPBYTE>
 80087f0:	4603      	mov	r3, r0
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	3301      	adds	r3, #1
 80087fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff faae 	bl	8007d66 <SWAPBYTE>
 800880a:	4603      	mov	r3, r0
 800880c:	461a      	mov	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3301      	adds	r3, #1
 8008816:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3301      	adds	r3, #1
 800881c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f7ff faa1 	bl	8007d66 <SWAPBYTE>
 8008824:	4603      	mov	r3, r0
 8008826:	461a      	mov	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	80da      	strh	r2, [r3, #6]
}
 800882c:	bf00      	nop
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800883e:	2180      	movs	r1, #128	; 0x80
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fd15 	bl	8009270 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008846:	2100      	movs	r1, #0
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fd11 	bl	8009270 <USBD_LL_StallEP>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b086      	sub	sp, #24
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d036      	beq.n	80088da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008870:	6938      	ldr	r0, [r7, #16]
 8008872:	f000 f836 	bl	80088e2 <USBD_GetLen>
 8008876:	4603      	mov	r3, r0
 8008878:	3301      	adds	r3, #1
 800887a:	b29b      	uxth	r3, r3
 800887c:	005b      	lsls	r3, r3, #1
 800887e:	b29a      	uxth	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	4413      	add	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	7812      	ldrb	r2, [r2, #0]
 800888e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	3301      	adds	r3, #1
 8008894:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	4413      	add	r3, r2
 800889c:	2203      	movs	r2, #3
 800889e:	701a      	strb	r2, [r3, #0]
  idx++;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	3301      	adds	r3, #1
 80088a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088a6:	e013      	b.n	80088d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4413      	add	r3, r2
 80088ae:	693a      	ldr	r2, [r7, #16]
 80088b0:	7812      	ldrb	r2, [r2, #0]
 80088b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	3301      	adds	r3, #1
 80088b8:	613b      	str	r3, [r7, #16]
    idx++;
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	3301      	adds	r3, #1
 80088be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	4413      	add	r3, r2
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	3301      	adds	r3, #1
 80088ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e7      	bne.n	80088a8 <USBD_GetString+0x52>
 80088d8:	e000      	b.n	80088dc <USBD_GetString+0x86>
    return;
 80088da:	bf00      	nop
  }
}
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088f2:	e005      	b.n	8008900 <USBD_GetLen+0x1e>
  {
    len++;
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	3301      	adds	r3, #1
 80088f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	3301      	adds	r3, #1
 80088fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1f5      	bne.n	80088f4 <USBD_GetLen+0x12>
  }

  return len;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2202      	movs	r2, #2
 8008926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	2100      	movs	r1, #0
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 fd20 	bl	8009382 <USBD_LL_Transmit>

  return USBD_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	2100      	movs	r1, #0
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fd0f 	bl	8009382 <USBD_LL_Transmit>

  return USBD_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2203      	movs	r2, #3
 800897e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	2100      	movs	r1, #0
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fd13 	bl	80093c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	2100      	movs	r1, #0
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fd02 	bl	80093c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2204      	movs	r2, #4
 80089d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089da:	2300      	movs	r3, #0
 80089dc:	2200      	movs	r2, #0
 80089de:	2100      	movs	r1, #0
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fcce 	bl	8009382 <USBD_LL_Transmit>

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2205      	movs	r2, #5
 80089fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a00:	2300      	movs	r3, #0
 8008a02:	2200      	movs	r2, #0
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fcdc 	bl	80093c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
	...

08008a18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	4913      	ldr	r1, [pc, #76]	; (8008a6c <MX_USB_DEVICE_Init+0x54>)
 8008a20:	4813      	ldr	r0, [pc, #76]	; (8008a70 <MX_USB_DEVICE_Init+0x58>)
 8008a22:	f7fe fe8f 	bl	8007744 <USBD_Init>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a2c:	f7f8 f80e 	bl	8000a4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a30:	4910      	ldr	r1, [pc, #64]	; (8008a74 <MX_USB_DEVICE_Init+0x5c>)
 8008a32:	480f      	ldr	r0, [pc, #60]	; (8008a70 <MX_USB_DEVICE_Init+0x58>)
 8008a34:	f7fe feb6 	bl	80077a4 <USBD_RegisterClass>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a3e:	f7f8 f805 	bl	8000a4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a42:	490d      	ldr	r1, [pc, #52]	; (8008a78 <MX_USB_DEVICE_Init+0x60>)
 8008a44:	480a      	ldr	r0, [pc, #40]	; (8008a70 <MX_USB_DEVICE_Init+0x58>)
 8008a46:	f7fe fdd7 	bl	80075f8 <USBD_CDC_RegisterInterface>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a50:	f7f7 fffc 	bl	8000a4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a54:	4806      	ldr	r0, [pc, #24]	; (8008a70 <MX_USB_DEVICE_Init+0x58>)
 8008a56:	f7fe fecc 	bl	80077f2 <USBD_Start>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a60:	f7f7 fff4 	bl	8000a4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008a64:	f7f9 ff28 	bl	80028b8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a68:	bf00      	nop
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	20000134 	.word	0x20000134
 8008a70:	20000480 	.word	0x20000480
 8008a74:	2000001c 	.word	0x2000001c
 8008a78:	20000120 	.word	0x20000120

08008a7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a80:	2200      	movs	r2, #0
 8008a82:	4905      	ldr	r1, [pc, #20]	; (8008a98 <CDC_Init_FS+0x1c>)
 8008a84:	4805      	ldr	r0, [pc, #20]	; (8008a9c <CDC_Init_FS+0x20>)
 8008a86:	f7fe fdcc 	bl	8007622 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a8a:	4905      	ldr	r1, [pc, #20]	; (8008aa0 <CDC_Init_FS+0x24>)
 8008a8c:	4803      	ldr	r0, [pc, #12]	; (8008a9c <CDC_Init_FS+0x20>)
 8008a8e:	f7fe fde6 	bl	800765e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20000f50 	.word	0x20000f50
 8008a9c:	20000480 	.word	0x20000480
 8008aa0:	20000750 	.word	0x20000750

08008aa4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008aa8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	6039      	str	r1, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	2b23      	cmp	r3, #35	; 0x23
 8008ac8:	d84a      	bhi.n	8008b60 <CDC_Control_FS+0xac>
 8008aca:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <CDC_Control_FS+0x1c>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008b61 	.word	0x08008b61
 8008ad4:	08008b61 	.word	0x08008b61
 8008ad8:	08008b61 	.word	0x08008b61
 8008adc:	08008b61 	.word	0x08008b61
 8008ae0:	08008b61 	.word	0x08008b61
 8008ae4:	08008b61 	.word	0x08008b61
 8008ae8:	08008b61 	.word	0x08008b61
 8008aec:	08008b61 	.word	0x08008b61
 8008af0:	08008b61 	.word	0x08008b61
 8008af4:	08008b61 	.word	0x08008b61
 8008af8:	08008b61 	.word	0x08008b61
 8008afc:	08008b61 	.word	0x08008b61
 8008b00:	08008b61 	.word	0x08008b61
 8008b04:	08008b61 	.word	0x08008b61
 8008b08:	08008b61 	.word	0x08008b61
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008b61 	.word	0x08008b61
 8008b14:	08008b61 	.word	0x08008b61
 8008b18:	08008b61 	.word	0x08008b61
 8008b1c:	08008b61 	.word	0x08008b61
 8008b20:	08008b61 	.word	0x08008b61
 8008b24:	08008b61 	.word	0x08008b61
 8008b28:	08008b61 	.word	0x08008b61
 8008b2c:	08008b61 	.word	0x08008b61
 8008b30:	08008b61 	.word	0x08008b61
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	08008b61 	.word	0x08008b61
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b61 	.word	0x08008b61
 8008b44:	08008b61 	.word	0x08008b61
 8008b48:	08008b61 	.word	0x08008b61
 8008b4c:	08008b61 	.word	0x08008b61
 8008b50:	08008b61 	.word	0x08008b61
 8008b54:	08008b61 	.word	0x08008b61
 8008b58:	08008b61 	.word	0x08008b61
 8008b5c:	08008b61 	.word	0x08008b61
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b60:	bf00      	nop
  }

  return (USBD_OK);
 8008b62:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	4805      	ldr	r0, [pc, #20]	; (8008b94 <CDC_Receive_FS+0x24>)
 8008b7e:	f7fe fd6e 	bl	800765e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b82:	4804      	ldr	r0, [pc, #16]	; (8008b94 <CDC_Receive_FS+0x24>)
 8008b84:	f7fe fdb4 	bl	80076f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b88:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20000480 	.word	0x20000480

08008b98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ba8:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <CDC_Transmit_FS+0x48>)
 8008baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e00b      	b.n	8008bd6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008bbe:	887b      	ldrh	r3, [r7, #2]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	6879      	ldr	r1, [r7, #4]
 8008bc4:	4806      	ldr	r0, [pc, #24]	; (8008be0 <CDC_Transmit_FS+0x48>)
 8008bc6:	f7fe fd2c 	bl	8007622 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008bca:	4805      	ldr	r0, [pc, #20]	; (8008be0 <CDC_Transmit_FS+0x48>)
 8008bcc:	f7fe fd60 	bl	8007690 <USBD_CDC_TransmitPacket>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000480 	.word	0x20000480

08008be4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
	...

08008c08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	4603      	mov	r3, r0
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2212      	movs	r2, #18
 8008c18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c1a:	4b03      	ldr	r3, [pc, #12]	; (8008c28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	20000150 	.word	0x20000150

08008c2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2204      	movs	r2, #4
 8008c3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c3e:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	20000164 	.word	0x20000164

08008c50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d105      	bne.n	8008c6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	4907      	ldr	r1, [pc, #28]	; (8008c84 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c66:	4808      	ldr	r0, [pc, #32]	; (8008c88 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c68:	f7ff fdf5 	bl	8008856 <USBD_GetString>
 8008c6c:	e004      	b.n	8008c78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	4904      	ldr	r1, [pc, #16]	; (8008c84 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c72:	4805      	ldr	r0, [pc, #20]	; (8008c88 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c74:	f7ff fdef 	bl	8008856 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c78:	4b02      	ldr	r3, [pc, #8]	; (8008c84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20001750 	.word	0x20001750
 8008c88:	08009524 	.word	0x08009524

08008c8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	4904      	ldr	r1, [pc, #16]	; (8008cac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c9c:	4804      	ldr	r0, [pc, #16]	; (8008cb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c9e:	f7ff fdda 	bl	8008856 <USBD_GetString>
  return USBD_StrDesc;
 8008ca2:	4b02      	ldr	r3, [pc, #8]	; (8008cac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20001750 	.word	0x20001750
 8008cb0:	0800953c 	.word	0x0800953c

08008cb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	221a      	movs	r2, #26
 8008cc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008cc6:	f000 f843 	bl	8008d50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008cca:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20000168 	.word	0x20000168

08008cd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008ce4:	79fb      	ldrb	r3, [r7, #7]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d105      	bne.n	8008cf6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	4907      	ldr	r1, [pc, #28]	; (8008d0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cee:	4808      	ldr	r0, [pc, #32]	; (8008d10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cf0:	f7ff fdb1 	bl	8008856 <USBD_GetString>
 8008cf4:	e004      	b.n	8008d00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	4904      	ldr	r1, [pc, #16]	; (8008d0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cfa:	4805      	ldr	r0, [pc, #20]	; (8008d10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cfc:	f7ff fdab 	bl	8008856 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d00:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20001750 	.word	0x20001750
 8008d10:	08009550 	.word	0x08009550

08008d14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	4907      	ldr	r1, [pc, #28]	; (8008d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d2a:	4808      	ldr	r0, [pc, #32]	; (8008d4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d2c:	f7ff fd93 	bl	8008856 <USBD_GetString>
 8008d30:	e004      	b.n	8008d3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	4904      	ldr	r1, [pc, #16]	; (8008d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d36:	4805      	ldr	r0, [pc, #20]	; (8008d4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d38:	f7ff fd8d 	bl	8008856 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20001750 	.word	0x20001750
 8008d4c:	0800955c 	.word	0x0800955c

08008d50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d56:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <Get_SerialNum+0x44>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d5c:	4b0e      	ldr	r3, [pc, #56]	; (8008d98 <Get_SerialNum+0x48>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <Get_SerialNum+0x4c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d009      	beq.n	8008d8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d76:	2208      	movs	r2, #8
 8008d78:	4909      	ldr	r1, [pc, #36]	; (8008da0 <Get_SerialNum+0x50>)
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f814 	bl	8008da8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d80:	2204      	movs	r2, #4
 8008d82:	4908      	ldr	r1, [pc, #32]	; (8008da4 <Get_SerialNum+0x54>)
 8008d84:	68b8      	ldr	r0, [r7, #8]
 8008d86:	f000 f80f 	bl	8008da8 <IntToUnicode>
  }
}
 8008d8a:	bf00      	nop
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	1ff1e800 	.word	0x1ff1e800
 8008d98:	1ff1e804 	.word	0x1ff1e804
 8008d9c:	1ff1e808 	.word	0x1ff1e808
 8008da0:	2000016a 	.word	0x2000016a
 8008da4:	2000017a 	.word	0x2000017a

08008da8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75fb      	strb	r3, [r7, #23]
 8008dbe:	e027      	b.n	8008e10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	0f1b      	lsrs	r3, r3, #28
 8008dc4:	2b09      	cmp	r3, #9
 8008dc6:	d80b      	bhi.n	8008de0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	0f1b      	lsrs	r3, r3, #28
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	7dfb      	ldrb	r3, [r7, #23]
 8008dd0:	005b      	lsls	r3, r3, #1
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	440b      	add	r3, r1
 8008dd8:	3230      	adds	r2, #48	; 0x30
 8008dda:	b2d2      	uxtb	r2, r2
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	e00a      	b.n	8008df6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	0f1b      	lsrs	r3, r3, #28
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	4619      	mov	r1, r3
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	440b      	add	r3, r1
 8008df0:	3237      	adds	r2, #55	; 0x37
 8008df2:	b2d2      	uxtb	r2, r2
 8008df4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	011b      	lsls	r3, r3, #4
 8008dfa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	3301      	adds	r3, #1
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	4413      	add	r3, r2
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	75fb      	strb	r3, [r7, #23]
 8008e10:	7dfa      	ldrb	r2, [r7, #23]
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d3d3      	bcc.n	8008dc0 <IntToUnicode+0x18>
  }
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	371c      	adds	r7, #28
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
	...

08008e28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b0b8      	sub	sp, #224	; 0xe0
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e30:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	605a      	str	r2, [r3, #4]
 8008e3a:	609a      	str	r2, [r3, #8]
 8008e3c:	60da      	str	r2, [r3, #12]
 8008e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e40:	f107 0310 	add.w	r3, r7, #16
 8008e44:	22bc      	movs	r2, #188	; 0xbc
 8008e46:	2100      	movs	r1, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 fb57 	bl	80094fc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a33      	ldr	r2, [pc, #204]	; (8008f20 <HAL_PCD_MspInit+0xf8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d15e      	bne.n	8008f16 <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008e58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008e5e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8008e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008e66:	f107 0310 	add.w	r3, r7, #16
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7fa fd0e 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8008e76:	f7f7 fde9 	bl	8000a4c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008e7a:	f7f9 fd1d 	bl	80028b8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e7e:	4b29      	ldr	r3, [pc, #164]	; (8008f24 <HAL_PCD_MspInit+0xfc>)
 8008e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e84:	4a27      	ldr	r2, [pc, #156]	; (8008f24 <HAL_PCD_MspInit+0xfc>)
 8008e86:	f043 0301 	orr.w	r3, r3, #1
 8008e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008e8e:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <HAL_PCD_MspInit+0xfc>)
 8008e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8008e9c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ebc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4819      	ldr	r0, [pc, #100]	; (8008f28 <HAL_PCD_MspInit+0x100>)
 8008ec4:	f7f8 f91a 	bl	80010fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4811      	ldr	r0, [pc, #68]	; (8008f28 <HAL_PCD_MspInit+0x100>)
 8008ee4:	f7f8 f90a 	bl	80010fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <HAL_PCD_MspInit+0xfc>)
 8008eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008eee:	4a0d      	ldr	r2, [pc, #52]	; (8008f24 <HAL_PCD_MspInit+0xfc>)
 8008ef0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ef4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <HAL_PCD_MspInit+0xfc>)
 8008efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f02:	60bb      	str	r3, [r7, #8]
 8008f04:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f06:	2200      	movs	r2, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	2065      	movs	r0, #101	; 0x65
 8008f0c:	f7f8 f8c1 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f10:	2065      	movs	r0, #101	; 0x65
 8008f12:	f7f8 f8d8 	bl	80010c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f16:	bf00      	nop
 8008f18:	37e0      	adds	r7, #224	; 0xe0
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	40080000 	.word	0x40080000
 8008f24:	58024400 	.word	0x58024400
 8008f28:	58020000 	.word	0x58020000

08008f2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f40:	4619      	mov	r1, r3
 8008f42:	4610      	mov	r0, r2
 8008f44:	f7fe fca0 	bl	8007888 <USBD_LL_SetupStage>
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f62:	78fa      	ldrb	r2, [r7, #3]
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	1a9b      	subs	r3, r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	f7fe fcda 	bl	8007932 <USBD_LL_DataOutStage>
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	460b      	mov	r3, r1
 8008f90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	1a9b      	subs	r3, r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	440b      	add	r3, r1
 8008fa6:	3348      	adds	r3, #72	; 0x48
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	4619      	mov	r1, r3
 8008fae:	f7fe fd23 	bl	80079f8 <USBD_LL_DataInStage>
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe fe37 	bl	8007c3c <USBD_LL_SOF>
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d102      	bne.n	8008ff0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008fea:	2300      	movs	r3, #0
 8008fec:	73fb      	strb	r3, [r7, #15]
 8008fee:	e008      	b.n	8009002 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d102      	bne.n	8008ffe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	73fb      	strb	r3, [r7, #15]
 8008ffc:	e001      	b.n	8009002 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008ffe:	f7f7 fd25 	bl	8000a4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009008:	7bfa      	ldrb	r2, [r7, #15]
 800900a:	4611      	mov	r1, r2
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fdd7 	bl	8007bc0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fd83 	bl	8007b24 <USBD_LL_Reset>
}
 800901e:	bf00      	nop
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe fdd2 	bl	8007be0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	6812      	ldr	r2, [r2, #0]
 800904a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800904e:	f043 0301 	orr.w	r3, r3, #1
 8009052:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800905c:	4b04      	ldr	r3, [pc, #16]	; (8009070 <HAL_PCD_SuspendCallback+0x48>)
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	4a03      	ldr	r2, [pc, #12]	; (8009070 <HAL_PCD_SuspendCallback+0x48>)
 8009062:	f043 0306 	orr.w	r3, r3, #6
 8009066:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009068:	bf00      	nop
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	e000ed00 	.word	0xe000ed00

08009074 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fdc2 	bl	8007c0c <USBD_LL_Resume>
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090a2:	78fa      	ldrb	r2, [r7, #3]
 80090a4:	4611      	mov	r1, r2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fe10 	bl	8007ccc <USBD_LL_IsoOUTIncomplete>
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	460b      	mov	r3, r1
 80090be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090c6:	78fa      	ldrb	r2, [r7, #3]
 80090c8:	4611      	mov	r1, r2
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fe fdd8 	bl	8007c80 <USBD_LL_IsoINIncomplete>
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fe16 	bl	8007d18 <USBD_LL_DevConnected>
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe fe13 	bl	8007d2e <USBD_LL_DevDisconnected>
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d13e      	bne.n	800919e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009120:	4a21      	ldr	r2, [pc, #132]	; (80091a8 <USBD_LL_Init+0x98>)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a1f      	ldr	r2, [pc, #124]	; (80091a8 <USBD_LL_Init+0x98>)
 800912c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009130:	4b1d      	ldr	r3, [pc, #116]	; (80091a8 <USBD_LL_Init+0x98>)
 8009132:	4a1e      	ldr	r2, [pc, #120]	; (80091ac <USBD_LL_Init+0x9c>)
 8009134:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009136:	4b1c      	ldr	r3, [pc, #112]	; (80091a8 <USBD_LL_Init+0x98>)
 8009138:	2209      	movs	r2, #9
 800913a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800913c:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <USBD_LL_Init+0x98>)
 800913e:	2202      	movs	r2, #2
 8009140:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009142:	4b19      	ldr	r3, [pc, #100]	; (80091a8 <USBD_LL_Init+0x98>)
 8009144:	2200      	movs	r2, #0
 8009146:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009148:	4b17      	ldr	r3, [pc, #92]	; (80091a8 <USBD_LL_Init+0x98>)
 800914a:	2202      	movs	r2, #2
 800914c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800914e:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <USBD_LL_Init+0x98>)
 8009150:	2200      	movs	r2, #0
 8009152:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009154:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <USBD_LL_Init+0x98>)
 8009156:	2200      	movs	r2, #0
 8009158:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800915a:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <USBD_LL_Init+0x98>)
 800915c:	2200      	movs	r2, #0
 800915e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8009160:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <USBD_LL_Init+0x98>)
 8009162:	2201      	movs	r2, #1
 8009164:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <USBD_LL_Init+0x98>)
 8009168:	2201      	movs	r2, #1
 800916a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800916c:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <USBD_LL_Init+0x98>)
 800916e:	2200      	movs	r2, #0
 8009170:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009172:	480d      	ldr	r0, [pc, #52]	; (80091a8 <USBD_LL_Init+0x98>)
 8009174:	f7f8 f98b 	bl	800148e <HAL_PCD_Init>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d001      	beq.n	8009182 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800917e:	f7f7 fc65 	bl	8000a4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009182:	2180      	movs	r1, #128	; 0x80
 8009184:	4808      	ldr	r0, [pc, #32]	; (80091a8 <USBD_LL_Init+0x98>)
 8009186:	f7f9 fb1c 	bl	80027c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800918a:	2240      	movs	r2, #64	; 0x40
 800918c:	2100      	movs	r1, #0
 800918e:	4806      	ldr	r0, [pc, #24]	; (80091a8 <USBD_LL_Init+0x98>)
 8009190:	f7f9 fad0 	bl	8002734 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009194:	2280      	movs	r2, #128	; 0x80
 8009196:	2101      	movs	r1, #1
 8009198:	4803      	ldr	r0, [pc, #12]	; (80091a8 <USBD_LL_Init+0x98>)
 800919a:	f7f9 facb 	bl	8002734 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20001950 	.word	0x20001950
 80091ac:	40080000 	.word	0x40080000

080091b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f8 fa85 	bl	80016d6 <HAL_PCD_Start>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f942 	bl	800945c <USBD_Get_USB_Status>
 80091d8:	4603      	mov	r3, r0
 80091da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	4608      	mov	r0, r1
 80091f0:	4611      	mov	r1, r2
 80091f2:	461a      	mov	r2, r3
 80091f4:	4603      	mov	r3, r0
 80091f6:	70fb      	strb	r3, [r7, #3]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70bb      	strb	r3, [r7, #2]
 80091fc:	4613      	mov	r3, r2
 80091fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800920e:	78bb      	ldrb	r3, [r7, #2]
 8009210:	883a      	ldrh	r2, [r7, #0]
 8009212:	78f9      	ldrb	r1, [r7, #3]
 8009214:	f7f8 fe96 	bl	8001f44 <HAL_PCD_EP_Open>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f91c 	bl	800945c <USBD_Get_USB_Status>
 8009224:	4603      	mov	r3, r0
 8009226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009228:	7bbb      	ldrb	r3, [r7, #14]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800924c:	78fa      	ldrb	r2, [r7, #3]
 800924e:	4611      	mov	r1, r2
 8009250:	4618      	mov	r0, r3
 8009252:	f7f8 fedf 	bl	8002014 <HAL_PCD_EP_Close>
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	4618      	mov	r0, r3
 800925e:	f000 f8fd 	bl	800945c <USBD_Get_USB_Status>
 8009262:	4603      	mov	r3, r0
 8009264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009266:	7bbb      	ldrb	r3, [r7, #14]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	4611      	mov	r1, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f7f8 ffb7 	bl	8002202 <HAL_PCD_EP_SetStall>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f8de 	bl	800945c <USBD_Get_USB_Status>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092c8:	78fa      	ldrb	r2, [r7, #3]
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7f8 fffc 	bl	80022ca <HAL_PCD_EP_ClrStall>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 f8bf 	bl	800945c <USBD_Get_USB_Status>
 80092de:	4603      	mov	r3, r0
 80092e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009304:	2b00      	cmp	r3, #0
 8009306:	da0b      	bge.n	8009320 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	4613      	mov	r3, r2
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	333e      	adds	r3, #62	; 0x3e
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	e00b      	b.n	8009338 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	4613      	mov	r3, r2
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	1a9b      	subs	r3, r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	440b      	add	r3, r1
 8009332:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009336:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800935e:	78fa      	ldrb	r2, [r7, #3]
 8009360:	4611      	mov	r1, r2
 8009362:	4618      	mov	r0, r3
 8009364:	f7f8 fdc9 	bl	8001efa <HAL_PCD_SetAddress>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f874 	bl	800945c <USBD_Get_USB_Status>
 8009374:	4603      	mov	r3, r0
 8009376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009378:	7bbb      	ldrb	r3, [r7, #14]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b086      	sub	sp, #24
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	607a      	str	r2, [r7, #4]
 800938c:	603b      	str	r3, [r7, #0]
 800938e:	460b      	mov	r3, r1
 8009390:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093a0:	7af9      	ldrb	r1, [r7, #11]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	f7f8 fee2 	bl	800216e <HAL_PCD_EP_Transmit>
 80093aa:	4603      	mov	r3, r0
 80093ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 f853 	bl	800945c <USBD_Get_USB_Status>
 80093b6:	4603      	mov	r3, r0
 80093b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	607a      	str	r2, [r7, #4]
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	460b      	mov	r3, r1
 80093d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d8:	2300      	movs	r3, #0
 80093da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093e2:	7af9      	ldrb	r1, [r7, #11]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	f7f8 fe5e 	bl	80020a8 <HAL_PCD_EP_Receive>
 80093ec:	4603      	mov	r3, r0
 80093ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 f832 	bl	800945c <USBD_Get_USB_Status>
 80093f8:	4603      	mov	r3, r0
 80093fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b082      	sub	sp, #8
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009418:	78fa      	ldrb	r2, [r7, #3]
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f7f8 fe8e 	bl	800213e <HAL_PCD_EP_GetRxCount>
 8009422:	4603      	mov	r3, r0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009434:	4b03      	ldr	r3, [pc, #12]	; (8009444 <USBD_static_malloc+0x18>)
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	200001a4 	.word	0x200001a4

08009448 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]

}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800946a:	79fb      	ldrb	r3, [r7, #7]
 800946c:	2b03      	cmp	r3, #3
 800946e:	d817      	bhi.n	80094a0 <USBD_Get_USB_Status+0x44>
 8009470:	a201      	add	r2, pc, #4	; (adr r2, 8009478 <USBD_Get_USB_Status+0x1c>)
 8009472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009476:	bf00      	nop
 8009478:	08009489 	.word	0x08009489
 800947c:	0800948f 	.word	0x0800948f
 8009480:	08009495 	.word	0x08009495
 8009484:	0800949b 	.word	0x0800949b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
    break;
 800948c:	e00b      	b.n	80094a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800948e:	2303      	movs	r3, #3
 8009490:	73fb      	strb	r3, [r7, #15]
    break;
 8009492:	e008      	b.n	80094a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
    break;
 8009498:	e005      	b.n	80094a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800949a:	2303      	movs	r3, #3
 800949c:	73fb      	strb	r3, [r7, #15]
    break;
 800949e:	e002      	b.n	80094a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094a0:	2303      	movs	r3, #3
 80094a2:	73fb      	strb	r3, [r7, #15]
    break;
 80094a4:	bf00      	nop
  }
  return usb_status;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <__libc_init_array>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4d0d      	ldr	r5, [pc, #52]	; (80094ec <__libc_init_array+0x38>)
 80094b8:	4c0d      	ldr	r4, [pc, #52]	; (80094f0 <__libc_init_array+0x3c>)
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	2600      	movs	r6, #0
 80094c0:	42a6      	cmp	r6, r4
 80094c2:	d109      	bne.n	80094d8 <__libc_init_array+0x24>
 80094c4:	4d0b      	ldr	r5, [pc, #44]	; (80094f4 <__libc_init_array+0x40>)
 80094c6:	4c0c      	ldr	r4, [pc, #48]	; (80094f8 <__libc_init_array+0x44>)
 80094c8:	f000 f820 	bl	800950c <_init>
 80094cc:	1b64      	subs	r4, r4, r5
 80094ce:	10a4      	asrs	r4, r4, #2
 80094d0:	2600      	movs	r6, #0
 80094d2:	42a6      	cmp	r6, r4
 80094d4:	d105      	bne.n	80094e2 <__libc_init_array+0x2e>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094dc:	4798      	blx	r3
 80094de:	3601      	adds	r6, #1
 80094e0:	e7ee      	b.n	80094c0 <__libc_init_array+0xc>
 80094e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e6:	4798      	blx	r3
 80094e8:	3601      	adds	r6, #1
 80094ea:	e7f2      	b.n	80094d2 <__libc_init_array+0x1e>
 80094ec:	0800957c 	.word	0x0800957c
 80094f0:	0800957c 	.word	0x0800957c
 80094f4:	0800957c 	.word	0x0800957c
 80094f8:	08009580 	.word	0x08009580

080094fc <memset>:
 80094fc:	4402      	add	r2, r0
 80094fe:	4603      	mov	r3, r0
 8009500:	4293      	cmp	r3, r2
 8009502:	d100      	bne.n	8009506 <memset+0xa>
 8009504:	4770      	bx	lr
 8009506:	f803 1b01 	strb.w	r1, [r3], #1
 800950a:	e7f9      	b.n	8009500 <memset+0x4>

0800950c <_init>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr

08009518 <_fini>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	bf00      	nop
 800951c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800951e:	bc08      	pop	{r3}
 8009520:	469e      	mov	lr, r3
 8009522:	4770      	bx	lr
