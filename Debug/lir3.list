
lir3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009194  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800942c  0800942c  0001942c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009488  08009488  00019488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000000  0800948c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001bd4  20000184  08009610  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d58  08009610  00021d58  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029076  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004694  00000000  00000000  00049228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013e8  00000000  00000000  0004d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001260  00000000  00000000  0004eca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039684  00000000  00000000  0004ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019a86  00000000  00000000  0008958c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d6b2  00000000  00000000  000a3012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  002006c4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000527c  00000000  00000000  00200718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000184 	.word	0x20000184
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009414 	.word	0x08009414

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000188 	.word	0x20000188
 80002d4:	08009414 	.word	0x08009414

080002d8 <lirCycle>:
#include "lirh743zi.h"

void lirCycle(){
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	if (PULSE_COUNT<MAX_PULSE_COUNT){
 80002dc:	4b46      	ldr	r3, [pc, #280]	; (80003f8 <lirCycle+0x120>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4b46      	ldr	r3, [pc, #280]	; (80003fc <lirCycle+0x124>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d22e      	bcs.n	8000348 <lirCycle+0x70>
//		генерация клоков
		 GPIOG->ODR ^= GPIO_ODR_OD2; // PG2 (CLCK)
 80002ea:	4b45      	ldr	r3, [pc, #276]	; (8000400 <lirCycle+0x128>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a44      	ldr	r2, [pc, #272]	; (8000400 <lirCycle+0x128>)
 80002f0:	f083 0304 	eor.w	r3, r3, #4
 80002f4:	6153      	str	r3, [r2, #20]
		 PULSE_COUNT++;
 80002f6:	4b40      	ldr	r3, [pc, #256]	; (80003f8 <lirCycle+0x120>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	3301      	adds	r3, #1
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	4b3d      	ldr	r3, [pc, #244]	; (80003f8 <lirCycle+0x120>)
 8000302:	701a      	strb	r2, [r3, #0]
//		 чтение бита в data по каждому второму нечетному клоку
		 if ((PULSE_COUNT&0x1UL)&(PULSE_COUNT>2UL)){
 8000304:	4b3c      	ldr	r3, [pc, #240]	; (80003f8 <lirCycle+0x120>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b39      	ldr	r3, [pc, #228]	; (80003f8 <lirCycle+0x120>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b02      	cmp	r3, #2
 8000318:	bf8c      	ite	hi
 800031a:	2301      	movhi	r3, #1
 800031c:	2300      	movls	r3, #0
 800031e:	b2db      	uxtb	r3, r3
 8000320:	4013      	ands	r3, r2
 8000322:	b2db      	uxtb	r3, r3
 8000324:	2b00      	cmp	r3, #0
 8000326:	d065      	beq.n	80003f4 <lirCycle+0x11c>
		 		  data<<=0x1UL;
 8000328:	4b36      	ldr	r3, [pc, #216]	; (8000404 <lirCycle+0x12c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	4a35      	ldr	r2, [pc, #212]	; (8000404 <lirCycle+0x12c>)
 8000330:	6013      	str	r3, [r2, #0]
		 		  data |= (GPIOG->IDR >> GPIO_IDR_ID3_Pos)&0x01; //read bit pg3
 8000332:	4b33      	ldr	r3, [pc, #204]	; (8000400 <lirCycle+0x128>)
 8000334:	691b      	ldr	r3, [r3, #16]
 8000336:	08db      	lsrs	r3, r3, #3
 8000338:	f003 0201 	and.w	r2, r3, #1
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <lirCycle+0x12c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4313      	orrs	r3, r2
 8000342:	4a30      	ldr	r2, [pc, #192]	; (8000404 <lirCycle+0x12c>)
 8000344:	6013      	str	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)tosend, 12);
//				обнуление
				data = 0;
				PULSE_COUNT = 0;
			}
}
 8000346:	e055      	b.n	80003f4 <lirCycle+0x11c>
				TIM1->CR1 &= ~(TIM_CR1_CEN);
 8000348:	4b2f      	ldr	r3, [pc, #188]	; (8000408 <lirCycle+0x130>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a2e      	ldr	r2, [pc, #184]	; (8000408 <lirCycle+0x130>)
 800034e:	f023 0301 	bic.w	r3, r3, #1
 8000352:	6013      	str	r3, [r2, #0]
				TIM1->CNT = 0;
 8000354:	4b2c      	ldr	r3, [pc, #176]	; (8000408 <lirCycle+0x130>)
 8000356:	2200      	movs	r2, #0
 8000358:	625a      	str	r2, [r3, #36]	; 0x24
				tbuf = DWT->CYCCNT;
 800035a:	4b2c      	ldr	r3, [pc, #176]	; (800040c <lirCycle+0x134>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	4a2c      	ldr	r2, [pc, #176]	; (8000410 <lirCycle+0x138>)
 8000360:	6013      	str	r3, [r2, #0]
				DWT->CYCCNT = 0UL;
 8000362:	4b2a      	ldr	r3, [pc, #168]	; (800040c <lirCycle+0x134>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
				tosend[0]= data&0x3FFFUL;
 8000368:	4b26      	ldr	r3, [pc, #152]	; (8000404 <lirCycle+0x12c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000370:	4a28      	ldr	r2, [pc, #160]	; (8000414 <lirCycle+0x13c>)
 8000372:	6013      	str	r3, [r2, #0]
				tosend[0]<<=16;
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <lirCycle+0x13c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	041b      	lsls	r3, r3, #16
 800037a:	4a26      	ldr	r2, [pc, #152]	; (8000414 <lirCycle+0x13c>)
 800037c:	6013      	str	r3, [r2, #0]
				tosend[0]|= ++count;
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <lirCycle+0x140>)
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	b29b      	uxth	r3, r3
 8000384:	3301      	adds	r3, #1
 8000386:	b29a      	uxth	r2, r3
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <lirCycle+0x140>)
 800038a:	4611      	mov	r1, r2
 800038c:	8019      	strh	r1, [r3, #0]
 800038e:	4b21      	ldr	r3, [pc, #132]	; (8000414 <lirCycle+0x13c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4313      	orrs	r3, r2
 8000394:	4a1f      	ldr	r2, [pc, #124]	; (8000414 <lirCycle+0x13c>)
 8000396:	6013      	str	r3, [r2, #0]
				timestamp += DWTtoUS(tbuf);
 8000398:	4b1d      	ldr	r3, [pc, #116]	; (8000410 <lirCycle+0x138>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	ee07 3a90 	vmov	s15, r3
 80003a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003a4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800041c <lirCycle+0x144>
 80003a8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80003ac:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <lirCycle+0x148>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	ee07 3a90 	vmov	s15, r3
 80003b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <lirCycle+0x14c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	ee07 3a90 	vmov	s15, r3
 80003c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003d0:	ee17 2a90 	vmov	r2, s15
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <lirCycle+0x14c>)
 80003d6:	601a      	str	r2, [r3, #0]
				tosend[1]= timestamp; //переменной этой хватит на час с чем-то, если хранить микросекунды
 80003d8:	4b12      	ldr	r3, [pc, #72]	; (8000424 <lirCycle+0x14c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <lirCycle+0x13c>)
 80003de:	6053      	str	r3, [r2, #4]
				CDC_Transmit_FS((uint8_t*)tosend, 12);
 80003e0:	210c      	movs	r1, #12
 80003e2:	480c      	ldr	r0, [pc, #48]	; (8000414 <lirCycle+0x13c>)
 80003e4:	f008 fb5c 	bl	8008aa0 <CDC_Transmit_FS>
				data = 0;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <lirCycle+0x12c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
				PULSE_COUNT = 0;
 80003ee:	4b02      	ldr	r3, [pc, #8]	; (80003f8 <lirCycle+0x120>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200003e0 	.word	0x200003e0
 80003fc:	200003da 	.word	0x200003da
 8000400:	58021800 	.word	0x58021800
 8000404:	200003d4 	.word	0x200003d4
 8000408:	40010000 	.word	0x40010000
 800040c:	e0001000 	.word	0xe0001000
 8000410:	200003dc 	.word	0x200003dc
 8000414:	200003c8 	.word	0x200003c8
 8000418:	200003d8 	.word	0x200003d8
 800041c:	49742400 	.word	0x49742400
 8000420:	20000000 	.word	0x20000000
 8000424:	200003c4 	.word	0x200003c4

08000428 <lirInit>:

void lirInit(){
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	PULSE_COUNT = 0;
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <lirInit+0x38>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
	MAX_PULSE_COUNT = (BITNESS + 1) * 2;
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <lirInit+0x3c>)
 8000434:	221e      	movs	r2, #30
 8000436:	701a      	strb	r2, [r3, #0]
	data = 0;
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <lirInit+0x40>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
	tbuf = 0;
 800043e:	4b0b      	ldr	r3, [pc, #44]	; (800046c <lirInit+0x44>)
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
	timestamp = 0;
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <lirInit+0x48>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
	count = 0;
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <lirInit+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	801a      	strh	r2, [r3, #0]
//	стоп слово для определения конца посылки
	tosend[2]=0xFAFBFCFD;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <lirInit+0x50>)
 8000452:	4a0a      	ldr	r2, [pc, #40]	; (800047c <lirInit+0x54>)
 8000454:	609a      	str	r2, [r3, #8]
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	200003e0 	.word	0x200003e0
 8000464:	200003da 	.word	0x200003da
 8000468:	200003d4 	.word	0x200003d4
 800046c:	200003dc 	.word	0x200003dc
 8000470:	200003c4 	.word	0x200003c4
 8000474:	200003d8 	.word	0x200003d8
 8000478:	200003c8 	.word	0x200003c8
 800047c:	fafbfcfd 	.word	0xfafbfcfd

08000480 <DWTinit>:

void DWTinit(){
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <DWTinit+0x34>)
 8000486:	68db      	ldr	r3, [r3, #12]
 8000488:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <DWTinit+0x34>)
 800048a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800048e:	60d3      	str	r3, [r2, #12]
	DWT->LAR = 0xC5ACCE55; //софтверный анлок??
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <DWTinit+0x38>)
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <DWTinit+0x3c>)
 8000494:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0U;
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <DWTinit+0x38>)
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <DWTinit+0x38>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <DWTinit+0x38>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6013      	str	r3, [r2, #0]
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	e000edf0 	.word	0xe000edf0
 80004b8:	e0001000 	.word	0xe0001000
 80004bc:	c5acce55 	.word	0xc5acce55

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc36 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81e 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f95e 	bl	800078c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004d0:	f000 f898 	bl	8000604 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004d4:	f000 f8e8 	bl	80006a8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004d8:	f008 fa22 	bl	8008920 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DWTinit();
 80004dc:	f7ff ffd0 	bl	8000480 <DWTinit>
  lirInit();
 80004e0:	f7ff ffa2 	bl	8000428 <lirInit>

//  TIM1->CCER|=TIM_CCER_CC1E; //map to pins (pin PE9)
//  TIM1->BDTR|=TIM_BDTR_MOE; //main output enable


  TIM2->CR1|= TIM_CR1_CEN;
 80004e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]
  TIM2->DIER|= TIM2_IRQn;
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	f043 031c 	orr.w	r3, r3, #28
 8000502:	60d3      	str	r3, [r2, #12]
//  TIM1->DIER|= TIM1_CC_IRQn;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x44>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b09c      	sub	sp, #112	; 0x70
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000512:	224c      	movs	r2, #76	; 0x4c
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f008 ff74 	bl	8009404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2220      	movs	r2, #32
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f008 ff6e 	bl	8009404 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000528:	2002      	movs	r0, #2
 800052a:	f002 f979 	bl	8002820 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800052e:	2300      	movs	r3, #0
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	4b32      	ldr	r3, [pc, #200]	; (80005fc <SystemClock_Config+0xf4>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a31      	ldr	r2, [pc, #196]	; (80005fc <SystemClock_Config+0xf4>)
 8000538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <SystemClock_Config+0xf4>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <SystemClock_Config+0xf8>)
 800054a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800054c:	4a2c      	ldr	r2, [pc, #176]	; (8000600 <SystemClock_Config+0xf8>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <SystemClock_Config+0xf8>)
 8000556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000560:	bf00      	nop
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <SystemClock_Config+0xf4>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800056a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800056e:	d1f8      	bne.n	8000562 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000570:	2322      	movs	r3, #34	; 0x22
 8000572:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000574:	2301      	movs	r3, #1
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2340      	movs	r3, #64	; 0x40
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000584:	2300      	movs	r3, #0
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000588:	230c      	movs	r3, #12
 800058a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 180;
 800058c:	23b4      	movs	r3, #180	; 0xb4
 800058e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000590:	2302      	movs	r3, #2
 8000592:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000594:	2302      	movs	r3, #2
 8000596:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000598:	2302      	movs	r3, #2
 800059a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800059c:	2308      	movs	r3, #8
 800059e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005a0:	2300      	movs	r3, #0
 80005a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 f981 	bl	80028b4 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005b8:	f000 fa38 	bl	8000a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	233f      	movs	r3, #63	; 0x3f
 80005be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2303      	movs	r3, #3
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005c8:	2308      	movs	r3, #8
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005cc:	2340      	movs	r3, #64	; 0x40
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005da:	2340      	movs	r3, #64	; 0x40
 80005dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fd76 	bl	80030d4 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005ee:	f000 fa1d 	bl	8000a2c <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3770      	adds	r7, #112	; 0x70
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	58024800 	.word	0x58024800
 8000600:	58000400 	.word	0x58000400

08000604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000624:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <MX_TIM1_Init+0xa0>)
 8000626:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_TIM1_Init+0x9c>)
 800062a:	2217      	movs	r2, #23
 800062c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000636:	2218      	movs	r2, #24
 8000638:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_TIM1_Init+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_TIM1_Init+0x9c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800064c:	4814      	ldr	r0, [pc, #80]	; (80006a0 <MX_TIM1_Init+0x9c>)
 800064e:	f004 f945 	bl	80048dc <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000658:	f000 f9e8 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	4619      	mov	r1, r3
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM1_Init+0x9c>)
 800066a:	f004 fb85 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000674:	f000 f9da 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_TIM1_Init+0x9c>)
 800068a:	f005 f8a1 	bl	80057d0 <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000694:	f000 f9ca 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200003e4 	.word	0x200003e4
 80006a4:	40010000 	.word	0x40010000

080006a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08e      	sub	sp, #56	; 0x38
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
 80006d6:	615a      	str	r2, [r3, #20]
 80006d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <MX_TIM2_Init+0xe0>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <MX_TIM2_Init+0xe0>)
 80006e4:	22ef      	movs	r2, #239	; 0xef
 80006e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <MX_TIM2_Init+0xe0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <MX_TIM2_Init+0xe0>)
 80006f0:	22c7      	movs	r2, #199	; 0xc7
 80006f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <MX_TIM2_Init+0xe0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_TIM2_Init+0xe0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000700:	4821      	ldr	r0, [pc, #132]	; (8000788 <MX_TIM2_Init+0xe0>)
 8000702:	f004 f8eb 	bl	80048dc <HAL_TIM_Base_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800070c:	f000 f98e 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071a:	4619      	mov	r1, r3
 800071c:	481a      	ldr	r0, [pc, #104]	; (8000788 <MX_TIM2_Init+0xe0>)
 800071e:	f004 fb2b 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000728:	f000 f980 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800072c:	4816      	ldr	r0, [pc, #88]	; (8000788 <MX_TIM2_Init+0xe0>)
 800072e:	f004 f92c 	bl	800498a <HAL_TIM_OC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000738:	f000 f978 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	480f      	ldr	r0, [pc, #60]	; (8000788 <MX_TIM2_Init+0xe0>)
 800074c:	f005 f840 	bl	80057d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000756:	f000 f969 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_TIM2_Init+0xe0>)
 8000772:	f004 fa8b 	bl	8004c8c <HAL_TIM_OC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800077c:	f000 f956 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3738      	adds	r7, #56	; 0x38
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000430 	.word	0x20000430

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	4b9a      	ldr	r3, [pc, #616]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a8:	4a98      	ldr	r2, [pc, #608]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b2:	4b96      	ldr	r3, [pc, #600]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c0:	4b92      	ldr	r3, [pc, #584]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c6:	4a91      	ldr	r2, [pc, #580]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d0:	4b8e      	ldr	r3, [pc, #568]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b8b      	ldr	r3, [pc, #556]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	4a89      	ldr	r2, [pc, #548]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007e6:	f043 0301 	orr.w	r3, r3, #1
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ee:	4b87      	ldr	r3, [pc, #540]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fc:	4b83      	ldr	r3, [pc, #524]	; (8000a0c <MX_GPIO_Init+0x280>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000802:	4a82      	ldr	r2, [pc, #520]	; (8000a0c <MX_GPIO_Init+0x280>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080c:	4b7f      	ldr	r3, [pc, #508]	; (8000a0c <MX_GPIO_Init+0x280>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	4b7c      	ldr	r3, [pc, #496]	; (8000a0c <MX_GPIO_Init+0x280>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	4a7a      	ldr	r2, [pc, #488]	; (8000a0c <MX_GPIO_Init+0x280>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082a:	4b78      	ldr	r3, [pc, #480]	; (8000a0c <MX_GPIO_Init+0x280>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000838:	4b74      	ldr	r3, [pc, #464]	; (8000a0c <MX_GPIO_Init+0x280>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083e:	4a73      	ldr	r2, [pc, #460]	; (8000a0c <MX_GPIO_Init+0x280>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000848:	4b70      	ldr	r3, [pc, #448]	; (8000a0c <MX_GPIO_Init+0x280>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000856:	4b6d      	ldr	r3, [pc, #436]	; (8000a0c <MX_GPIO_Init+0x280>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	4a6b      	ldr	r2, [pc, #428]	; (8000a0c <MX_GPIO_Init+0x280>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000866:	4b69      	ldr	r3, [pc, #420]	; (8000a0c <MX_GPIO_Init+0x280>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	f003 0310 	and.w	r3, r3, #16
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f244 0101 	movw	r1, #16385	; 0x4001
 800087a:	4865      	ldr	r0, [pc, #404]	; (8000a10 <MX_GPIO_Init+0x284>)
 800087c:	f000 fddc 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000886:	4863      	ldr	r0, [pc, #396]	; (8000a14 <MX_GPIO_Init+0x288>)
 8000888:	f000 fdd6 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLCK_GPIO_Port, CLCK_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2104      	movs	r1, #4
 8000890:	4861      	ldr	r0, [pc, #388]	; (8000a18 <MX_GPIO_Init+0x28c>)
 8000892:	f000 fdd1 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2102      	movs	r1, #2
 800089a:	4860      	ldr	r0, [pc, #384]	; (8000a1c <MX_GPIO_Init+0x290>)
 800089c:	f000 fdcc 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	485a      	ldr	r0, [pc, #360]	; (8000a20 <MX_GPIO_Init+0x294>)
 80008b6:	f000 fc0f 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008ba:	2332      	movs	r3, #50	; 0x32
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ca:	230b      	movs	r3, #11
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4852      	ldr	r0, [pc, #328]	; (8000a20 <MX_GPIO_Init+0x294>)
 80008d6:	f000 fbff 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008da:	2386      	movs	r3, #134	; 0x86
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ea:	230b      	movs	r3, #11
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	484b      	ldr	r0, [pc, #300]	; (8000a24 <MX_GPIO_Init+0x298>)
 80008f6:	f000 fbef 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80008fa:	f244 0301 	movw	r3, #16385	; 0x4001
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	483f      	ldr	r0, [pc, #252]	; (8000a10 <MX_GPIO_Init+0x284>)
 8000914:	f000 fbe0 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800092a:	230b      	movs	r3, #11
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4836      	ldr	r0, [pc, #216]	; (8000a10 <MX_GPIO_Init+0x284>)
 8000936:	f000 fbcf 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800093a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800094c:	2307      	movs	r3, #7
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	482f      	ldr	r0, [pc, #188]	; (8000a14 <MX_GPIO_Init+0x288>)
 8000958:	f000 fbbe 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4827      	ldr	r0, [pc, #156]	; (8000a14 <MX_GPIO_Init+0x288>)
 8000976:	f000 fbaf 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLCK_Pin */
  GPIO_InitStruct.Pin = CLCK_Pin;
 800097a:	2304      	movs	r3, #4
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000982:	2301      	movs	r3, #1
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CLCK_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4821      	ldr	r0, [pc, #132]	; (8000a18 <MX_GPIO_Init+0x28c>)
 8000992:	f000 fba1 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_Pin */
  GPIO_InitStruct.Pin = DATA_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099e:	2301      	movs	r3, #1
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	481b      	ldr	r0, [pc, #108]	; (8000a18 <MX_GPIO_Init+0x28c>)
 80009aa:	f000 fb95 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_GPIO_Init+0x29c>)
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4815      	ldr	r0, [pc, #84]	; (8000a18 <MX_GPIO_Init+0x28c>)
 80009c2:	f000 fb89 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80009c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d8:	230b      	movs	r3, #11
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_GPIO_Init+0x28c>)
 80009e4:	f000 fb78 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2301      	movs	r3, #1
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <MX_GPIO_Init+0x290>)
 8000a00:	f000 fb6a 	bl	80010d8 <HAL_GPIO_Init>

}
 8000a04:	bf00      	nop
 8000a06:	3730      	adds	r7, #48	; 0x30
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	58020400 	.word	0x58020400
 8000a14:	58020c00 	.word	0x58020c00
 8000a18:	58021800 	.word	0x58021800
 8000a1c:	58021000 	.word	0x58021000
 8000a20:	58020800 	.word	0x58020800
 8000a24:	58020000 	.word	0x58020000
 8000a28:	11110000 	.word	0x11110000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_MspInit+0x30>)
 8000a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a44:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x30>)
 8000a46:	f043 0302 	orr.w	r3, r3, #2
 8000a4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x30>)
 8000a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	58024400 	.word	0x58024400

08000a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_TIM_Base_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d117      	bne.n	8000aae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <HAL_TIM_Base_MspInit+0x88>)
 8000a80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_TIM_Base_MspInit+0x88>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_TIM_Base_MspInit+0x88>)
 8000a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2019      	movs	r0, #25
 8000aa2:	f000 fae4 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000aa6:	2019      	movs	r0, #25
 8000aa8:	f000 fafb 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000aac:	e01b      	b.n	8000ae6 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab6:	d116      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_TIM_Base_MspInit+0x88>)
 8000aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000abe:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_TIM_Base_MspInit+0x88>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_TIM_Base_MspInit+0x88>)
 8000aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201c      	movs	r0, #28
 8000adc:	f000 fac7 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae0:	201c      	movs	r0, #28
 8000ae2:	f000 fade 	bl	80010a2 <HAL_NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40010000 	.word	0x40010000
 8000af4:	58024400 	.word	0x58024400

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <NMI_Handler+0x4>

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b44:	f000 f968 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	TIM1->SR &= ~TIM_SR_UIF; //flag reset
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <TIM1_UP_IRQHandler+0x20>)
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <TIM1_UP_IRQHandler+0x20>)
 8000b56:	f023 0301 	bic.w	r3, r3, #1
 8000b5a:	6113      	str	r3, [r2, #16]
	lirCycle();
 8000b5c:	f7ff fbbc 	bl	80002d8 <lirCycle>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b60:	4803      	ldr	r0, [pc, #12]	; (8000b70 <TIM1_UP_IRQHandler+0x24>)
 8000b62:	f003 ff73 	bl	8004a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	200003e4 	.word	0x200003e4

08000b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	TIM2->SR &= ~TIM_SR_UIF; //flag reset
 8000b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b82:	f023 0301 	bic.w	r3, r3, #1
 8000b86:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <TIM2_IRQHandler+0x38>)
 8000b8a:	f003 ff5f 	bl	8004a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  TIM1->CCER|=TIM_CCER_CC1E; //map to pins (pin PE9)
//  TIM1->BDTR|=TIM_BDTR_MOE; //main output enable
  TIM1->CR1 |=  TIM_CR1_CEN;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <TIM2_IRQHandler+0x3c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <TIM2_IRQHandler+0x3c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6013      	str	r3, [r2, #0]
  TIM1->DIER|= TIM1_UP_IRQn;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <TIM2_IRQHandler+0x3c>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <TIM2_IRQHandler+0x3c>)
 8000ba0:	f043 0319 	orr.w	r3, r3, #25
 8000ba4:	60d3      	str	r3, [r2, #12]
//  TIM1->DIER|= TIM1_CC_IRQn;
  /* USER CODE END TIM2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000430 	.word	0x20000430
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <OTG_FS_IRQHandler+0x10>)
 8000bba:	f000 fdad 	bl	8001718 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20001950 	.word	0x20001950

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <SystemInit+0xec>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <SystemInit+0xec>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bdc:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <SystemInit+0xf0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	2b06      	cmp	r3, #6
 8000be6:	d807      	bhi.n	8000bf8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <SystemInit+0xf0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f023 030f 	bic.w	r3, r3, #15
 8000bf0:	4a31      	ldr	r2, [pc, #196]	; (8000cb8 <SystemInit+0xf0>)
 8000bf2:	f043 0307 	orr.w	r3, r3, #7
 8000bf6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <SystemInit+0xf4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <SystemInit+0xf4>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <SystemInit+0xf4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <SystemInit+0xf4>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	492b      	ldr	r1, [pc, #172]	; (8000cbc <SystemInit+0xf4>)
 8000c10:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <SystemInit+0xf8>)
 8000c12:	4013      	ands	r3, r2
 8000c14:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <SystemInit+0xf0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c22:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <SystemInit+0xf0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 030f 	bic.w	r3, r3, #15
 8000c2a:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <SystemInit+0xf0>)
 8000c2c:	f043 0307 	orr.w	r3, r3, #7
 8000c30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c32:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <SystemInit+0xf4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c38:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <SystemInit+0xf4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <SystemInit+0xf4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <SystemInit+0xf4>)
 8000c46:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <SystemInit+0xfc>)
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <SystemInit+0xf4>)
 8000c4c:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <SystemInit+0x100>)
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <SystemInit+0xf4>)
 8000c52:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <SystemInit+0x104>)
 8000c54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <SystemInit+0xf4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <SystemInit+0xf4>)
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <SystemInit+0x104>)
 8000c60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <SystemInit+0xf4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <SystemInit+0xf4>)
 8000c6a:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <SystemInit+0x104>)
 8000c6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0xf4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <SystemInit+0xf4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <SystemInit+0xf4>)
 8000c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <SystemInit+0xf4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <SystemInit+0x108>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <SystemInit+0x10c>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c92:	d202      	bcs.n	8000c9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <SystemInit+0x110>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <SystemInit+0x114>)
 8000c9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ca0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SystemInit+0xec>)
 8000ca4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	52002000 	.word	0x52002000
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cc4:	02020200 	.word	0x02020200
 8000cc8:	01ff0000 	.word	0x01ff0000
 8000ccc:	01010280 	.word	0x01010280
 8000cd0:	5c001000 	.word	0x5c001000
 8000cd4:	ffff0000 	.word	0xffff0000
 8000cd8:	51008108 	.word	0x51008108
 8000cdc:	52004000 	.word	0x52004000

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce4:	f7ff ff70 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cea:	490d      	ldr	r1, [pc, #52]	; (8000d20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d00:	4c0a      	ldr	r4, [pc, #40]	; (8000d2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f008 fb55 	bl	80093bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fbd5 	bl	80004c0 <main>
  bx  lr
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000d24:	0800948c 	.word	0x0800948c
  ldr r2, =_sbss
 8000d28:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000d2c:	20001d58 	.word	0x20001d58

08000d30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC3_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	f000 f98c 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d40:	f002 fb7e 	bl	8003440 <HAL_RCC_GetSysClockFreq>
 8000d44:	4602      	mov	r2, r0
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_Init+0x68>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	f003 030f 	and.w	r3, r3, #15
 8000d50:	4913      	ldr	r1, [pc, #76]	; (8000da0 <HAL_Init+0x6c>)
 8000d52:	5ccb      	ldrb	r3, [r1, r3]
 8000d54:	f003 031f 	and.w	r3, r3, #31
 8000d58:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_Init+0x68>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_Init+0x6c>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <HAL_Init+0x70>)
 8000d76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_Init+0x74>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f814 	bl	8000dac <HAL_InitTick>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e002      	b.n	8000d94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8e:	f7ff fe53 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	08009474 	.word	0x08009474
 8000da4:	20000004 	.word	0x20000004
 8000da8:	20000000 	.word	0x20000000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_InitTick+0x60>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e021      	b.n	8000e04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_InitTick+0x64>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_InitTick+0x60>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f971 	bl	80010be <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f93b 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x68>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	2000000c 	.word	0x2000000c
 8000e3c:	2000047c 	.word	0x2000047c

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	2000047c 	.word	0x2000047c

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000000c 	.word	0x2000000c

08000ea0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetREVID+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0c1b      	lsrs	r3, r3, #16
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	5c001000 	.word	0x5c001000

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	60d3      	str	r3, [r2, #12]
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000ed00 	.word	0xe000ed00
 8000efc:	05fa0000 	.word	0x05fa0000

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff29 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff40 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff90 	bl	8000fac <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5f 	bl	8000f58 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff33 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa4 	bl	8001014 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010e6:	4b89      	ldr	r3, [pc, #548]	; (800130c <HAL_GPIO_Init+0x234>)
 80010e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ea:	e194      	b.n	8001416 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8186 	beq.w	8001410 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00b      	beq.n	8001124 <HAL_GPIO_Init+0x4c>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d007      	beq.n	8001124 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001118:	2b11      	cmp	r3, #17
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d130      	bne.n	8001186 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800115a:	2201      	movs	r2, #1
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f003 0201 	and.w	r2, r3, #1
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0xee>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d123      	bne.n	800120e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	69b9      	ldr	r1, [r7, #24]
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0203 	and.w	r2, r3, #3
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80e0 	beq.w	8001410 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_GPIO_Init+0x238>)
 8001252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001256:	4a2e      	ldr	r2, [pc, #184]	; (8001310 <HAL_GPIO_Init+0x238>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001260:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HAL_GPIO_Init+0x238>)
 8001262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800126e:	4a29      	ldr	r2, [pc, #164]	; (8001314 <HAL_GPIO_Init+0x23c>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a20      	ldr	r2, [pc, #128]	; (8001318 <HAL_GPIO_Init+0x240>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d052      	beq.n	8001340 <HAL_GPIO_Init+0x268>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a1f      	ldr	r2, [pc, #124]	; (800131c <HAL_GPIO_Init+0x244>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d031      	beq.n	8001306 <HAL_GPIO_Init+0x22e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_GPIO_Init+0x248>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d02b      	beq.n	8001302 <HAL_GPIO_Init+0x22a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <HAL_GPIO_Init+0x24c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d025      	beq.n	80012fe <HAL_GPIO_Init+0x226>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <HAL_GPIO_Init+0x250>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x222>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_GPIO_Init+0x254>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x21e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <HAL_GPIO_Init+0x258>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x21a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_GPIO_Init+0x25c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x216>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_GPIO_Init+0x260>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x212>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_GPIO_Init+0x264>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x20e>
 80012e2:	2309      	movs	r3, #9
 80012e4:	e02d      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 80012e6:	230a      	movs	r3, #10
 80012e8:	e02b      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 80012ea:	2308      	movs	r3, #8
 80012ec:	e029      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e027      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 80012f2:	2306      	movs	r3, #6
 80012f4:	e025      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e023      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e021      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 80012fe:	2303      	movs	r3, #3
 8001300:	e01f      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 8001302:	2302      	movs	r3, #2
 8001304:	e01d      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 8001306:	2301      	movs	r3, #1
 8001308:	e01b      	b.n	8001342 <HAL_GPIO_Init+0x26a>
 800130a:	bf00      	nop
 800130c:	58000080 	.word	0x58000080
 8001310:	58024400 	.word	0x58024400
 8001314:	58000400 	.word	0x58000400
 8001318:	58020000 	.word	0x58020000
 800131c:	58020400 	.word	0x58020400
 8001320:	58020800 	.word	0x58020800
 8001324:	58020c00 	.word	0x58020c00
 8001328:	58021000 	.word	0x58021000
 800132c:	58021400 	.word	0x58021400
 8001330:	58021800 	.word	0x58021800
 8001334:	58021c00 	.word	0x58021c00
 8001338:	58022000 	.word	0x58022000
 800133c:	58022400 	.word	0x58022400
 8001340:	2300      	movs	r3, #0
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	f002 0203 	and.w	r2, r2, #3
 8001348:	0092      	lsls	r2, r2, #2
 800134a:	4093      	lsls	r3, r2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001352:	4938      	ldr	r1, [pc, #224]	; (8001434 <HAL_GPIO_Init+0x35c>)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	3302      	adds	r3, #2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	3301      	adds	r3, #1
 8001414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	f47f ae63 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3724      	adds	r7, #36	; 0x24
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	58000400 	.word	0x58000400

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800146a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146c:	b08f      	sub	sp, #60	; 0x3c
 800146e:	af0a      	add	r7, sp, #40	; 0x28
 8001470:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e116      	b.n	80016aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f007 fc4a 	bl	8008d30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2203      	movs	r2, #3
 80014a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f004 fb4f 	bl	8005b5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	687e      	ldr	r6, [r7, #4]
 80014c8:	466d      	mov	r5, sp
 80014ca:	f106 0410 	add.w	r4, r6, #16
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014da:	e885 0003 	stmia.w	r5, {r0, r1}
 80014de:	1d33      	adds	r3, r6, #4
 80014e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e2:	6838      	ldr	r0, [r7, #0]
 80014e4:	f004 fa1a 	bl	800591c <USB_CoreInit>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2202      	movs	r2, #2
 80014f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e0d7      	b.n	80016aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f004 fb3d 	bl	8005b80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e04a      	b.n	80015a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	333d      	adds	r3, #61	; 0x3d
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	333c      	adds	r3, #60	; 0x3c
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001534:	7bfa      	ldrb	r2, [r7, #15]
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	b298      	uxth	r0, r3
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	3342      	adds	r3, #66	; 0x42
 8001548:	4602      	mov	r2, r0
 800154a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	333f      	adds	r3, #63	; 0x3f
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	3344      	adds	r3, #68	; 0x44
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	3348      	adds	r3, #72	; 0x48
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	1a9b      	subs	r3, r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	3350      	adds	r3, #80	; 0x50
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3301      	adds	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3af      	bcc.n	800150c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e044      	b.n	800163c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	3301      	adds	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d3b5      	bcc.n	80015b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	687e      	ldr	r6, [r7, #4]
 800164e:	466d      	mov	r5, sp
 8001650:	f106 0410 	add.w	r4, r6, #16
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001660:	e885 0003 	stmia.w	r5, {r0, r1}
 8001664:	1d33      	adds	r3, r6, #4
 8001666:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001668:	6838      	ldr	r0, [r7, #0]
 800166a:	f004 fab3 	bl	8005bd4 <USB_DevInit>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2202      	movs	r2, #2
 8001678:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e014      	b.n	80016aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	2b01      	cmp	r3, #1
 8001696:	d102      	bne.n	800169e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f001 f891 	bl	80027c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 fb33 	bl	8006d0e <USB_DevDisconnect>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_PCD_Start+0x1c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e020      	b.n	8001710 <HAL_PCD_Start+0x5e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d109      	bne.n	80016f2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d005      	beq.n	80016f2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f004 fa20 	bl	8005b3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f005 fae3 	bl	8006ccc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b08d      	sub	sp, #52	; 0x34
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f005 fba1 	bl	8006e76 <USB_GetMode>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 83ca 	bne.w	8001ed0 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f005 fb05 	bl	8006d50 <USB_ReadInterrupts>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 83c0 	beq.w	8001ece <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fafc 	bl	8006d50 <USB_ReadInterrupts>
 8001758:	4603      	mov	r3, r0
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f002 0202 	and.w	r2, r2, #2
 8001770:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f005 faea 	bl	8006d50 <USB_ReadInterrupts>
 800177c:	4603      	mov	r3, r0
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b10      	cmp	r3, #16
 8001784:	d161      	bne.n	800184a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0210 	bic.w	r2, r2, #16
 8001794:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	f003 020f 	and.w	r2, r3, #15
 80017a2:	4613      	mov	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	3304      	adds	r3, #4
 80017b4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	0c5b      	lsrs	r3, r3, #17
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d124      	bne.n	800180c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d035      	beq.n	800183a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	6a38      	ldr	r0, [r7, #32]
 80017e2:	f005 f921 	bl	8006a28 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017f2:	441a      	add	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001804:	441a      	add	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	619a      	str	r2, [r3, #24]
 800180a:	e016      	b.n	800183a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	0c5b      	lsrs	r3, r3, #17
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	2b06      	cmp	r3, #6
 8001816:	d110      	bne.n	800183a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800181e:	2208      	movs	r2, #8
 8001820:	4619      	mov	r1, r3
 8001822:	6a38      	ldr	r0, [r7, #32]
 8001824:	f005 f900 	bl	8006a28 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001834:	441a      	add	r2, r3
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0210 	orr.w	r2, r2, #16
 8001848:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f005 fa7e 	bl	8006d50 <USB_ReadInterrupts>
 8001854:	4603      	mov	r3, r0
 8001856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800185a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800185e:	d16e      	bne.n	800193e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f005 fa84 	bl	8006d76 <USB_ReadDevAllOutEpInterrupt>
 800186e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001870:	e062      	b.n	8001938 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d057      	beq.n	800192c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	4611      	mov	r1, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f005 faa9 	bl	8006dde <USB_ReadDevOutEPInterrupt>
 800188c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00c      	beq.n	80018b2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	015a      	lsls	r2, r3, #5
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018a4:	461a      	mov	r2, r3
 80018a6:	2301      	movs	r3, #1
 80018a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fddd 	bl	800246c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	015a      	lsls	r2, r3, #5
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	4413      	add	r3, r2
 80018c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c8:	461a      	mov	r2, r3
 80018ca:	2308      	movs	r3, #8
 80018cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fed7 	bl	8002684 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	015a      	lsls	r2, r3, #5
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ec:	461a      	mov	r2, r3
 80018ee:	2310      	movs	r3, #16
 80018f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	4413      	add	r3, r2
 8001904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001908:	461a      	mov	r2, r3
 800190a:	2320      	movs	r3, #32
 800190c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d009      	beq.n	800192c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	015a      	lsls	r2, r3, #5
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	4413      	add	r3, r2
 8001920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001924:	461a      	mov	r2, r3
 8001926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	3301      	adds	r3, #1
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193a:	2b00      	cmp	r3, #0
 800193c:	d199      	bne.n	8001872 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f005 fa04 	bl	8006d50 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001952:	f040 80c0 	bne.w	8001ad6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f005 fa25 	bl	8006daa <USB_ReadDevAllInEpInterrupt>
 8001960:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001966:	e0b2      	b.n	8001ace <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80a7 	beq.w	8001ac2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f005 fa4b 	bl	8006e1a <USB_ReadDevInEPInterrupt>
 8001984:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b00      	cmp	r3, #0
 800198e:	d057      	beq.n	8001a40 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	2201      	movs	r2, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69f9      	ldr	r1, [r7, #28]
 80019ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019b0:	4013      	ands	r3, r2
 80019b2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c0:	461a      	mov	r2, r3
 80019c2:	2301      	movs	r3, #1
 80019c4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d132      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d2:	4613      	mov	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	3348      	adds	r3, #72	; 0x48
 80019de:	6819      	ldr	r1, [r3, #0]
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4403      	add	r3, r0
 80019ee:	3344      	adds	r3, #68	; 0x44
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4419      	add	r1, r3
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4403      	add	r3, r0
 8001a02:	3348      	adds	r3, #72	; 0x48
 8001a04:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d113      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x31c>
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	4613      	mov	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	3350      	adds	r3, #80	; 0x50
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d108      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2101      	movs	r1, #1
 8001a30:	f005 fa54 	bl	8006edc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4619      	mov	r1, r3
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f007 fa27 	bl	8008e8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a56:	461a      	mov	r2, r3
 8001a58:	2308      	movs	r3, #8
 8001a5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	015a      	lsls	r2, r3, #5
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a72:	461a      	mov	r2, r3
 8001a74:	2310      	movs	r3, #16
 8001a76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2340      	movs	r3, #64	; 0x40
 8001a92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	015a      	lsls	r2, r3, #5
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001aaa:	461a      	mov	r2, r3
 8001aac:	2302      	movs	r3, #2
 8001aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fc48 	bl	8002352 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f47f af49 	bne.w	8001968 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 f938 	bl	8006d50 <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001aea:	d122      	bne.n	8001b32 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b12:	2100      	movs	r1, #0
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fe77 	bl	8002808 <HAL_PCDEx_LPM_Callback>
 8001b1a:	e002      	b.n	8001b22 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f007 fa2d 	bl	8008f7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 f90a 	bl	8006d50 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b46:	d112      	bne.n	8001b6e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f007 f9e9 	bl	8008f30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f005 f8ec 	bl	8006d50 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b82:	d121      	bne.n	8001bc8 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001b92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d111      	bne.n	8001bc2 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	f003 020f 	and.w	r2, r3, #15
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001bb8:	2101      	movs	r1, #1
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fe24 	bl	8002808 <HAL_PCDEx_LPM_Callback>
 8001bc0:	e002      	b.n	8001bc8 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f007 f9b4 	bl	8008f30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 f8bf 	bl	8006d50 <USB_ReadInterrupts>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bdc:	f040 80c7 	bne.w	8001d6e <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 f948 	bl	8005e90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c04:	e056      	b.n	8001cb4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	015a      	lsls	r2, r3, #5
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c12:	461a      	mov	r2, r3
 8001c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c2a:	0151      	lsls	r1, r2, #5
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	440a      	add	r2, r1
 8001c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c38:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c4a:	0151      	lsls	r1, r2, #5
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	440a      	add	r2, r1
 8001c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c66:	461a      	mov	r2, r3
 8001c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c6c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7e:	0151      	lsls	r1, r2, #5
 8001c80:	69fa      	ldr	r2, [r7, #28]
 8001c82:	440a      	add	r2, r1
 8001c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9e:	0151      	lsls	r1, r2, #5
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	440a      	add	r2, r1
 8001ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ca8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3a3      	bcc.n	8001c06 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ccc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001cd0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cea:	f043 030b 	orr.w	r3, r3, #11
 8001cee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d00:	f043 030b 	orr.w	r3, r3, #11
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	e015      	b.n	8001d34 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d16:	4619      	mov	r1, r3
 8001d18:	f242 032b 	movw	r3, #8235	; 0x202b
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d2e:	f043 030b 	orr.w	r3, r3, #11
 8001d32:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69fa      	ldr	r2, [r7, #28]
 8001d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d42:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d46:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f005 f8bf 	bl	8006edc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 ffec 	bl	8006d50 <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d82:	d124      	bne.n	8001dce <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f005 f883 	bl	8006e94 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f004 f8dd 	bl	8005f52 <USB_GetDevSpeed>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681c      	ldr	r4, [r3, #0]
 8001da4:	f001 fcc6 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8001da8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	4620      	mov	r0, r4
 8001db4:	f003 fe20 	bl	80059f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f007 f890 	bl	8008ede <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	695a      	ldr	r2, [r3, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 ffbc 	bl	8006d50 <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d10a      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f007 f86d 	bl	8008ec2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f002 0208 	and.w	r2, r2, #8
 8001df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 ffa7 	bl	8006d50 <USB_ReadInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e0c:	d10f      	bne.n	8001e2e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f007 f8cf 	bl	8008fbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 ff8c 	bl	8006d50 <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e42:	d10f      	bne.n	8001e64 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f007 f8a2 	bl	8008f98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 ff71 	bl	8006d50 <USB_ReadInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e78:	d10a      	bne.n	8001e90 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f007 f8b0 	bl	8008fe0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 ff5b 	bl	8006d50 <USB_ReadInterrupts>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d115      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f007 f8a0 	bl	8008ffc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	e000      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001ece:	bf00      	nop
    }
  }
}
 8001ed0:	3734      	adds	r7, #52	; 0x34
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd90      	pop	{r4, r7, pc}

08001ed6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_PCD_SetAddress+0x1a>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e013      	b.n	8001f18 <HAL_PCD_SetAddress+0x42>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f004 feb9 	bl	8006c80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	4608      	mov	r0, r1
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	70fb      	strb	r3, [r7, #3]
 8001f32:	460b      	mov	r3, r1
 8001f34:	803b      	strh	r3, [r7, #0]
 8001f36:	4613      	mov	r3, r2
 8001f38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	da0f      	bge.n	8001f66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	f003 020f 	and.w	r2, r3, #15
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	3338      	adds	r3, #56	; 0x38
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	705a      	strb	r2, [r3, #1]
 8001f64:	e00f      	b.n	8001f86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 020f 	and.w	r2, r3, #15
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f92:	883a      	ldrh	r2, [r7, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	78ba      	ldrb	r2, [r7, #2]
 8001f9c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001fb0:	78bb      	ldrb	r3, [r7, #2]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d102      	bne.n	8001fbc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_PCD_EP_Open+0xaa>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e00e      	b.n	8001fe8 <HAL_PCD_EP_Open+0xc8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68f9      	ldr	r1, [r7, #12]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f003 ffdf 	bl	8005f9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002000:	2b00      	cmp	r3, #0
 8002002:	da0f      	bge.n	8002024 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	f003 020f 	and.w	r2, r3, #15
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	1a9b      	subs	r3, r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	3338      	adds	r3, #56	; 0x38
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	3304      	adds	r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	705a      	strb	r2, [r3, #1]
 8002022:	e00f      	b.n	8002044 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 020f 	and.w	r2, r3, #15
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	b2da      	uxtb	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_PCD_EP_Close+0x6e>
 800205a:	2302      	movs	r3, #2
 800205c:	e00e      	b.n	800207c <HAL_PCD_EP_Close+0x8c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	4618      	mov	r0, r3
 800206e:	f004 f81d 	bl	80060ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	460b      	mov	r3, r1
 8002092:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2200      	movs	r2, #0
 80020c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	6979      	ldr	r1, [r7, #20]
 80020f8:	f004 fb00 	bl	80066fc <USB_EP0StartXfer>
 80020fc:	e008      	b.n	8002110 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	6979      	ldr	r1, [r7, #20]
 800210c:	f004 f8aa 	bl	8006264 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800213c:	681b      	ldr	r3, [r3, #0]
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
 8002156:	460b      	mov	r3, r1
 8002158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	3338      	adds	r3, #56	; 0x38
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	3304      	adds	r3, #4
 8002170:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2201      	movs	r2, #1
 8002188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800218a:	7afb      	ldrb	r3, [r7, #11]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	b2da      	uxtb	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d102      	bne.n	80021a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021a4:	7afb      	ldrb	r3, [r7, #11]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	f004 fa9e 	bl	80066fc <USB_EP0StartXfer>
 80021c0:	e008      	b.n	80021d4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	6979      	ldr	r1, [r7, #20]
 80021d0:	f004 f848 	bl	8006264 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 020f 	and.w	r2, r3, #15
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d901      	bls.n	80021fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e050      	b.n	800229e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002200:	2b00      	cmp	r3, #0
 8002202:	da0f      	bge.n	8002224 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	f003 020f 	and.w	r2, r3, #15
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	3338      	adds	r3, #56	; 0x38
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	3304      	adds	r3, #4
 800221a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	705a      	strb	r2, [r3, #1]
 8002222:	e00d      	b.n	8002240 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	3304      	adds	r3, #4
 8002238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002258:	2b01      	cmp	r3, #1
 800225a:	d101      	bne.n	8002260 <HAL_PCD_EP_SetStall+0x82>
 800225c:	2302      	movs	r3, #2
 800225e:	e01e      	b.n	800229e <HAL_PCD_EP_SetStall+0xc0>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68f9      	ldr	r1, [r7, #12]
 800226e:	4618      	mov	r0, r3
 8002270:	f004 fc32 	bl	8006ad8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10a      	bne.n	8002294 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	b2d9      	uxtb	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800228e:	461a      	mov	r2, r3
 8002290:	f004 fe24 	bl	8006edc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 020f 	and.w	r2, r3, #15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d901      	bls.n	80022c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e042      	b.n	800234a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da0f      	bge.n	80022ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 020f 	and.w	r2, r3, #15
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	3338      	adds	r3, #56	; 0x38
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	705a      	strb	r2, [r3, #1]
 80022ea:	e00f      	b.n	800230c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 020f 	and.w	r2, r3, #15
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	b2da      	uxtb	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_PCD_EP_ClrStall+0x86>
 8002328:	2302      	movs	r3, #2
 800232a:	e00e      	b.n	800234a <HAL_PCD_EP_ClrStall+0xa4>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fc3a 	bl	8006bb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b08a      	sub	sp, #40	; 0x28
 8002356:	af02      	add	r7, sp, #8
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	3338      	adds	r3, #56	; 0x38
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	3304      	adds	r3, #4
 8002378:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	429a      	cmp	r2, r3
 8002384:	d901      	bls.n	800238a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06c      	b.n	8002464 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	429a      	cmp	r2, r3
 800239e:	d902      	bls.n	80023a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3303      	adds	r3, #3
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ae:	e02b      	b.n	8002408 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d902      	bls.n	80023cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3303      	adds	r3, #3
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68d9      	ldr	r1, [r3, #12]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4603      	mov	r3, r0
 80023ea:	6978      	ldr	r0, [r7, #20]
 80023ec:	f004 fade 	bl	80069ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	441a      	add	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	441a      	add	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	b29b      	uxth	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	429a      	cmp	r2, r3
 800241c:	d809      	bhi.n	8002432 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002426:	429a      	cmp	r2, r3
 8002428:	d203      	bcs.n	8002432 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1be      	bne.n	80023b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	429a      	cmp	r2, r3
 800243c:	d811      	bhi.n	8002462 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	2201      	movs	r2, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	43db      	mvns	r3, r3
 8002458:	6939      	ldr	r1, [r7, #16]
 800245a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800245e:	4013      	ands	r3, r2
 8002460:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3720      	adds	r7, #32
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	333c      	adds	r3, #60	; 0x3c
 8002484:	3304      	adds	r3, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	f040 80a0 	bne.w	80025e4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d015      	beq.n	80024da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4a72      	ldr	r2, [pc, #456]	; (800267c <PCD_EP_OutXfrComplete_int+0x210>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	f240 80dd 	bls.w	8002672 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80d7 	beq.w	8002672 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	461a      	mov	r2, r3
 80024d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024d6:	6093      	str	r3, [r2, #8]
 80024d8:	e0cb      	b.n	8002672 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d009      	beq.n	80024f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	015a      	lsls	r2, r3, #5
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f0:	461a      	mov	r2, r3
 80024f2:	2320      	movs	r3, #32
 80024f4:	6093      	str	r3, [r2, #8]
 80024f6:	e0bc      	b.n	8002672 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 80b7 	bne.w	8002672 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a5d      	ldr	r2, [pc, #372]	; (800267c <PCD_EP_OutXfrComplete_int+0x210>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d90f      	bls.n	800252c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002522:	461a      	mov	r2, r3
 8002524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002528:	6093      	str	r3, [r2, #8]
 800252a:	e0a2      	b.n	8002672 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800253e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	0159      	lsls	r1, r3, #5
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	440b      	add	r3, r1
 8002548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002552:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4403      	add	r3, r0
 8002562:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002566:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800257a:	6819      	ldr	r1, [r3, #0]
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4613      	mov	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4403      	add	r3, r0
 800258a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4419      	add	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4403      	add	r3, r0
 80025a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025a4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d114      	bne.n	80025d6 <PCD_EP_OutXfrComplete_int+0x16a>
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025ce:	461a      	mov	r2, r3
 80025d0:	2101      	movs	r1, #1
 80025d2:	f004 fc83 	bl	8006edc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f006 fc3b 	bl	8008e58 <HAL_PCD_DataOutStageCallback>
 80025e2:	e046      	b.n	8002672 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a26      	ldr	r2, [pc, #152]	; (8002680 <PCD_EP_OutXfrComplete_int+0x214>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d124      	bne.n	8002636 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002602:	461a      	mov	r2, r3
 8002604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002608:	6093      	str	r3, [r2, #8]
 800260a:	e032      	b.n	8002672 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002622:	461a      	mov	r2, r3
 8002624:	2320      	movs	r3, #32
 8002626:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f006 fc12 	bl	8008e58 <HAL_PCD_DataOutStageCallback>
 8002634:	e01d      	b.n	8002672 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d114      	bne.n	8002666 <PCD_EP_OutXfrComplete_int+0x1fa>
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800265e:	461a      	mov	r2, r3
 8002660:	2100      	movs	r1, #0
 8002662:	f004 fc3b 	bl	8006edc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f006 fbf3 	bl	8008e58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	4f54300a 	.word	0x4f54300a
 8002680:	4f54310a 	.word	0x4f54310a

08002684 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	333c      	adds	r3, #60	; 0x3c
 800269c:	3304      	adds	r3, #4
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a15      	ldr	r2, [pc, #84]	; (800270c <PCD_EP_OutSetupPacket_int+0x88>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d90e      	bls.n	80026d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d0:	461a      	mov	r2, r3
 80026d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f006 fbab 	bl	8008e34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <PCD_EP_OutSetupPacket_int+0x88>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d90c      	bls.n	8002700 <PCD_EP_OutSetupPacket_int+0x7c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d108      	bne.n	8002700 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026f8:	461a      	mov	r2, r3
 80026fa:	2101      	movs	r1, #1
 80026fc:	f004 fbee 	bl	8006edc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	4f54300a 	.word	0x4f54300a

08002710 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
 800271c:	4613      	mov	r3, r2
 800271e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d107      	bne.n	800273e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800272e:	883b      	ldrh	r3, [r7, #0]
 8002730:	0419      	lsls	r1, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	430a      	orrs	r2, r1
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
 800273c:	e028      	b.n	8002790 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4413      	add	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]
 8002750:	e00d      	b.n	800276e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3340      	adds	r3, #64	; 0x40
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0c1b      	lsrs	r3, r3, #16
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4413      	add	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	3301      	adds	r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	3b01      	subs	r3, #1
 8002774:	429a      	cmp	r2, r3
 8002776:	d3ec      	bcc.n	8002752 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002778:	883b      	ldrh	r3, [r7, #0]
 800277a:	0418      	lsls	r0, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6819      	ldr	r1, [r3, #0]
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	3b01      	subs	r3, #1
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	4302      	orrs	r2, r0
 8002788:	3340      	adds	r3, #64	; 0x40
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	887a      	ldrh	r2, [r7, #2]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_PCDEx_ActivateLPM+0x44>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	10000003 	.word	0x10000003

08002808 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b04      	cmp	r3, #4
 8002832:	d00a      	beq.n	800284a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e01f      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e01d      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800284a:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	490f      	ldr	r1, [pc, #60]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4313      	orrs	r3, r2
 8002858:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800285a:	f7fe faf1 	bl	8000e40 <HAL_GetTick>
 800285e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002860:	e009      	b.n	8002876 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002862:	f7fe faed 	bl	8000e40 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002870:	d901      	bls.n	8002876 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_PWREx_ConfigSupply+0x70>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002882:	d1ee      	bne.n	8002862 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	58024800 	.word	0x58024800

08002894 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	60d3      	str	r3, [r2, #12]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	58024800 	.word	0x58024800

080028b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08c      	sub	sp, #48	; 0x30
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e3ff      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 8087 	beq.w	80029e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d4:	4b99      	ldr	r3, [pc, #612]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028de:	4b97      	ldr	r3, [pc, #604]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d007      	beq.n	80028fa <HAL_RCC_OscConfig+0x46>
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	2b18      	cmp	r3, #24
 80028ee:	d110      	bne.n	8002912 <HAL_RCC_OscConfig+0x5e>
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d10b      	bne.n	8002912 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fa:	4b90      	ldr	r3, [pc, #576]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d06c      	beq.n	80029e0 <HAL_RCC_OscConfig+0x12c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d168      	bne.n	80029e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e3d9      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x76>
 800291c:	4b87      	ldr	r3, [pc, #540]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a86      	ldr	r2, [pc, #536]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	e02e      	b.n	8002988 <HAL_RCC_OscConfig+0xd4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x98>
 8002932:	4b82      	ldr	r3, [pc, #520]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a81      	ldr	r2, [pc, #516]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b7f      	ldr	r3, [pc, #508]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7e      	ldr	r2, [pc, #504]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e01d      	b.n	8002988 <HAL_RCC_OscConfig+0xd4>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0xbc>
 8002956:	4b79      	ldr	r3, [pc, #484]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a78      	ldr	r2, [pc, #480]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 800295c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b76      	ldr	r3, [pc, #472]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a75      	ldr	r2, [pc, #468]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xd4>
 8002970:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a71      	ldr	r2, [pc, #452]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a6e      	ldr	r2, [pc, #440]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d013      	beq.n	80029b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fa56 	bl	8000e40 <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe fa52 	bl	8000e40 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e38d      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029aa:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0xe4>
 80029b6:	e014      	b.n	80029e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe fa42 	bl	8000e40 <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe fa3e 	bl	8000e40 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e379      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029d2:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x10c>
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 80ae 	beq.w	8002b4c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f0:	4b52      	ldr	r3, [pc, #328]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029fa:	4b50      	ldr	r3, [pc, #320]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 80029fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_RCC_OscConfig+0x162>
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	2b18      	cmp	r3, #24
 8002a0a:	d13a      	bne.n	8002a82 <HAL_RCC_OscConfig+0x1ce>
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d135      	bne.n	8002a82 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a16:	4b49      	ldr	r3, [pc, #292]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_RCC_OscConfig+0x17a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e34b      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	f7fe fa37 	bl	8000ea0 <HAL_GetREVID>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d817      	bhi.n	8002a6c <HAL_RCC_OscConfig+0x1b8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d108      	bne.n	8002a56 <HAL_RCC_OscConfig+0x1a2>
 8002a44:	4b3d      	ldr	r3, [pc, #244]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a4c:	4a3b      	ldr	r2, [pc, #236]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a52:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a54:	e07a      	b.n	8002b4c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	031b      	lsls	r3, r3, #12
 8002a64:	4935      	ldr	r1, [pc, #212]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a6a:	e06f      	b.n	8002b4c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4930      	ldr	r1, [pc, #192]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a80:	e064      	b.n	8002b4c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d045      	beq.n	8002b16 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 0219 	bic.w	r2, r3, #25
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4929      	ldr	r1, [pc, #164]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9c:	f7fe f9d0 	bl	8000e40 <HAL_GetTick>
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa4:	f7fe f9cc 	bl	8000e40 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e307      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	f7fe f9ed 	bl	8000ea0 <HAL_GetREVID>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d817      	bhi.n	8002b00 <HAL_RCC_OscConfig+0x24c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d108      	bne.n	8002aea <HAL_RCC_OscConfig+0x236>
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ae0:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae6:	6053      	str	r3, [r2, #4]
 8002ae8:	e030      	b.n	8002b4c <HAL_RCC_OscConfig+0x298>
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	031b      	lsls	r3, r3, #12
 8002af8:	4910      	ldr	r1, [pc, #64]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
 8002afe:	e025      	b.n	8002b4c <HAL_RCC_OscConfig+0x298>
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	490b      	ldr	r1, [pc, #44]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
 8002b14:	e01a      	b.n	8002b4c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <HAL_RCC_OscConfig+0x288>)
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe f98d 	bl	8000e40 <HAL_GetTick>
 8002b26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b28:	e00a      	b.n	8002b40 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2a:	f7fe f989 	bl	8000e40 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d903      	bls.n	8002b40 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e2c4      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
 8002b3c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b40:	4ba4      	ldr	r3, [pc, #656]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ee      	bne.n	8002b2a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a9 	beq.w	8002cac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5a:	4b9e      	ldr	r3, [pc, #632]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b64:	4b9b      	ldr	r3, [pc, #620]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d007      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2cc>
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b18      	cmp	r3, #24
 8002b74:	d13a      	bne.n	8002bec <HAL_RCC_OscConfig+0x338>
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d135      	bne.n	8002bec <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b80:	4b94      	ldr	r3, [pc, #592]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2e4>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e296      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b98:	f7fe f982 	bl	8000ea0 <HAL_GetREVID>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d817      	bhi.n	8002bd6 <HAL_RCC_OscConfig+0x322>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d108      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x30c>
 8002bae:	4b89      	ldr	r3, [pc, #548]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002bb6:	4a87      	ldr	r2, [pc, #540]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bbc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bbe:	e075      	b.n	8002cac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bc0:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	069b      	lsls	r3, r3, #26
 8002bce:	4981      	ldr	r1, [pc, #516]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bd4:	e06a      	b.n	8002cac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bd6:	4b7f      	ldr	r3, [pc, #508]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	061b      	lsls	r3, r3, #24
 8002be4:	497b      	ldr	r1, [pc, #492]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bea:	e05f      	b.n	8002cac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d042      	beq.n	8002c7a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002bf4:	4b77      	ldr	r3, [pc, #476]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a76      	ldr	r2, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c00:	f7fe f91e 	bl	8000e40 <HAL_GetTick>
 8002c04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c08:	f7fe f91a 	bl	8000e40 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e255      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c1a:	4b6e      	ldr	r3, [pc, #440]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0f0      	beq.n	8002c08 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c26:	f7fe f93b 	bl	8000ea0 <HAL_GetREVID>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d817      	bhi.n	8002c64 <HAL_RCC_OscConfig+0x3b0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	2b20      	cmp	r3, #32
 8002c3a:	d108      	bne.n	8002c4e <HAL_RCC_OscConfig+0x39a>
 8002c3c:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c44:	4a63      	ldr	r2, [pc, #396]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c4a:	6053      	str	r3, [r2, #4]
 8002c4c:	e02e      	b.n	8002cac <HAL_RCC_OscConfig+0x3f8>
 8002c4e:	4b61      	ldr	r3, [pc, #388]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	495d      	ldr	r1, [pc, #372]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	604b      	str	r3, [r1, #4]
 8002c62:	e023      	b.n	8002cac <HAL_RCC_OscConfig+0x3f8>
 8002c64:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	061b      	lsls	r3, r3, #24
 8002c72:	4958      	ldr	r1, [pc, #352]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60cb      	str	r3, [r1, #12]
 8002c78:	e018      	b.n	8002cac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a55      	ldr	r2, [pc, #340]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe f8db 	bl	8000e40 <HAL_GetTick>
 8002c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c8e:	f7fe f8d7 	bl	8000e40 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e212      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ca0:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f0      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d036      	beq.n	8002d26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d019      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc0:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	4a43      	ldr	r2, [pc, #268]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe f8b8 	bl	8000e40 <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fe f8b4 	bl	8000e40 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e1ef      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x420>
 8002cf2:	e018      	b.n	8002d26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf4:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf8:	4a36      	ldr	r2, [pc, #216]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002cfa:	f023 0301 	bic.w	r3, r3, #1
 8002cfe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe f89e 	bl	8000e40 <HAL_GetTick>
 8002d04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d08:	f7fe f89a 	bl	8000e40 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1d5      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d1a:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d036      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d019      	beq.n	8002d6e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d46:	f7fe f87b 	bl	8000e40 <HAL_GetTick>
 8002d4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d4e:	f7fe f877 	bl	8000e40 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1b2      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d60:	4b1c      	ldr	r3, [pc, #112]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x49a>
 8002d6c:	e018      	b.n	8002da0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe f861 	bl	8000e40 <HAL_GetTick>
 8002d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d82:	f7fe f85d 	bl	8000e40 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e198      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <HAL_RCC_OscConfig+0x520>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 8085 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_RCC_OscConfig+0x524>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_RCC_OscConfig+0x524>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dba:	f7fe f841 	bl	8000e40 <HAL_GetTick>
 8002dbe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dc0:	e00c      	b.n	8002ddc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe f83d 	bl	8000e40 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b64      	cmp	r3, #100	; 0x64
 8002dce:	d905      	bls.n	8002ddc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e178      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ddc:	4b96      	ldr	r3, [pc, #600]	; (8003038 <HAL_RCC_OscConfig+0x784>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ec      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x54a>
 8002df0:	4b92      	ldr	r3, [pc, #584]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a91      	ldr	r2, [pc, #580]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	e02d      	b.n	8002e5a <HAL_RCC_OscConfig+0x5a6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x56c>
 8002e06:	4b8d      	ldr	r3, [pc, #564]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a8c      	ldr	r2, [pc, #560]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
 8002e12:	4b8a      	ldr	r3, [pc, #552]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a89      	ldr	r2, [pc, #548]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	e01c      	b.n	8002e5a <HAL_RCC_OscConfig+0x5a6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x58e>
 8002e28:	4b84      	ldr	r3, [pc, #528]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a83      	ldr	r2, [pc, #524]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	4b81      	ldr	r3, [pc, #516]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a80      	ldr	r2, [pc, #512]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e00b      	b.n	8002e5a <HAL_RCC_OscConfig+0x5a6>
 8002e42:	4b7e      	ldr	r3, [pc, #504]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a7d      	ldr	r2, [pc, #500]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	4b7b      	ldr	r3, [pc, #492]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a7a      	ldr	r2, [pc, #488]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d015      	beq.n	8002e8e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fd ffed 	bl	8000e40 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fd ffe9 	bl	8000e40 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e122      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e80:	4b6e      	ldr	r3, [pc, #440]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ee      	beq.n	8002e6a <HAL_RCC_OscConfig+0x5b6>
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fd ffd7 	bl	8000e40 <HAL_GetTick>
 8002e92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fd ffd3 	bl	8000e40 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e10c      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002eac:	4b63      	ldr	r3, [pc, #396]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8101 	beq.w	80030c4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ec2:	4b5e      	ldr	r3, [pc, #376]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eca:	2b18      	cmp	r3, #24
 8002ecc:	f000 80bc 	beq.w	8003048 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	f040 8095 	bne.w	8003004 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	4b58      	ldr	r3, [pc, #352]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a57      	ldr	r2, [pc, #348]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fd ffab 	bl	8000e40 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fd ffa7 	bl	8000e40 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0e2      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f00:	4b4e      	ldr	r3, [pc, #312]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f0      	bne.n	8002eee <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f10:	4b4b      	ldr	r3, [pc, #300]	; (8003040 <HAL_RCC_OscConfig+0x78c>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	4946      	ldr	r1, [pc, #280]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	628b      	str	r3, [r1, #40]	; 0x28
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	3b01      	subs	r3, #1
 8002f36:	025b      	lsls	r3, r3, #9
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f40:	3b01      	subs	r3, #1
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f56:	4939      	ldr	r1, [pc, #228]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	4a36      	ldr	r2, [pc, #216]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f62:	f023 0301 	bic.w	r3, r3, #1
 8002f66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6c:	4b35      	ldr	r3, [pc, #212]	; (8003044 <HAL_RCC_OscConfig+0x790>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f74:	00d2      	lsls	r2, r2, #3
 8002f76:	4931      	ldr	r1, [pc, #196]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	f023 020c 	bic.w	r2, r3, #12
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	492c      	ldr	r1, [pc, #176]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f023 0202 	bic.w	r2, r3, #2
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	4928      	ldr	r1, [pc, #160]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fa0:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	4a25      	ldr	r2, [pc, #148]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fac:	4b23      	ldr	r3, [pc, #140]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	4a22      	ldr	r2, [pc, #136]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	4a1f      	ldr	r2, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	4a1c      	ldr	r2, [pc, #112]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fd ff30 	bl	8000e40 <HAL_GetTick>
 8002fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fd ff2c 	bl	8000e40 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e067      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x730>
 8003002:	e05f      	b.n	80030c4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003004:	4b0d      	ldr	r3, [pc, #52]	; (800303c <HAL_RCC_OscConfig+0x788>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0c      	ldr	r2, [pc, #48]	; (800303c <HAL_RCC_OscConfig+0x788>)
 800300a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fd ff16 	bl	8000e40 <HAL_GetTick>
 8003014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003018:	f7fd ff12 	bl	8000e40 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e04d      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_RCC_OscConfig+0x788>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f0      	bne.n	8003018 <HAL_RCC_OscConfig+0x764>
 8003036:	e045      	b.n	80030c4 <HAL_RCC_OscConfig+0x810>
 8003038:	58024800 	.word	0x58024800
 800303c:	58024400 	.word	0x58024400
 8003040:	fffffc0c 	.word	0xfffffc0c
 8003044:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003048:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_RCC_OscConfig+0x81c>)
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_OscConfig+0x81c>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b01      	cmp	r3, #1
 800305a:	d031      	beq.n	80030c0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f003 0203 	and.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d12a      	bne.n	80030c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d122      	bne.n	80030c0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d11a      	bne.n	80030c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0a5b      	lsrs	r3, r3, #9
 800308e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d111      	bne.n	80030c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0e1b      	lsrs	r3, r3, #24
 80030b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3730      	adds	r7, #48	; 0x30
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	58024400 	.word	0x58024400

080030d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e19c      	b.n	8003422 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b8a      	ldr	r3, [pc, #552]	; (8003314 <HAL_RCC_ClockConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b87      	ldr	r3, [pc, #540]	; (8003314 <HAL_RCC_ClockConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4985      	ldr	r1, [pc, #532]	; (8003314 <HAL_RCC_ClockConfig+0x240>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b83      	ldr	r3, [pc, #524]	; (8003314 <HAL_RCC_ClockConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e184      	b.n	8003422 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	4b7b      	ldr	r3, [pc, #492]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003130:	429a      	cmp	r2, r3
 8003132:	d908      	bls.n	8003146 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003134:	4b78      	ldr	r3, [pc, #480]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	4975      	ldr	r1, [pc, #468]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003142:	4313      	orrs	r3, r2
 8003144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800315e:	429a      	cmp	r2, r3
 8003160:	d908      	bls.n	8003174 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003162:	4b6d      	ldr	r3, [pc, #436]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	496a      	ldr	r1, [pc, #424]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003170:	4313      	orrs	r3, r2
 8003172:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0310 	and.w	r3, r3, #16
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	4b64      	ldr	r3, [pc, #400]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800318c:	429a      	cmp	r2, r3
 800318e:	d908      	bls.n	80031a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003190:	4b61      	ldr	r3, [pc, #388]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	495e      	ldr	r1, [pc, #376]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d010      	beq.n	80031d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d908      	bls.n	80031d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031be:	4b56      	ldr	r3, [pc, #344]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	4953      	ldr	r1, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4b4d      	ldr	r3, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d908      	bls.n	80031fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ec:	4b4a      	ldr	r3, [pc, #296]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f023 020f 	bic.w	r2, r3, #15
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4947      	ldr	r1, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d055      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800320a:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4940      	ldr	r1, [pc, #256]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003218:	4313      	orrs	r3, r2
 800321a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d107      	bne.n	8003234 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003224:	4b3c      	ldr	r3, [pc, #240]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d121      	bne.n	8003274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0f6      	b.n	8003422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d107      	bne.n	800324c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d115      	bne.n	8003274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0ea      	b.n	8003422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003254:	4b30      	ldr	r3, [pc, #192]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0de      	b.n	8003422 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003264:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0d6      	b.n	8003422 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f023 0207 	bic.w	r2, r3, #7
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4925      	ldr	r1, [pc, #148]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 8003282:	4313      	orrs	r3, r2
 8003284:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003286:	f7fd fddb 	bl	8000e40 <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328c:	e00a      	b.n	80032a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328e:	f7fd fdd7 	bl	8000e40 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f241 3288 	movw	r2, #5000	; 0x1388
 800329c:	4293      	cmp	r3, r2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e0be      	b.n	8003422 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a4:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d1eb      	bne.n	800328e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d010      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d208      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f023 020f 	bic.w	r2, r3, #15
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x244>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d214      	bcs.n	800331c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <HAL_RCC_ClockConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 020f 	bic.w	r2, r3, #15
 80032fa:	4906      	ldr	r1, [pc, #24]	; (8003314 <HAL_RCC_ClockConfig+0x240>)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003302:	4b04      	ldr	r3, [pc, #16]	; (8003314 <HAL_RCC_ClockConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d005      	beq.n	800331c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e086      	b.n	8003422 <HAL_RCC_ClockConfig+0x34e>
 8003314:	52002000 	.word	0x52002000
 8003318:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d010      	beq.n	800334a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003334:	429a      	cmp	r2, r3
 8003336:	d208      	bcs.n	800334a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003338:	4b3c      	ldr	r3, [pc, #240]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	4939      	ldr	r1, [pc, #228]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 8003346:	4313      	orrs	r3, r2
 8003348:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003362:	429a      	cmp	r2, r3
 8003364:	d208      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003366:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	492e      	ldr	r1, [pc, #184]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 8003374:	4313      	orrs	r3, r2
 8003376:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	4b28      	ldr	r3, [pc, #160]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003390:	429a      	cmp	r2, r3
 8003392:	d208      	bcs.n	80033a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003394:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	4922      	ldr	r1, [pc, #136]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d010      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	4b1d      	ldr	r3, [pc, #116]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033be:	429a      	cmp	r2, r3
 80033c0:	d208      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4917      	ldr	r1, [pc, #92]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033d4:	f000 f834 	bl	8003440 <HAL_RCC_GetSysClockFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b14      	ldr	r3, [pc, #80]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	4912      	ldr	r1, [pc, #72]	; (8003430 <HAL_RCC_ClockConfig+0x35c>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <HAL_RCC_ClockConfig+0x358>)
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <HAL_RCC_ClockConfig+0x35c>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <HAL_RCC_ClockConfig+0x360>)
 800340a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800340c:	4a0a      	ldr	r2, [pc, #40]	; (8003438 <HAL_RCC_ClockConfig+0x364>)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003412:	4b0a      	ldr	r3, [pc, #40]	; (800343c <HAL_RCC_ClockConfig+0x368>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fcc8 	bl	8000dac <HAL_InitTick>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	58024400 	.word	0x58024400
 8003430:	08009474 	.word	0x08009474
 8003434:	20000004 	.word	0x20000004
 8003438:	20000000 	.word	0x20000000
 800343c:	20000008 	.word	0x20000008

08003440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003446:	4bb3      	ldr	r3, [pc, #716]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800344e:	2b18      	cmp	r3, #24
 8003450:	f200 8155 	bhi.w	80036fe <HAL_RCC_GetSysClockFreq+0x2be>
 8003454:	a201      	add	r2, pc, #4	; (adr r2, 800345c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345a:	bf00      	nop
 800345c:	080034c1 	.word	0x080034c1
 8003460:	080036ff 	.word	0x080036ff
 8003464:	080036ff 	.word	0x080036ff
 8003468:	080036ff 	.word	0x080036ff
 800346c:	080036ff 	.word	0x080036ff
 8003470:	080036ff 	.word	0x080036ff
 8003474:	080036ff 	.word	0x080036ff
 8003478:	080036ff 	.word	0x080036ff
 800347c:	080034e7 	.word	0x080034e7
 8003480:	080036ff 	.word	0x080036ff
 8003484:	080036ff 	.word	0x080036ff
 8003488:	080036ff 	.word	0x080036ff
 800348c:	080036ff 	.word	0x080036ff
 8003490:	080036ff 	.word	0x080036ff
 8003494:	080036ff 	.word	0x080036ff
 8003498:	080036ff 	.word	0x080036ff
 800349c:	080034ed 	.word	0x080034ed
 80034a0:	080036ff 	.word	0x080036ff
 80034a4:	080036ff 	.word	0x080036ff
 80034a8:	080036ff 	.word	0x080036ff
 80034ac:	080036ff 	.word	0x080036ff
 80034b0:	080036ff 	.word	0x080036ff
 80034b4:	080036ff 	.word	0x080036ff
 80034b8:	080036ff 	.word	0x080036ff
 80034bc:	080034f3 	.word	0x080034f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034c0:	4b94      	ldr	r3, [pc, #592]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d009      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034cc:	4b91      	ldr	r3, [pc, #580]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	08db      	lsrs	r3, r3, #3
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	4a90      	ldr	r2, [pc, #576]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
 80034dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034de:	e111      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034e0:	4b8d      	ldr	r3, [pc, #564]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034e2:	61bb      	str	r3, [r7, #24]
    break;
 80034e4:	e10e      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034e6:	4b8d      	ldr	r3, [pc, #564]	; (800371c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034e8:	61bb      	str	r3, [r7, #24]
    break;
 80034ea:	e10b      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034ec:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034ee:	61bb      	str	r3, [r7, #24]
    break;
 80034f0:	e108      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034f2:	4b88      	ldr	r3, [pc, #544]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034fc:	4b85      	ldr	r3, [pc, #532]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003506:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003508:	4b82      	ldr	r3, [pc, #520]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003512:	4b80      	ldr	r3, [pc, #512]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003516:	08db      	lsrs	r3, r3, #3
 8003518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	fb02 f303 	mul.w	r3, r2, r3
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80e1 	beq.w	80036f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b02      	cmp	r3, #2
 800353a:	f000 8083 	beq.w	8003644 <HAL_RCC_GetSysClockFreq+0x204>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b02      	cmp	r3, #2
 8003542:	f200 80a1 	bhi.w	8003688 <HAL_RCC_GetSysClockFreq+0x248>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x114>
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d056      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003552:	e099      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003554:	4b6f      	ldr	r3, [pc, #444]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02d      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003560:	4b6c      	ldr	r3, [pc, #432]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	08db      	lsrs	r3, r3, #3
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	4a6b      	ldr	r2, [pc, #428]	; (8003718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358a:	4b62      	ldr	r3, [pc, #392]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003592:	ee07 3a90 	vmov	s15, r3
 8003596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359a:	ed97 6a02 	vldr	s12, [r7, #8]
 800359e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80035ba:	e087      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003728 <HAL_RCC_GetSysClockFreq+0x2e8>
 80035ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ce:	4b51      	ldr	r3, [pc, #324]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035de:	ed97 6a02 	vldr	s12, [r7, #8]
 80035e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035fe:	e065      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800372c <HAL_RCC_GetSysClockFreq+0x2ec>
 800360e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003612:	4b40      	ldr	r3, [pc, #256]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003622:	ed97 6a02 	vldr	s12, [r7, #8]
 8003626:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800362a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800363a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003642:	e043      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003730 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003666:	ed97 6a02 	vldr	s12, [r7, #8]
 800366a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800366e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003686:	e021      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003692:	eddf 6a26 	vldr	s13, [pc, #152]	; 800372c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369a:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80036ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ca:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	0a5b      	lsrs	r3, r3, #9
 80036d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036d6:	3301      	adds	r3, #1
 80036d8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80036e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f0:	ee17 3a90 	vmov	r3, s15
 80036f4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036f6:	e005      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
    break;
 80036fc:	e002      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003700:	61bb      	str	r3, [r7, #24]
    break;
 8003702:	bf00      	nop
  }

  return sysclockfreq;
 8003704:	69bb      	ldr	r3, [r7, #24]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	58024400 	.word	0x58024400
 8003718:	03d09000 	.word	0x03d09000
 800371c:	003d0900 	.word	0x003d0900
 8003720:	017d7840 	.word	0x017d7840
 8003724:	46000000 	.word	0x46000000
 8003728:	4c742400 	.word	0x4c742400
 800372c:	4a742400 	.word	0x4a742400
 8003730:	4bbebc20 	.word	0x4bbebc20

08003734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800373a:	f7ff fe81 	bl	8003440 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCC_GetHCLKFreq+0x50>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	0a1b      	lsrs	r3, r3, #8
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490f      	ldr	r1, [pc, #60]	; (8003788 <HAL_RCC_GetHCLKFreq+0x54>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	fa22 f303 	lsr.w	r3, r2, r3
 8003756:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_RCC_GetHCLKFreq+0x50>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <HAL_RCC_GetHCLKFreq+0x54>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <HAL_RCC_GetHCLKFreq+0x58>)
 8003770:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003772:	4a07      	ldr	r2, [pc, #28]	; (8003790 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_RCC_GetHCLKFreq+0x58>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	58024400 	.word	0x58024400
 8003788:	08009474 	.word	0x08009474
 800378c:	20000004 	.word	0x20000004
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800379c:	2300      	movs	r3, #0
 800379e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037a0:	2300      	movs	r3, #0
 80037a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d03f      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037b8:	d02a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037be:	d824      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c4:	d018      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ca:	d81e      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d4:	d007      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037d6:	e018      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d8:	4bab      	ldr	r3, [pc, #684]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	4aaa      	ldr	r2, [pc, #680]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037e4:	e015      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2102      	movs	r1, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 ff11 	bl	8004614 <RCCEx_PLL2_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037f6:	e00c      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3324      	adds	r3, #36	; 0x24
 80037fc:	2102      	movs	r1, #2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 ffba 	bl	8004778 <RCCEx_PLL3_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
      break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003818:	4b9b      	ldr	r3, [pc, #620]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003824:	4998      	ldr	r1, [pc, #608]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003826:	4313      	orrs	r3, r2
 8003828:	650b      	str	r3, [r1, #80]	; 0x50
 800382a:	e001      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d03d      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	2b04      	cmp	r3, #4
 8003842:	d826      	bhi.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003844:	a201      	add	r2, pc, #4	; (adr r2, 800384c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384a:	bf00      	nop
 800384c:	08003861 	.word	0x08003861
 8003850:	0800386f 	.word	0x0800386f
 8003854:	08003881 	.word	0x08003881
 8003858:	08003899 	.word	0x08003899
 800385c:	08003899 	.word	0x08003899
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003860:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	4a88      	ldr	r2, [pc, #544]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800386c:	e015      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fecd 	bl	8004614 <RCCEx_PLL2_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800387e:	e00c      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3324      	adds	r3, #36	; 0x24
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f000 ff76 	bl	8004778 <RCCEx_PLL3_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003890:	e003      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
      break;
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038a0:	4b79      	ldr	r3, [pc, #484]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	f023 0207 	bic.w	r2, r3, #7
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	4976      	ldr	r1, [pc, #472]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	650b      	str	r3, [r1, #80]	; 0x50
 80038b2:	e001      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d042      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038cc:	d02b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d2:	d825      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038d4:	2bc0      	cmp	r3, #192	; 0xc0
 80038d6:	d028      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038d8:	2bc0      	cmp	r3, #192	; 0xc0
 80038da:	d821      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038dc:	2b80      	cmp	r3, #128	; 0x80
 80038de:	d016      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80038e0:	2b80      	cmp	r3, #128	; 0x80
 80038e2:	d81d      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80038e8:	2b40      	cmp	r3, #64	; 0x40
 80038ea:	d007      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80038ec:	e018      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ee:	4b66      	ldr	r3, [pc, #408]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	4a65      	ldr	r2, [pc, #404]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038fa:	e017      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fe86 	bl	8004614 <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800390c:	e00e      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3324      	adds	r3, #36	; 0x24
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f000 ff2f 	bl	8004778 <RCCEx_PLL3_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800391e:	e005      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
      break;
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800392a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003932:	4b55      	ldr	r3, [pc, #340]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	4952      	ldr	r1, [pc, #328]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	650b      	str	r3, [r1, #80]	; 0x50
 8003944:	e001      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	2b00      	cmp	r3, #0
 8003954:	d049      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800395c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003960:	d030      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003966:	d82a      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003968:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800396c:	d02c      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800396e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003972:	d824      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003978:	d018      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397e:	d81e      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003984:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003988:	d007      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800398a:	e018      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398c:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4a3d      	ldr	r2, [pc, #244]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003996:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003998:	e017      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3304      	adds	r3, #4
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fe37 	bl	8004614 <RCCEx_PLL2_Config>
 80039a6:	4603      	mov	r3, r0
 80039a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039aa:	e00e      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3324      	adds	r3, #36	; 0x24
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fee0 	bl	8004778 <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039bc:	e005      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	75fb      	strb	r3, [r7, #23]
      break;
 80039c2:	e002      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039de:	492a      	ldr	r1, [pc, #168]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	658b      	str	r3, [r1, #88]	; 0x58
 80039e4:	e001      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d04c      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a00:	d030      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a06:	d82a      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a0c:	d02c      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a12:	d824      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a18:	d018      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a1e:	d81e      	bhi.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a28:	d007      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a2a:	e018      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2c:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a38:	e017      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2100      	movs	r1, #0
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 fde7 	bl	8004614 <RCCEx_PLL2_Config>
 8003a46:	4603      	mov	r3, r0
 8003a48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a4a:	e00e      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3324      	adds	r3, #36	; 0x24
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fe90 	bl	8004778 <RCCEx_PLL3_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a5c:	e005      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a64:	bf00      	nop
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10d      	bne.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a7e:	4902      	ldr	r1, [pc, #8]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	658b      	str	r3, [r1, #88]	; 0x58
 8003a84:	e004      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003a86:	bf00      	nop
 8003a88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
 8003a8e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d032      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	2b30      	cmp	r3, #48	; 0x30
 8003aa2:	d01c      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003aa4:	2b30      	cmp	r3, #48	; 0x30
 8003aa6:	d817      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d00c      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d813      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d016      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d10f      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab8:	4baf      	ldr	r3, [pc, #700]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	4aae      	ldr	r2, [pc, #696]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ac4:	e00e      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2102      	movs	r1, #2
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fda1 	bl	8004614 <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003ad6:	e005      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
      break;
 8003adc:	e002      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae4:	7dfb      	ldrb	r3, [r7, #23]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003aea:	4ba3      	ldr	r3, [pc, #652]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	49a0      	ldr	r1, [pc, #640]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003afc:	e001      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d047      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b16:	d030      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b1c:	d82a      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b22:	d02c      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003b24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b28:	d824      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2e:	d018      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b34:	d81e      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d007      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003b40:	e018      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b42:	4b8d      	ldr	r3, [pc, #564]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b46:	4a8c      	ldr	r2, [pc, #560]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b4e:	e017      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fd5c 	bl	8004614 <RCCEx_PLL2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b60:	e00e      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3324      	adds	r3, #36	; 0x24
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fe05 	bl	8004778 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b72:	e005      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75fb      	strb	r3, [r7, #23]
      break;
 8003b78:	e002      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003b7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b86:	4b7c      	ldr	r3, [pc, #496]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	4979      	ldr	r1, [pc, #484]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	650b      	str	r3, [r1, #80]	; 0x50
 8003b98:	e001      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d049      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb2:	d02e      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb8:	d828      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bbe:	d02a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003bc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bc4:	d822      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bca:	d026      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003bcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bd0:	d81c      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd6:	d010      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bdc:	d816      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d01d      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be6:	d111      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fd10 	bl	8004614 <RCCEx_PLL2_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bf8:	e012      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3324      	adds	r3, #36	; 0x24
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fdb9 	bl	8004778 <RCCEx_PLL3_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c0a:	e009      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c10:	e006      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c12:	bf00      	nop
 8003c14:	e004      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c16:	bf00      	nop
 8003c18:	e002      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c26:	4b54      	ldr	r3, [pc, #336]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c32:	4951      	ldr	r1, [pc, #324]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	650b      	str	r3, [r1, #80]	; 0x50
 8003c38:	e001      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d04b      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c54:	d02e      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c5a:	d828      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d02a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c66:	d822      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c6c:	d026      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c72:	d81c      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c78:	d010      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c7e:	d816      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d01d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c88:	d111      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fcbf 	bl	8004614 <RCCEx_PLL2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c9a:	e012      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3324      	adds	r3, #36	; 0x24
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fd68 	bl	8004778 <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cac:	e009      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb2:	e006      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cb4:	bf00      	nop
 8003cb6:	e004      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cb8:	bf00      	nop
 8003cba:	e002      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cbc:	bf00      	nop
 8003cbe:	e000      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cd6:	4928      	ldr	r1, [pc, #160]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	658b      	str	r3, [r1, #88]	; 0x58
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02f      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf6:	d00e      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cfc:	d814      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d06:	d10f      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d14:	e00c      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fc79 	bl	8004614 <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2c:	e000      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d42:	490d      	ldr	r1, [pc, #52]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	650b      	str	r3, [r1, #80]	; 0x50
 8003d48:	e001      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d033      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d81c      	bhi.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003da3 	.word	0x08003da3
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d8b 	.word	0x08003d8b
 8003d74:	08003da3 	.word	0x08003da3
 8003d78:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7c:	4bb8      	ldr	r3, [pc, #736]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4ab7      	ldr	r2, [pc, #732]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d88:	e00c      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fc3f 	bl	8004614 <RCCEx_PLL2_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da4:	7dfb      	ldrb	r3, [r7, #23]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003daa:	4bad      	ldr	r3, [pc, #692]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dae:	f023 0203 	bic.w	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	49aa      	ldr	r1, [pc, #680]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	7dfb      	ldrb	r3, [r7, #23]
 8003dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8086 	beq.w	8003edc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd0:	4ba4      	ldr	r3, [pc, #656]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4aa3      	ldr	r2, [pc, #652]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ddc:	f7fd f830 	bl	8000e40 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de2:	e009      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de4:	f7fd f82c 	bl	8000e40 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d902      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	75fb      	strb	r3, [r7, #23]
        break;
 8003df6:	e005      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df8:	4b9a      	ldr	r3, [pc, #616]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ef      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d166      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e0a:	4b95      	ldr	r3, [pc, #596]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e14:	4053      	eors	r3, r2
 8003e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d013      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e1e:	4b90      	ldr	r3, [pc, #576]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e28:	4b8d      	ldr	r3, [pc, #564]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	4a8c      	ldr	r2, [pc, #560]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e34:	4b8a      	ldr	r3, [pc, #552]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a89      	ldr	r2, [pc, #548]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e40:	4a87      	ldr	r2, [pc, #540]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e50:	d115      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fc fff5 	bl	8000e40 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e58:	e00b      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e5a:	f7fc fff1 	bl	8000e40 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d902      	bls.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8003e70:	e005      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e72:	4b7b      	ldr	r3, [pc, #492]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0ed      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d126      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003e94:	4b72      	ldr	r3, [pc, #456]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ea2:	0919      	lsrs	r1, r3, #4
 8003ea4:	4b70      	ldr	r3, [pc, #448]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003ea6:	400b      	ands	r3, r1
 8003ea8:	496d      	ldr	r1, [pc, #436]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	610b      	str	r3, [r1, #16]
 8003eae:	e005      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	4a6a      	ldr	r2, [pc, #424]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eba:	6113      	str	r3, [r2, #16]
 8003ebc:	4b68      	ldr	r3, [pc, #416]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ebe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eca:	4965      	ldr	r1, [pc, #404]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	670b      	str	r3, [r1, #112]	; 0x70
 8003ed0:	e004      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed2:	7dfb      	ldrb	r3, [r7, #23]
 8003ed4:	75bb      	strb	r3, [r7, #22]
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d07e      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eec:	2b28      	cmp	r3, #40	; 0x28
 8003eee:	d867      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003fc7 	.word	0x08003fc7
 8003efc:	08003fc1 	.word	0x08003fc1
 8003f00:	08003fc1 	.word	0x08003fc1
 8003f04:	08003fc1 	.word	0x08003fc1
 8003f08:	08003fc1 	.word	0x08003fc1
 8003f0c:	08003fc1 	.word	0x08003fc1
 8003f10:	08003fc1 	.word	0x08003fc1
 8003f14:	08003fc1 	.word	0x08003fc1
 8003f18:	08003f9d 	.word	0x08003f9d
 8003f1c:	08003fc1 	.word	0x08003fc1
 8003f20:	08003fc1 	.word	0x08003fc1
 8003f24:	08003fc1 	.word	0x08003fc1
 8003f28:	08003fc1 	.word	0x08003fc1
 8003f2c:	08003fc1 	.word	0x08003fc1
 8003f30:	08003fc1 	.word	0x08003fc1
 8003f34:	08003fc1 	.word	0x08003fc1
 8003f38:	08003faf 	.word	0x08003faf
 8003f3c:	08003fc1 	.word	0x08003fc1
 8003f40:	08003fc1 	.word	0x08003fc1
 8003f44:	08003fc1 	.word	0x08003fc1
 8003f48:	08003fc1 	.word	0x08003fc1
 8003f4c:	08003fc1 	.word	0x08003fc1
 8003f50:	08003fc1 	.word	0x08003fc1
 8003f54:	08003fc1 	.word	0x08003fc1
 8003f58:	08003fc7 	.word	0x08003fc7
 8003f5c:	08003fc1 	.word	0x08003fc1
 8003f60:	08003fc1 	.word	0x08003fc1
 8003f64:	08003fc1 	.word	0x08003fc1
 8003f68:	08003fc1 	.word	0x08003fc1
 8003f6c:	08003fc1 	.word	0x08003fc1
 8003f70:	08003fc1 	.word	0x08003fc1
 8003f74:	08003fc1 	.word	0x08003fc1
 8003f78:	08003fc7 	.word	0x08003fc7
 8003f7c:	08003fc1 	.word	0x08003fc1
 8003f80:	08003fc1 	.word	0x08003fc1
 8003f84:	08003fc1 	.word	0x08003fc1
 8003f88:	08003fc1 	.word	0x08003fc1
 8003f8c:	08003fc1 	.word	0x08003fc1
 8003f90:	08003fc1 	.word	0x08003fc1
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fc7 	.word	0x08003fc7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fb36 	bl	8004614 <RCCEx_PLL2_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fac:	e00c      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3324      	adds	r3, #36	; 0x24
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fbdf 	bl	8004778 <RCCEx_PLL3_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fbe:	e003      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fc8:	7dfb      	ldrb	r3, [r7, #23]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fce:	4b24      	ldr	r3, [pc, #144]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fda:	4921      	ldr	r1, [pc, #132]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	654b      	str	r3, [r1, #84]	; 0x54
 8003fe0:	e001      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d03e      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d820      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004043 	.word	0x08004043
 8004004:	08004019 	.word	0x08004019
 8004008:	0800402b 	.word	0x0800402b
 800400c:	08004043 	.word	0x08004043
 8004010:	08004043 	.word	0x08004043
 8004014:	08004043 	.word	0x08004043
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f000 faf8 	bl	8004614 <RCCEx_PLL2_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004028:	e00c      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3324      	adds	r3, #36	; 0x24
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fba1 	bl	8004778 <RCCEx_PLL3_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800403a:	e003      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
      break;
 8004040:	e000      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d110      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	f023 0207 	bic.w	r2, r3, #7
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004056:	4902      	ldr	r1, [pc, #8]	; (8004060 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004058:	4313      	orrs	r3, r2
 800405a:	654b      	str	r3, [r1, #84]	; 0x54
 800405c:	e008      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800405e:	bf00      	nop
 8004060:	58024400 	.word	0x58024400
 8004064:	58024800 	.word	0x58024800
 8004068:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d039      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	2b05      	cmp	r3, #5
 8004084:	d820      	bhi.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8004086:	a201      	add	r2, pc, #4	; (adr r2, 800408c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	080040cf 	.word	0x080040cf
 8004090:	080040a5 	.word	0x080040a5
 8004094:	080040b7 	.word	0x080040b7
 8004098:	080040cf 	.word	0x080040cf
 800409c:	080040cf 	.word	0x080040cf
 80040a0:	080040cf 	.word	0x080040cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	2101      	movs	r1, #1
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fab2 	bl	8004614 <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040b4:	e00c      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3324      	adds	r3, #36	; 0x24
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fb5b 	bl	8004778 <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040c6:	e003      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	75fb      	strb	r3, [r7, #23]
      break;
 80040cc:	e000      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80040ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040d6:	4bb7      	ldr	r3, [pc, #732]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e4:	49b3      	ldr	r1, [pc, #716]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	658b      	str	r3, [r1, #88]	; 0x58
 80040ea:	e001      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d04b      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004106:	d02e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800410c:	d828      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004112:	d02a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004118:	d822      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800411a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800411e:	d026      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004124:	d81c      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800412a:	d010      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800412c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004130:	d816      	bhi.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01d      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800413a:	d111      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2100      	movs	r1, #0
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa66 	bl	8004614 <RCCEx_PLL2_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800414c:	e012      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fb0f 	bl	8004778 <RCCEx_PLL3_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
      break;
 8004164:	e006      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8004172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417a:	4b8e      	ldr	r3, [pc, #568]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004188:	498a      	ldr	r1, [pc, #552]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800418a:	4313      	orrs	r3, r2
 800418c:	654b      	str	r3, [r1, #84]	; 0x54
 800418e:	e001      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	7dfb      	ldrb	r3, [r7, #23]
 8004192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d04b      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041aa:	d02e      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80041ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041b0:	d828      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	d02a      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80041b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041bc:	d822      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c2:	d026      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c8:	d81c      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ce:	d010      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80041d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d4:	d816      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d01d      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d111      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2100      	movs	r1, #0
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fa14 	bl	8004614 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041f0:	e012      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3324      	adds	r3, #36	; 0x24
 80041f6:	2102      	movs	r1, #2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fabd 	bl	8004778 <RCCEx_PLL3_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004202:	e009      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800420a:	bf00      	nop
 800420c:	e004      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800421e:	4b65      	ldr	r3, [pc, #404]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800422c:	4961      	ldr	r1, [pc, #388]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800422e:	4313      	orrs	r3, r2
 8004230:	658b      	str	r3, [r1, #88]	; 0x58
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d04b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800424e:	d02e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004250:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004254:	d828      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425a:	d02a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800425c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004260:	d822      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004262:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004266:	d026      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004268:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800426c:	d81c      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800426e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004272:	d010      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004278:	d816      	bhi.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01d      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	d111      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3304      	adds	r3, #4
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f9c2 	bl	8004614 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004294:	e012      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3324      	adds	r3, #36	; 0x24
 800429a:	2102      	movs	r1, #2
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fa6b 	bl	8004778 <RCCEx_PLL3_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042a6:	e009      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
      break;
 80042ac:	e006      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042ae:	bf00      	nop
 80042b0:	e004      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042b2:	bf00      	nop
 80042b4:	e002      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042b6:	bf00      	nop
 80042b8:	e000      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80042ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042bc:	7dfb      	ldrb	r3, [r7, #23]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042c2:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d0:	4938      	ldr	r1, [pc, #224]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	658b      	str	r3, [r1, #88]	; 0x58
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f2:	d10a      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3324      	adds	r3, #36	; 0x24
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fa3c 	bl	8004778 <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800430a:	4b2a      	ldr	r3, [pc, #168]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004318:	4926      	ldr	r1, [pc, #152]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800431a:	4313      	orrs	r3, r2
 800431c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01a      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004334:	d10a      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fa1b 	bl	8004778 <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435a:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800435c:	4313      	orrs	r3, r2
 800435e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d036      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004376:	d01f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800437c:	d817      	bhi.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004386:	d009      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004388:	e011      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	2100      	movs	r1, #0
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f93f 	bl	8004614 <RCCEx_PLL2_Config>
 8004396:	4603      	mov	r3, r0
 8004398:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800439a:	e00e      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3324      	adds	r3, #36	; 0x24
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f9e8 	bl	8004778 <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043ac:	e005      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
      break;
 80043b2:	e002      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80043b4:	58024400 	.word	0x58024400
      break;
 80043b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c0:	4b93      	ldr	r3, [pc, #588]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043ce:	4990      	ldr	r1, [pc, #576]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	658b      	str	r3, [r1, #88]	; 0x58
 80043d4:	e001      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	7dfb      	ldrb	r3, [r7, #23]
 80043d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d033      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f0:	d01c      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80043f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043f6:	d816      	bhi.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80043f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fc:	d003      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80043fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004402:	d007      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004404:	e00f      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004406:	4b82      	ldr	r3, [pc, #520]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	4a81      	ldr	r2, [pc, #516]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800440c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004412:	e00c      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3324      	adds	r3, #36	; 0x24
 8004418:	2101      	movs	r1, #1
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f9ac 	bl	8004778 <RCCEx_PLL3_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004424:	e003      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
      break;
 800442a:	e000      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800442c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004434:	4b76      	ldr	r3, [pc, #472]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004442:	4973      	ldr	r1, [pc, #460]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004444:	4313      	orrs	r3, r2
 8004446:	654b      	str	r3, [r1, #84]	; 0x54
 8004448:	e001      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d029      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d007      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004468:	e00f      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446a:	4b69      	ldr	r3, [pc, #420]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	4a68      	ldr	r2, [pc, #416]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004476:	e00b      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	2102      	movs	r1, #2
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f8c8 	bl	8004614 <RCCEx_PLL2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004488:	e002      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
      break;
 800448e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004496:	4b5e      	ldr	r3, [pc, #376]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	495b      	ldr	r1, [pc, #364]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044a8:	e001      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3324      	adds	r3, #36	; 0x24
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f959 	bl	8004778 <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d030      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e4:	d017      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80044e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ea:	d811      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f0:	d013      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80044f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f6:	d80b      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80044fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004500:	d106      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004502:	4b43      	ldr	r3, [pc, #268]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	4a42      	ldr	r2, [pc, #264]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800450e:	e007      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	75fb      	strb	r3, [r7, #23]
      break;
 8004514:	e004      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004516:	bf00      	nop
 8004518:	e002      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800451e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004526:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004532:	4937      	ldr	r1, [pc, #220]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	654b      	str	r3, [r1, #84]	; 0x54
 8004538:	e001      	b.n	800453e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800454a:	4b31      	ldr	r3, [pc, #196]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800454c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	492e      	ldr	r1, [pc, #184]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004558:	4313      	orrs	r3, r2
 800455a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004568:	4b29      	ldr	r3, [pc, #164]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004576:	4926      	ldr	r1, [pc, #152]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004578:	4313      	orrs	r3, r2
 800457a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004588:	4b21      	ldr	r3, [pc, #132]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800458a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004594:	491e      	ldr	r1, [pc, #120]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045b0:	6113      	str	r3, [r2, #16]
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045bc:	4914      	ldr	r1, [pc, #80]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	da08      	bge.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	490e      	ldr	r1, [pc, #56]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	4906      	ldr	r1, [pc, #24]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80045fc:	7dbb      	ldrb	r3, [r7, #22]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	58024400 	.word	0x58024400

08004614 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004622:	4b53      	ldr	r3, [pc, #332]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d101      	bne.n	8004632 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e099      	b.n	8004766 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004632:	4b4f      	ldr	r3, [pc, #316]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a4e      	ldr	r2, [pc, #312]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004638:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800463c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463e:	f7fc fbff 	bl	8000e40 <HAL_GetTick>
 8004642:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004644:	e008      	b.n	8004658 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004646:	f7fc fbfb 	bl	8000e40 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e086      	b.n	8004766 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004658:	4b45      	ldr	r3, [pc, #276]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004664:	4b42      	ldr	r3, [pc, #264]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	031b      	lsls	r3, r3, #12
 8004672:	493f      	ldr	r1, [pc, #252]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004674:	4313      	orrs	r3, r2
 8004676:	628b      	str	r3, [r1, #40]	; 0x28
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	3b01      	subs	r3, #1
 800467e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	3b01      	subs	r3, #1
 8004688:	025b      	lsls	r3, r3, #9
 800468a:	b29b      	uxth	r3, r3
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	061b      	lsls	r3, r3, #24
 80046a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046a8:	4931      	ldr	r1, [pc, #196]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	492d      	ldr	r1, [pc, #180]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	f023 0220 	bic.w	r2, r3, #32
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	4928      	ldr	r1, [pc, #160]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046d2:	4b27      	ldr	r3, [pc, #156]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	4a26      	ldr	r2, [pc, #152]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046d8:	f023 0310 	bic.w	r3, r3, #16
 80046dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <RCCEx_PLL2_Config+0x160>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	69d2      	ldr	r2, [r2, #28]
 80046ea:	00d2      	lsls	r2, r2, #3
 80046ec:	4920      	ldr	r1, [pc, #128]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80046f2:	4b1f      	ldr	r3, [pc, #124]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 80046f8:	f043 0310 	orr.w	r3, r3, #16
 80046fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d106      	bne.n	8004712 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	4a19      	ldr	r2, [pc, #100]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 800470a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800470e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004710:	e00f      	b.n	8004732 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d106      	bne.n	8004726 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	4a14      	ldr	r2, [pc, #80]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 800471e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004722:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004724:	e005      	b.n	8004732 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 800472c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004730:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004732:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 8004738:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800473c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473e:	f7fc fb7f 	bl	8000e40 <HAL_GetTick>
 8004742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004744:	e008      	b.n	8004758 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004746:	f7fc fb7b 	bl	8000e40 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e006      	b.n	8004766 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <RCCEx_PLL2_Config+0x15c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	58024400 	.word	0x58024400
 8004774:	ffff0007 	.word	0xffff0007

08004778 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004786:	4b53      	ldr	r3, [pc, #332]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b03      	cmp	r3, #3
 8004790:	d101      	bne.n	8004796 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e099      	b.n	80048ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004796:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a4e      	ldr	r2, [pc, #312]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800479c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a2:	f7fc fb4d 	bl	8000e40 <HAL_GetTick>
 80047a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047a8:	e008      	b.n	80047bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047aa:	f7fc fb49 	bl	8000e40 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e086      	b.n	80048ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047bc:	4b45      	ldr	r3, [pc, #276]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f0      	bne.n	80047aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047c8:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	051b      	lsls	r3, r3, #20
 80047d6:	493f      	ldr	r1, [pc, #252]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	628b      	str	r3, [r1, #40]	; 0x28
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	025b      	lsls	r3, r3, #9
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	041b      	lsls	r3, r3, #16
 80047fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	3b01      	subs	r3, #1
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800480c:	4931      	ldr	r1, [pc, #196]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004812:	4b30      	ldr	r3, [pc, #192]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	492d      	ldr	r1, [pc, #180]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004824:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	4928      	ldr	r1, [pc, #160]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004836:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800483c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <RCCEx_PLL3_Config+0x160>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	69d2      	ldr	r2, [r2, #28]
 800484e:	00d2      	lsls	r2, r2, #3
 8004850:	4920      	ldr	r1, [pc, #128]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004852:	4313      	orrs	r3, r2
 8004854:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004856:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485a:	4a1e      	ldr	r2, [pc, #120]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800485c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004860:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800486e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004872:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004874:	e00f      	b.n	8004896 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d106      	bne.n	800488a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800487c:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	4a14      	ldr	r2, [pc, #80]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004882:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004886:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004888:	e005      	b.n	8004896 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	4a11      	ldr	r2, [pc, #68]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004894:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a0e      	ldr	r2, [pc, #56]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a2:	f7fc facd 	bl	8000e40 <HAL_GetTick>
 80048a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048a8:	e008      	b.n	80048bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048aa:	f7fc fac9 	bl	8000e40 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e006      	b.n	80048ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <RCCEx_PLL3_Config+0x15c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
 80048d8:	ffff0007 	.word	0xffff0007

080048dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e049      	b.n	8004982 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc f8b2 	bl	8000a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fb52 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e049      	b.n	8004a30 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d106      	bne.n	80049b6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f841 	bl	8004a38 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2202      	movs	r2, #2
 80049ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f000 fafb 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d122      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d11b      	bne.n	8004aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0202 	mvn.w	r2, #2
 8004a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa7a 	bl	8004f88 <HAL_TIM_IC_CaptureCallback>
 8004a94:	e005      	b.n	8004aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fa6c 	bl	8004f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fa7d 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d122      	bne.n	8004afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d11b      	bne.n	8004afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0204 	mvn.w	r2, #4
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa50 	bl	8004f88 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fa42 	bl	8004f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fa53 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0308 	and.w	r3, r3, #8
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d122      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d11b      	bne.n	8004b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0208 	mvn.w	r2, #8
 8004b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa26 	bl	8004f88 <HAL_TIM_IC_CaptureCallback>
 8004b3c:	e005      	b.n	8004b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fa18 	bl	8004f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fa29 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b10      	cmp	r3, #16
 8004b5c:	d122      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d11b      	bne.n	8004ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0210 	mvn.w	r2, #16
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2208      	movs	r2, #8
 8004b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9fc 	bl	8004f88 <HAL_TIM_IC_CaptureCallback>
 8004b90:	e005      	b.n	8004b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9ee 	bl	8004f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f9ff 	bl	8004f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d107      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f06f 0201 	mvn.w	r2, #1
 8004bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f9c8 	bl	8004f60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d10e      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be8:	2b80      	cmp	r3, #128	; 0x80
 8004bea:	d107      	bne.n	8004bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fe7c 	bl	80058f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0a:	d10e      	bne.n	8004c2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b80      	cmp	r3, #128	; 0x80
 8004c18:	d107      	bne.n	8004c2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fe6f 	bl	8005908 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d10e      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b40      	cmp	r3, #64	; 0x40
 8004c44:	d107      	bne.n	8004c56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f9ad 	bl	8004fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d10e      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0220 	mvn.w	r2, #32
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fe2f 	bl	80058e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e064      	b.n	8004d70 <HAL_TIM_OC_ConfigChannel+0xe4>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b14      	cmp	r3, #20
 8004cb2:	d857      	bhi.n	8004d64 <HAL_TIM_OC_ConfigChannel+0xd8>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_TIM_OC_ConfigChannel+0x30>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004d65 	.word	0x08004d65
 8004cc4:	08004d65 	.word	0x08004d65
 8004cc8:	08004d65 	.word	0x08004d65
 8004ccc:	08004d1f 	.word	0x08004d1f
 8004cd0:	08004d65 	.word	0x08004d65
 8004cd4:	08004d65 	.word	0x08004d65
 8004cd8:	08004d65 	.word	0x08004d65
 8004cdc:	08004d2d 	.word	0x08004d2d
 8004ce0:	08004d65 	.word	0x08004d65
 8004ce4:	08004d65 	.word	0x08004d65
 8004ce8:	08004d65 	.word	0x08004d65
 8004cec:	08004d3b 	.word	0x08004d3b
 8004cf0:	08004d65 	.word	0x08004d65
 8004cf4:	08004d65 	.word	0x08004d65
 8004cf8:	08004d65 	.word	0x08004d65
 8004cfc:	08004d49 	.word	0x08004d49
 8004d00:	08004d65 	.word	0x08004d65
 8004d04:	08004d65 	.word	0x08004d65
 8004d08:	08004d65 	.word	0x08004d65
 8004d0c:	08004d57 	.word	0x08004d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 f9ee 	bl	80050f8 <TIM_OC1_SetConfig>
      break;
 8004d1c:	e023      	b.n	8004d66 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fa77 	bl	8005218 <TIM_OC2_SetConfig>
      break;
 8004d2a:	e01c      	b.n	8004d66 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fafa 	bl	800532c <TIM_OC3_SetConfig>
      break;
 8004d38:	e015      	b.n	8004d66 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 fb79 	bl	8005438 <TIM_OC4_SetConfig>
      break;
 8004d46:	e00e      	b.n	8004d66 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fbda 	bl	8005508 <TIM_OC5_SetConfig>
      break;
 8004d54:	e007      	b.n	8004d66 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fc35 	bl	80055cc <TIM_OC6_SetConfig>
      break;
 8004d62:	e000      	b.n	8004d66 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIM_ConfigClockSource+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e0db      	b.n	8004f48 <HAL_TIM_ConfigClockSource+0x1d0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4b69      	ldr	r3, [pc, #420]	; (8004f50 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a63      	ldr	r2, [pc, #396]	; (8004f54 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	f000 80a9 	beq.w	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
 8004dcc:	4a61      	ldr	r2, [pc, #388]	; (8004f54 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	f200 80ae 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004dd4:	4a60      	ldr	r2, [pc, #384]	; (8004f58 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	f000 80a1 	beq.w	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
 8004ddc:	4a5e      	ldr	r2, [pc, #376]	; (8004f58 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	f200 80a6 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004de4:	4a5d      	ldr	r2, [pc, #372]	; (8004f5c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	f000 8099 	beq.w	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
 8004dec:	4a5b      	ldr	r2, [pc, #364]	; (8004f5c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	f200 809e 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004df4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004df8:	f000 8091 	beq.w	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
 8004dfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e00:	f200 8096 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e08:	f000 8089 	beq.w	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e10:	f200 808e 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e18:	d03e      	beq.n	8004e98 <HAL_TIM_ConfigClockSource+0x120>
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	f200 8087 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	f000 8085 	beq.w	8004f34 <HAL_TIM_ConfigClockSource+0x1bc>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2e:	d87f      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e30:	2b70      	cmp	r3, #112	; 0x70
 8004e32:	d01a      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0xf2>
 8004e34:	2b70      	cmp	r3, #112	; 0x70
 8004e36:	d87b      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e38:	2b60      	cmp	r3, #96	; 0x60
 8004e3a:	d050      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x166>
 8004e3c:	2b60      	cmp	r3, #96	; 0x60
 8004e3e:	d877      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e40:	2b50      	cmp	r3, #80	; 0x50
 8004e42:	d03c      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x146>
 8004e44:	2b50      	cmp	r3, #80	; 0x50
 8004e46:	d873      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d058      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x186>
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d86f      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e50:	2b30      	cmp	r3, #48	; 0x30
 8004e52:	d064      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e54:	2b30      	cmp	r3, #48	; 0x30
 8004e56:	d86b      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d060      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d867      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05c      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d05a      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e68:	e062      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6899      	ldr	r1, [r3, #8]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f000 fc89 	bl	8005790 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	609a      	str	r2, [r3, #8]
      break;
 8004e96:	e04e      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6899      	ldr	r1, [r3, #8]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f000 fc72 	bl	8005790 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eba:	609a      	str	r2, [r3, #8]
      break;
 8004ebc:	e03b      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 fbe2 	bl	8005694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2150      	movs	r1, #80	; 0x50
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fc3c 	bl	8005754 <TIM_ITRx_SetConfig>
      break;
 8004edc:	e02b      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	461a      	mov	r2, r3
 8004eec:	f000 fc01 	bl	80056f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2160      	movs	r1, #96	; 0x60
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fc2c 	bl	8005754 <TIM_ITRx_SetConfig>
      break;
 8004efc:	e01b      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f000 fbc2 	bl	8005694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fc1c 	bl	8005754 <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e00b      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 fc13 	bl	8005754 <TIM_ITRx_SetConfig>
        break;
 8004f2e:	e002      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004f30:	bf00      	nop
 8004f32:	e000      	b.n	8004f36 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8004f34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	ffceff88 	.word	0xffceff88
 8004f54:	00100040 	.word	0x00100040
 8004f58:	00100030 	.word	0x00100030
 8004f5c:	00100020 	.word	0x00100020

08004f60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a40      	ldr	r2, [pc, #256]	; (80050d8 <TIM_Base_SetConfig+0x114>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe2:	d00f      	beq.n	8005004 <TIM_Base_SetConfig+0x40>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a3d      	ldr	r2, [pc, #244]	; (80050dc <TIM_Base_SetConfig+0x118>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00b      	beq.n	8005004 <TIM_Base_SetConfig+0x40>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a3c      	ldr	r2, [pc, #240]	; (80050e0 <TIM_Base_SetConfig+0x11c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d007      	beq.n	8005004 <TIM_Base_SetConfig+0x40>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a3b      	ldr	r2, [pc, #236]	; (80050e4 <TIM_Base_SetConfig+0x120>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_Base_SetConfig+0x40>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a3a      	ldr	r2, [pc, #232]	; (80050e8 <TIM_Base_SetConfig+0x124>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d108      	bne.n	8005016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2f      	ldr	r2, [pc, #188]	; (80050d8 <TIM_Base_SetConfig+0x114>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01f      	beq.n	800505e <TIM_Base_SetConfig+0x9a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005024:	d01b      	beq.n	800505e <TIM_Base_SetConfig+0x9a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2c      	ldr	r2, [pc, #176]	; (80050dc <TIM_Base_SetConfig+0x118>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d017      	beq.n	800505e <TIM_Base_SetConfig+0x9a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2b      	ldr	r2, [pc, #172]	; (80050e0 <TIM_Base_SetConfig+0x11c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <TIM_Base_SetConfig+0x9a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2a      	ldr	r2, [pc, #168]	; (80050e4 <TIM_Base_SetConfig+0x120>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00f      	beq.n	800505e <TIM_Base_SetConfig+0x9a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a29      	ldr	r2, [pc, #164]	; (80050e8 <TIM_Base_SetConfig+0x124>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_Base_SetConfig+0x9a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a28      	ldr	r2, [pc, #160]	; (80050ec <TIM_Base_SetConfig+0x128>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_Base_SetConfig+0x9a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a27      	ldr	r2, [pc, #156]	; (80050f0 <TIM_Base_SetConfig+0x12c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_Base_SetConfig+0x9a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <TIM_Base_SetConfig+0x130>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d108      	bne.n	8005070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <TIM_Base_SetConfig+0x114>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00f      	beq.n	80050bc <TIM_Base_SetConfig+0xf8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <TIM_Base_SetConfig+0x124>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00b      	beq.n	80050bc <TIM_Base_SetConfig+0xf8>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a11      	ldr	r2, [pc, #68]	; (80050ec <TIM_Base_SetConfig+0x128>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d007      	beq.n	80050bc <TIM_Base_SetConfig+0xf8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a10      	ldr	r2, [pc, #64]	; (80050f0 <TIM_Base_SetConfig+0x12c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_Base_SetConfig+0xf8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a0f      	ldr	r2, [pc, #60]	; (80050f4 <TIM_Base_SetConfig+0x130>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d103      	bne.n	80050c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	615a      	str	r2, [r3, #20]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40000400 	.word	0x40000400
 80050e0:	40000800 	.word	0x40000800
 80050e4:	40000c00 	.word	0x40000c00
 80050e8:	40010400 	.word	0x40010400
 80050ec:	40014000 	.word	0x40014000
 80050f0:	40014400 	.word	0x40014400
 80050f4:	40014800 	.word	0x40014800

080050f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	f023 0201 	bic.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4b37      	ldr	r3, [pc, #220]	; (8005200 <TIM_OC1_SetConfig+0x108>)
 8005124:	4013      	ands	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f023 0302 	bic.w	r3, r3, #2
 8005140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <TIM_OC1_SetConfig+0x10c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00f      	beq.n	8005174 <TIM_OC1_SetConfig+0x7c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a2c      	ldr	r2, [pc, #176]	; (8005208 <TIM_OC1_SetConfig+0x110>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_OC1_SetConfig+0x7c>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a2b      	ldr	r2, [pc, #172]	; (800520c <TIM_OC1_SetConfig+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_OC1_SetConfig+0x7c>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <TIM_OC1_SetConfig+0x118>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_OC1_SetConfig+0x7c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a29      	ldr	r2, [pc, #164]	; (8005214 <TIM_OC1_SetConfig+0x11c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d10c      	bne.n	800518e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0308 	bic.w	r3, r3, #8
 800517a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <TIM_OC1_SetConfig+0x10c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_OC1_SetConfig+0xbe>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1b      	ldr	r2, [pc, #108]	; (8005208 <TIM_OC1_SetConfig+0x110>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_OC1_SetConfig+0xbe>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a1a      	ldr	r2, [pc, #104]	; (800520c <TIM_OC1_SetConfig+0x114>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_OC1_SetConfig+0xbe>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a19      	ldr	r2, [pc, #100]	; (8005210 <TIM_OC1_SetConfig+0x118>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC1_SetConfig+0xbe>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <TIM_OC1_SetConfig+0x11c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d111      	bne.n	80051da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	621a      	str	r2, [r3, #32]
}
 80051f4:	bf00      	nop
 80051f6:	371c      	adds	r7, #28
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	fffeff8f 	.word	0xfffeff8f
 8005204:	40010000 	.word	0x40010000
 8005208:	40010400 	.word	0x40010400
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400
 8005214:	40014800 	.word	0x40014800

08005218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0210 	bic.w	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4b34      	ldr	r3, [pc, #208]	; (8005314 <TIM_OC2_SetConfig+0xfc>)
 8005244:	4013      	ands	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0320 	bic.w	r3, r3, #32
 8005262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a29      	ldr	r2, [pc, #164]	; (8005318 <TIM_OC2_SetConfig+0x100>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC2_SetConfig+0x68>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a28      	ldr	r2, [pc, #160]	; (800531c <TIM_OC2_SetConfig+0x104>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10d      	bne.n	800529c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <TIM_OC2_SetConfig+0x100>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_OC2_SetConfig+0xac>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1d      	ldr	r2, [pc, #116]	; (800531c <TIM_OC2_SetConfig+0x104>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_OC2_SetConfig+0xac>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <TIM_OC2_SetConfig+0x108>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_OC2_SetConfig+0xac>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <TIM_OC2_SetConfig+0x10c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC2_SetConfig+0xac>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <TIM_OC2_SetConfig+0x110>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d113      	bne.n	80052ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	feff8fff 	.word	0xfeff8fff
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800

0800532c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a27      	ldr	r2, [pc, #156]	; (8005424 <TIM_OC3_SetConfig+0xf8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_OC3_SetConfig+0x66>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a26      	ldr	r2, [pc, #152]	; (8005428 <TIM_OC3_SetConfig+0xfc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10d      	bne.n	80053ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <TIM_OC3_SetConfig+0xf8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <TIM_OC3_SetConfig+0xaa>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <TIM_OC3_SetConfig+0xfc>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_OC3_SetConfig+0xaa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <TIM_OC3_SetConfig+0x100>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_OC3_SetConfig+0xaa>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <TIM_OC3_SetConfig+0x104>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC3_SetConfig+0xaa>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <TIM_OC3_SetConfig+0x108>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d113      	bne.n	80053fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40010000 	.word	0x40010000
 8005428:	40010400 	.word	0x40010400
 800542c:	40014000 	.word	0x40014000
 8005430:	40014400 	.word	0x40014400
 8005434:	40014800 	.word	0x40014800

08005438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	031b      	lsls	r3, r3, #12
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <TIM_OC4_SetConfig+0xbc>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00f      	beq.n	80054b8 <TIM_OC4_SetConfig+0x80>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <TIM_OC4_SetConfig+0xc0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00b      	beq.n	80054b8 <TIM_OC4_SetConfig+0x80>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a16      	ldr	r2, [pc, #88]	; (80054fc <TIM_OC4_SetConfig+0xc4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_OC4_SetConfig+0x80>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <TIM_OC4_SetConfig+0xc8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_OC4_SetConfig+0x80>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a14      	ldr	r2, [pc, #80]	; (8005504 <TIM_OC4_SetConfig+0xcc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d109      	bne.n	80054cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	019b      	lsls	r3, r3, #6
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40010400 	.word	0x40010400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800

08005508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005548:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <TIM_OC5_SetConfig+0xb0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_OC5_SetConfig+0x76>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a16      	ldr	r2, [pc, #88]	; (80055bc <TIM_OC5_SetConfig+0xb4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00b      	beq.n	800557e <TIM_OC5_SetConfig+0x76>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a15      	ldr	r2, [pc, #84]	; (80055c0 <TIM_OC5_SetConfig+0xb8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_OC5_SetConfig+0x76>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a14      	ldr	r2, [pc, #80]	; (80055c4 <TIM_OC5_SetConfig+0xbc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC5_SetConfig+0x76>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <TIM_OC5_SetConfig+0xc0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d109      	bne.n	8005592 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800

080055cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800560e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	051b      	lsls	r3, r3, #20
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a18      	ldr	r2, [pc, #96]	; (8005680 <TIM_OC6_SetConfig+0xb4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00f      	beq.n	8005644 <TIM_OC6_SetConfig+0x78>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a17      	ldr	r2, [pc, #92]	; (8005684 <TIM_OC6_SetConfig+0xb8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_OC6_SetConfig+0x78>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a16      	ldr	r2, [pc, #88]	; (8005688 <TIM_OC6_SetConfig+0xbc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_OC6_SetConfig+0x78>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a15      	ldr	r2, [pc, #84]	; (800568c <TIM_OC6_SetConfig+0xc0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC6_SetConfig+0x78>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a14      	ldr	r2, [pc, #80]	; (8005690 <TIM_OC6_SetConfig+0xc4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d109      	bne.n	8005658 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	029b      	lsls	r3, r3, #10
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40010400 	.word	0x40010400
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800

08005694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f023 0201 	bic.w	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f023 030a 	bic.w	r3, r3, #10
 80056d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b087      	sub	sp, #28
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0210 	bic.w	r2, r3, #16
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800571c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	031b      	lsls	r3, r3, #12
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800572e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
	...

08005754 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <TIM_ITRx_SetConfig+0x38>)
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	f043 0307 	orr.w	r3, r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	609a      	str	r2, [r3, #8]
}
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	ffcfff8f 	.word	0xffcfff8f

08005790 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	021a      	lsls	r2, r3, #8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	609a      	str	r2, [r3, #8]
}
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e068      	b.n	80058ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2e      	ldr	r2, [pc, #184]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d004      	beq.n	800581c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2d      	ldr	r2, [pc, #180]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d108      	bne.n	800582e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005822:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1e      	ldr	r2, [pc, #120]	; (80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01d      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585a:	d018      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1a      	ldr	r2, [pc, #104]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a13      	ldr	r2, [pc, #76]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10c      	bne.n	80058a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	4313      	orrs	r3, r2
 800589e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	40010000 	.word	0x40010000
 80058cc:	40010400 	.word	0x40010400
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00
 80058dc:	40001800 	.word	0x40001800

080058e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800591c:	b084      	sub	sp, #16
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	f107 001c 	add.w	r0, r7, #28
 800592a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b01      	cmp	r3, #1
 8005932:	d120      	bne.n	8005976 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	4b2a      	ldr	r3, [pc, #168]	; (80059f0 <USB_CoreInit+0xd4>)
 8005946:	4013      	ands	r3, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d105      	bne.n	800596a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 fb14 	bl	8006f98 <USB_CoreReset>
 8005970:	4603      	mov	r3, r0
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	e01a      	b.n	80059ac <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 fb08 	bl	8006f98 <USB_CoreReset>
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800598c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
 800599e:	e005      	b.n	80059ac <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d116      	bne.n	80059e0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <USB_CoreInit+0xd8>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f043 0206 	orr.w	r2, r3, #6
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ec:	b004      	add	sp, #16
 80059ee:	4770      	bx	lr
 80059f0:	ffbdffbf 	.word	0xffbdffbf
 80059f4:	03ee0000 	.word	0x03ee0000

080059f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d165      	bne.n	8005ad8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4a41      	ldr	r2, [pc, #260]	; (8005b14 <USB_SetTurnaroundTime+0x11c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d906      	bls.n	8005a22 <USB_SetTurnaroundTime+0x2a>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4a40      	ldr	r2, [pc, #256]	; (8005b18 <USB_SetTurnaroundTime+0x120>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d202      	bcs.n	8005a22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a1c:	230f      	movs	r3, #15
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e062      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4a3c      	ldr	r2, [pc, #240]	; (8005b18 <USB_SetTurnaroundTime+0x120>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d306      	bcc.n	8005a38 <USB_SetTurnaroundTime+0x40>
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4a3b      	ldr	r2, [pc, #236]	; (8005b1c <USB_SetTurnaroundTime+0x124>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d202      	bcs.n	8005a38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a32:	230e      	movs	r3, #14
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e057      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4a38      	ldr	r2, [pc, #224]	; (8005b1c <USB_SetTurnaroundTime+0x124>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d306      	bcc.n	8005a4e <USB_SetTurnaroundTime+0x56>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	4a37      	ldr	r2, [pc, #220]	; (8005b20 <USB_SetTurnaroundTime+0x128>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d202      	bcs.n	8005a4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a48:	230d      	movs	r3, #13
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e04c      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4a33      	ldr	r2, [pc, #204]	; (8005b20 <USB_SetTurnaroundTime+0x128>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d306      	bcc.n	8005a64 <USB_SetTurnaroundTime+0x6c>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4a32      	ldr	r2, [pc, #200]	; (8005b24 <USB_SetTurnaroundTime+0x12c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d802      	bhi.n	8005a64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a5e:	230c      	movs	r3, #12
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e041      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <USB_SetTurnaroundTime+0x12c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d906      	bls.n	8005a7a <USB_SetTurnaroundTime+0x82>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4a2e      	ldr	r2, [pc, #184]	; (8005b28 <USB_SetTurnaroundTime+0x130>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d802      	bhi.n	8005a7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a74:	230b      	movs	r3, #11
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	e036      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4a2a      	ldr	r2, [pc, #168]	; (8005b28 <USB_SetTurnaroundTime+0x130>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d906      	bls.n	8005a90 <USB_SetTurnaroundTime+0x98>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	4a29      	ldr	r2, [pc, #164]	; (8005b2c <USB_SetTurnaroundTime+0x134>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d802      	bhi.n	8005a90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a8a:	230a      	movs	r3, #10
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e02b      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4a26      	ldr	r2, [pc, #152]	; (8005b2c <USB_SetTurnaroundTime+0x134>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d906      	bls.n	8005aa6 <USB_SetTurnaroundTime+0xae>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4a25      	ldr	r2, [pc, #148]	; (8005b30 <USB_SetTurnaroundTime+0x138>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d202      	bcs.n	8005aa6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005aa0:	2309      	movs	r3, #9
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e020      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4a21      	ldr	r2, [pc, #132]	; (8005b30 <USB_SetTurnaroundTime+0x138>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d306      	bcc.n	8005abc <USB_SetTurnaroundTime+0xc4>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4a20      	ldr	r2, [pc, #128]	; (8005b34 <USB_SetTurnaroundTime+0x13c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d802      	bhi.n	8005abc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e015      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <USB_SetTurnaroundTime+0x13c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d906      	bls.n	8005ad2 <USB_SetTurnaroundTime+0xda>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4a1c      	ldr	r2, [pc, #112]	; (8005b38 <USB_SetTurnaroundTime+0x140>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d202      	bcs.n	8005ad2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005acc:	2307      	movs	r3, #7
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e00a      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ad2:	2306      	movs	r3, #6
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e007      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ade:	2309      	movs	r3, #9
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e001      	b.n	8005ae8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ae4:	2309      	movs	r3, #9
 8005ae6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	00d8acbf 	.word	0x00d8acbf
 8005b18:	00e4e1c0 	.word	0x00e4e1c0
 8005b1c:	00f42400 	.word	0x00f42400
 8005b20:	01067380 	.word	0x01067380
 8005b24:	011a499f 	.word	0x011a499f
 8005b28:	01312cff 	.word	0x01312cff
 8005b2c:	014ca43f 	.word	0x014ca43f
 8005b30:	016e3600 	.word	0x016e3600
 8005b34:	01a6ab1f 	.word	0x01a6ab1f
 8005b38:	01e84800 	.word	0x01e84800

08005b3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f043 0201 	orr.w	r2, r3, #1
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0201 	bic.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d106      	bne.n	8005bac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60da      	str	r2, [r3, #12]
 8005baa:	e00b      	b.n	8005bc4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]
 8005bbe:	e001      	b.n	8005bc4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e003      	b.n	8005bcc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005bc4:	2032      	movs	r0, #50	; 0x32
 8005bc6:	f7fb f947 	bl	8000e58 <HAL_Delay>

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	e009      	b.n	8005c08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	3340      	adds	r3, #64	; 0x40
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	2200      	movs	r2, #0
 8005c00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3301      	adds	r3, #1
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b0e      	cmp	r3, #14
 8005c0c:	d9f2      	bls.n	8005bf4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11c      	bne.n	8005c4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c22:	f043 0302 	orr.w	r3, r3, #2
 8005c26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e005      	b.n	8005c5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c60:	461a      	mov	r2, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	461a      	mov	r2, r3
 8005c76:	680b      	ldr	r3, [r1, #0]
 8005c78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d10c      	bne.n	8005c9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d104      	bne.n	8005c90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c86:	2100      	movs	r1, #0
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f949 	bl	8005f20 <USB_SetDevSpeed>
 8005c8e:	e008      	b.n	8005ca2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c90:	2101      	movs	r1, #1
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f944 	bl	8005f20 <USB_SetDevSpeed>
 8005c98:	e003      	b.n	8005ca2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c9a:	2103      	movs	r1, #3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 f93f 	bl	8005f20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ca2:	2110      	movs	r1, #16
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8f3 	bl	8005e90 <USB_FlushTxFifo>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f911 	bl	8005edc <USB_FlushRxFifo>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2300      	movs	r3, #0
 8005cce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	e043      	b.n	8005d76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d04:	d118      	bne.n	8005d38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e013      	b.n	8005d4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e008      	b.n	8005d4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	461a      	mov	r2, r3
 8005d46:	2300      	movs	r3, #0
 8005d48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d56:	461a      	mov	r2, r3
 8005d58:	2300      	movs	r3, #0
 8005d5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	3301      	adds	r3, #1
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d3b7      	bcc.n	8005cee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	e043      	b.n	8005e0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d9a:	d118      	bne.n	8005dce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10a      	bne.n	8005db8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	461a      	mov	r2, r3
 8005db0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e013      	b.n	8005de0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	e008      	b.n	8005de0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2300      	movs	r3, #0
 8005dde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dec:	461a      	mov	r2, r3
 8005dee:	2300      	movs	r3, #0
 8005df0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d3b7      	bcc.n	8005d84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d105      	bne.n	8005e48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	f043 0210 	orr.w	r2, r3, #16
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	699a      	ldr	r2, [r3, #24]
 8005e4c:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <USB_DevInit+0x2b4>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f043 0208 	orr.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d105      	bne.n	8005e78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699a      	ldr	r2, [r3, #24]
 8005e70:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <USB_DevInit+0x2b8>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e84:	b004      	add	sp, #16
 8005e86:	4770      	bx	lr
 8005e88:	803c3800 	.word	0x803c3800
 8005e8c:	40000004 	.word	0x40000004

08005e90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	019b      	lsls	r3, r3, #6
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <USB_FlushTxFifo+0x48>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d901      	bls.n	8005ebc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e006      	b.n	8005eca <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d0f0      	beq.n	8005eaa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	00030d40 	.word	0x00030d40

08005edc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2210      	movs	r2, #16
 8005eec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <USB_FlushRxFifo+0x40>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d901      	bls.n	8005f00 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e006      	b.n	8005f0e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d0f0      	beq.n	8005eee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	00030d40 	.word	0x00030d40

08005f20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	68f9      	ldr	r1, [r7, #12]
 8005f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f40:	4313      	orrs	r3, r2
 8005f42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b087      	sub	sp, #28
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0306 	and.w	r3, r3, #6
 8005f6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005f72:	2300      	movs	r3, #0
 8005f74:	75fb      	strb	r3, [r7, #23]
 8005f76:	e00a      	b.n	8005f8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d002      	beq.n	8005f84 <USB_GetDevSpeed+0x32>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b06      	cmp	r3, #6
 8005f82:	d102      	bne.n	8005f8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f84:	2302      	movs	r3, #2
 8005f86:	75fb      	strb	r3, [r7, #23]
 8005f88:	e001      	b.n	8005f8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f8a:	230f      	movs	r3, #15
 8005f8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d139      	bne.n	800602c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	2101      	movs	r1, #1
 8005fca:	fa01 f303 	lsl.w	r3, r1, r3
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	68f9      	ldr	r1, [r7, #12]
 8005fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d153      	bne.n	8006098 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	78db      	ldrb	r3, [r3, #3]
 800600a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800600c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	059b      	lsls	r3, r3, #22
 8006012:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006014:	431a      	orrs	r2, r3
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	0159      	lsls	r1, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	440b      	add	r3, r1
 800601e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006022:	4619      	mov	r1, r3
 8006024:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <USB_ActivateEndpoint+0x10c>)
 8006026:	4313      	orrs	r3, r2
 8006028:	600b      	str	r3, [r1, #0]
 800602a:	e035      	b.n	8006098 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	2101      	movs	r1, #1
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	041b      	lsls	r3, r3, #16
 8006044:	68f9      	ldr	r1, [r7, #12]
 8006046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800604a:	4313      	orrs	r3, r2
 800604c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d119      	bne.n	8006098 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	78db      	ldrb	r3, [r3, #3]
 800607e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006080:	430b      	orrs	r3, r1
 8006082:	431a      	orrs	r2, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	0159      	lsls	r1, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	440b      	add	r3, r1
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	4619      	mov	r1, r3
 8006092:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <USB_ActivateEndpoint+0x10c>)
 8006094:	4313      	orrs	r3, r2
 8006096:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	10008000 	.word	0x10008000

080060ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d161      	bne.n	800618c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060de:	d11f      	bne.n	8006120 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800611e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f303 	lsl.w	r3, r1, r3
 8006136:	b29b      	uxth	r3, r3
 8006138:	43db      	mvns	r3, r3
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006140:	4013      	ands	r3, r2
 8006142:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	2101      	movs	r1, #1
 8006156:	fa01 f303 	lsl.w	r3, r1, r3
 800615a:	b29b      	uxth	r3, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006164:	4013      	ands	r3, r2
 8006166:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	0159      	lsls	r1, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	440b      	add	r3, r1
 800617e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006182:	4619      	mov	r1, r3
 8006184:	4b35      	ldr	r3, [pc, #212]	; (800625c <USB_DeactivateEndpoint+0x1b0>)
 8006186:	4013      	ands	r3, r2
 8006188:	600b      	str	r3, [r1, #0]
 800618a:	e060      	b.n	800624e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800619e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a2:	d11f      	bne.n	80061e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	2101      	movs	r1, #1
 80061f6:	fa01 f303 	lsl.w	r3, r1, r3
 80061fa:	041b      	lsls	r3, r3, #16
 80061fc:	43db      	mvns	r3, r3
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006204:	4013      	ands	r3, r2
 8006206:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	2101      	movs	r1, #1
 800621a:	fa01 f303 	lsl.w	r3, r1, r3
 800621e:	041b      	lsls	r3, r3, #16
 8006220:	43db      	mvns	r3, r3
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006228:	4013      	ands	r3, r2
 800622a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	0159      	lsls	r1, r3, #5
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	440b      	add	r3, r1
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	4619      	mov	r1, r3
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <USB_DeactivateEndpoint+0x1b4>)
 800624a:	4013      	ands	r3, r2
 800624c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr
 800625c:	ec337800 	.word	0xec337800
 8006260:	eff37800 	.word	0xeff37800

08006264 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	; 0x28
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4613      	mov	r3, r2
 8006270:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	785b      	ldrb	r3, [r3, #1]
 8006280:	2b01      	cmp	r3, #1
 8006282:	f040 8163 	bne.w	800654c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d132      	bne.n	80062f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	4413      	add	r3, r2
 8006296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	0159      	lsls	r1, r3, #5
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	440b      	add	r3, r1
 80062a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a8:	4619      	mov	r1, r3
 80062aa:	4ba5      	ldr	r3, [pc, #660]	; (8006540 <USB_EPStartXfer+0x2dc>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	0159      	lsls	r1, r3, #5
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	440b      	add	r3, r1
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	4619      	mov	r1, r3
 80062ec:	4b95      	ldr	r3, [pc, #596]	; (8006544 <USB_EPStartXfer+0x2e0>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	610b      	str	r3, [r1, #16]
 80062f2:	e074      	b.n	80063de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	0159      	lsls	r1, r3, #5
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	440b      	add	r3, r1
 800630a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630e:	4619      	mov	r1, r3
 8006310:	4b8c      	ldr	r3, [pc, #560]	; (8006544 <USB_EPStartXfer+0x2e0>)
 8006312:	4013      	ands	r3, r2
 8006314:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	0159      	lsls	r1, r3, #5
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	440b      	add	r3, r1
 800632c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006330:	4619      	mov	r1, r3
 8006332:	4b83      	ldr	r3, [pc, #524]	; (8006540 <USB_EPStartXfer+0x2dc>)
 8006334:	4013      	ands	r3, r2
 8006336:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6959      	ldr	r1, [r3, #20]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	440b      	add	r3, r1
 8006350:	1e59      	subs	r1, r3, #1
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	fbb1 f3f3 	udiv	r3, r1, r3
 800635a:	04d9      	lsls	r1, r3, #19
 800635c:	4b7a      	ldr	r3, [pc, #488]	; (8006548 <USB_EPStartXfer+0x2e4>)
 800635e:	400b      	ands	r3, r1
 8006360:	69b9      	ldr	r1, [r7, #24]
 8006362:	0148      	lsls	r0, r1, #5
 8006364:	69f9      	ldr	r1, [r7, #28]
 8006366:	4401      	add	r1, r0
 8006368:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800636c:	4313      	orrs	r3, r2
 800636e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	0148      	lsls	r0, r1, #5
 800638a:	69f9      	ldr	r1, [r7, #28]
 800638c:	4401      	add	r1, r0
 800638e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006392:	4313      	orrs	r3, r2
 8006394:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	78db      	ldrb	r3, [r3, #3]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d11f      	bne.n	80063de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d14b      	bne.n	800647c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f8:	461a      	mov	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	78db      	ldrb	r3, [r3, #3]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d128      	bne.n	800645a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d110      	bne.n	800643a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	440a      	add	r2, r1
 800642e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006432:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	e00f      	b.n	800645a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	69fa      	ldr	r2, [r7, #28]
 800644e:	440a      	add	r2, r1
 8006450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006458:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	440a      	add	r2, r1
 8006470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e133      	b.n	80066e4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006496:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800649a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	78db      	ldrb	r3, [r3, #3]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d015      	beq.n	80064d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 811b 	beq.w	80066e4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	2101      	movs	r1, #1
 80064c0:	fa01 f303 	lsl.w	r3, r1, r3
 80064c4:	69f9      	ldr	r1, [r7, #28]
 80064c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ca:	4313      	orrs	r3, r2
 80064cc:	634b      	str	r3, [r1, #52]	; 0x34
 80064ce:	e109      	b.n	80066e4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d110      	bne.n	8006502 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	e00f      	b.n	8006522 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006520:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	68d9      	ldr	r1, [r3, #12]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	781a      	ldrb	r2, [r3, #0]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	b298      	uxth	r0, r3
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	4603      	mov	r3, r0
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 fa38 	bl	80069ac <USB_WritePacket>
 800653c:	e0d2      	b.n	80066e4 <USB_EPStartXfer+0x480>
 800653e:	bf00      	nop
 8006540:	e007ffff 	.word	0xe007ffff
 8006544:	fff80000 	.word	0xfff80000
 8006548:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	0159      	lsls	r1, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	440b      	add	r3, r1
 8006562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006566:	4619      	mov	r1, r3
 8006568:	4b61      	ldr	r3, [pc, #388]	; (80066f0 <USB_EPStartXfer+0x48c>)
 800656a:	4013      	ands	r3, r2
 800656c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	0159      	lsls	r1, r3, #5
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	440b      	add	r3, r1
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	4619      	mov	r1, r3
 800658a:	4b5a      	ldr	r3, [pc, #360]	; (80066f4 <USB_EPStartXfer+0x490>)
 800658c:	4013      	ands	r3, r2
 800658e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d123      	bne.n	80065e0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ae:	69b9      	ldr	r1, [r7, #24]
 80065b0:	0148      	lsls	r0, r1, #5
 80065b2:	69f9      	ldr	r1, [r7, #28]
 80065b4:	4401      	add	r1, r0
 80065b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065ba:	4313      	orrs	r3, r2
 80065bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065dc:	6113      	str	r3, [r2, #16]
 80065de:	e033      	b.n	8006648 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	4413      	add	r3, r2
 80065ea:	1e5a      	subs	r2, r3, #1
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	691a      	ldr	r2, [r3, #16]
 8006604:	8afb      	ldrh	r3, [r7, #22]
 8006606:	04d9      	lsls	r1, r3, #19
 8006608:	4b3b      	ldr	r3, [pc, #236]	; (80066f8 <USB_EPStartXfer+0x494>)
 800660a:	400b      	ands	r3, r1
 800660c:	69b9      	ldr	r1, [r7, #24]
 800660e:	0148      	lsls	r0, r1, #5
 8006610:	69f9      	ldr	r1, [r7, #28]
 8006612:	4401      	add	r1, r0
 8006614:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006618:	4313      	orrs	r3, r2
 800661a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	8af9      	ldrh	r1, [r7, #22]
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006638:	69b9      	ldr	r1, [r7, #24]
 800663a:	0148      	lsls	r0, r1, #5
 800663c:	69f9      	ldr	r1, [r7, #28]
 800663e:	4401      	add	r1, r0
 8006640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006644:	4313      	orrs	r3, r2
 8006646:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006648:	79fb      	ldrb	r3, [r7, #7]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d10d      	bne.n	800666a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	68d9      	ldr	r1, [r3, #12]
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	460a      	mov	r2, r1
 8006668:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	78db      	ldrb	r3, [r3, #3]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d128      	bne.n	80066c4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d110      	bne.n	80066a4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	69fa      	ldr	r2, [r7, #28]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	e00f      	b.n	80066c4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	fff80000 	.word	0xfff80000
 80066f4:	e007ffff 	.word	0xe007ffff
 80066f8:	1ff80000 	.word	0x1ff80000

080066fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 80cd 	bne.w	80068b8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d132      	bne.n	800678c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	0159      	lsls	r1, r3, #5
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	440b      	add	r3, r1
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	4619      	mov	r1, r3
 8006742:	4b98      	ldr	r3, [pc, #608]	; (80069a4 <USB_EP0StartXfer+0x2a8>)
 8006744:	4013      	ands	r3, r2
 8006746:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	015a      	lsls	r2, r3, #5
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	4413      	add	r3, r2
 8006750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	0151      	lsls	r1, r2, #5
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	440a      	add	r2, r1
 800675e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006762:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	691a      	ldr	r2, [r3, #16]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	0159      	lsls	r1, r3, #5
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	440b      	add	r3, r1
 800677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006782:	4619      	mov	r1, r3
 8006784:	4b88      	ldr	r3, [pc, #544]	; (80069a8 <USB_EP0StartXfer+0x2ac>)
 8006786:	4013      	ands	r3, r2
 8006788:	610b      	str	r3, [r1, #16]
 800678a:	e04e      	b.n	800682a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	691a      	ldr	r2, [r3, #16]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	0159      	lsls	r1, r3, #5
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	440b      	add	r3, r1
 80067a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a6:	4619      	mov	r1, r3
 80067a8:	4b7f      	ldr	r3, [pc, #508]	; (80069a8 <USB_EP0StartXfer+0x2ac>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	0159      	lsls	r1, r3, #5
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	440b      	add	r3, r1
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	4619      	mov	r1, r3
 80067ca:	4b76      	ldr	r3, [pc, #472]	; (80069a4 <USB_EP0StartXfer+0x2a8>)
 80067cc:	4013      	ands	r3, r2
 80067ce:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d903      	bls.n	80067e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681a:	6939      	ldr	r1, [r7, #16]
 800681c:	0148      	lsls	r0, r1, #5
 800681e:	6979      	ldr	r1, [r7, #20]
 8006820:	4401      	add	r1, r0
 8006822:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006826:	4313      	orrs	r3, r2
 8006828:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d11e      	bne.n	800686e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d009      	beq.n	800684c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	461a      	mov	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006866:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	e092      	b.n	8006994 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	440a      	add	r2, r1
 8006884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006888:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800688c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d07e      	beq.n	8006994 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	2101      	movs	r1, #1
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	6979      	ldr	r1, [r7, #20]
 80068ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068b2:	4313      	orrs	r3, r2
 80068b4:	634b      	str	r3, [r1, #52]	; 0x34
 80068b6:	e06d      	b.n	8006994 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	0159      	lsls	r1, r3, #5
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	440b      	add	r3, r1
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	4619      	mov	r1, r3
 80068d4:	4b34      	ldr	r3, [pc, #208]	; (80069a8 <USB_EP0StartXfer+0x2ac>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	0159      	lsls	r1, r3, #5
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	440b      	add	r3, r1
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	4619      	mov	r1, r3
 80068f6:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <USB_EP0StartXfer+0x2a8>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d003      	beq.n	800690c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	0151      	lsls	r1, r2, #5
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	440a      	add	r2, r1
 8006922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006926:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800692a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	691a      	ldr	r2, [r3, #16]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006942:	6939      	ldr	r1, [r7, #16]
 8006944:	0148      	lsls	r0, r1, #5
 8006946:	6979      	ldr	r1, [r7, #20]
 8006948:	4401      	add	r1, r0
 800694a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800694e:	4313      	orrs	r3, r2
 8006950:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d10d      	bne.n	8006974 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	68d9      	ldr	r1, [r3, #12]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	460a      	mov	r2, r1
 8006972:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	440a      	add	r2, r1
 800698a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	e007ffff 	.word	0xe007ffff
 80069a8:	fff80000 	.word	0xfff80000

080069ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b089      	sub	sp, #36	; 0x24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4611      	mov	r1, r2
 80069b8:	461a      	mov	r2, r3
 80069ba:	460b      	mov	r3, r1
 80069bc:	71fb      	strb	r3, [r7, #7]
 80069be:	4613      	mov	r3, r2
 80069c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80069ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d123      	bne.n	8006a1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069d2:	88bb      	ldrh	r3, [r7, #4]
 80069d4:	3303      	adds	r3, #3
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069da:	2300      	movs	r3, #0
 80069dc:	61bb      	str	r3, [r7, #24]
 80069de:	e018      	b.n	8006a12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	031a      	lsls	r2, r3, #12
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069ec:	461a      	mov	r2, r3
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	3301      	adds	r3, #1
 80069f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	3301      	adds	r3, #1
 80069fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	3301      	adds	r3, #1
 8006a04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d3e2      	bcc.n	80069e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3724      	adds	r7, #36	; 0x24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b08b      	sub	sp, #44	; 0x2c
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	4613      	mov	r3, r2
 8006a34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	089b      	lsrs	r3, r3, #2
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a46:	88fb      	ldrh	r3, [r7, #6]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a4e:	2300      	movs	r3, #0
 8006a50:	623b      	str	r3, [r7, #32]
 8006a52:	e014      	b.n	8006a7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	3301      	adds	r3, #1
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	3301      	adds	r3, #1
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	3301      	adds	r3, #1
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	3301      	adds	r3, #1
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	623b      	str	r3, [r7, #32]
 8006a7e:	6a3a      	ldr	r2, [r7, #32]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d3e6      	bcc.n	8006a54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a86:	8bfb      	ldrh	r3, [r7, #30]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01e      	beq.n	8006aca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a96:	461a      	mov	r2, r3
 8006a98:	f107 0310 	add.w	r3, r7, #16
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	701a      	strb	r2, [r3, #0]
      i++;
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	3301      	adds	r3, #1
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006abe:	8bfb      	ldrh	r3, [r7, #30]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ac4:	8bfb      	ldrh	r3, [r7, #30]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1ea      	bne.n	8006aa0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	372c      	adds	r7, #44	; 0x2c
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d12c      	bne.n	8006b4e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	db12      	blt.n	8006b2c <USB_EPSetStall+0x54>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00f      	beq.n	8006b2c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b2a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	e02b      	b.n	8006ba6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db12      	blt.n	8006b86 <USB_EPSetStall+0xae>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00f      	beq.n	8006b86 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	0151      	lsls	r1, r2, #5
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	440a      	add	r2, r1
 8006b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b84:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ba4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d128      	bne.n	8006c22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	78db      	ldrb	r3, [r3, #3]
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d003      	beq.n	8006c00 <USB_EPClearStall+0x4c>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	78db      	ldrb	r3, [r3, #3]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d138      	bne.n	8006c72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	0151      	lsls	r1, r2, #5
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	440a      	add	r2, r1
 8006c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	e027      	b.n	8006c72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	78db      	ldrb	r3, [r3, #3]
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d003      	beq.n	8006c52 <USB_EPClearStall+0x9e>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	78db      	ldrb	r3, [r3, #3]
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d10f      	bne.n	8006c72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006ca2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006cb4:	68f9      	ldr	r1, [r7, #12]
 8006cb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cfa:	f023 0302 	bic.w	r3, r3, #2
 8006cfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d28:	f023 0303 	bic.w	r3, r3, #3
 8006d2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d3c:	f043 0302 	orr.w	r3, r3, #2
 8006d40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4013      	ands	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d68:	68fb      	ldr	r3, [r7, #12]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	4013      	ands	r3, r2
 8006d98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	0c1b      	lsrs	r3, r3, #16
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	b29b      	uxth	r3, r3
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	460b      	mov	r3, r1
 8006de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4a:	01db      	lsls	r3, r3, #7
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e54:	78fb      	ldrb	r3, [r7, #3]
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4013      	ands	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e68:	68bb      	ldr	r3, [r7, #8]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	f003 0301 	and.w	r3, r3, #1
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <USB_ActivateSetup+0x44>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	fffff800 	.word	0xfffff800

08006edc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	333c      	adds	r3, #60	; 0x3c
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4a26      	ldr	r2, [pc, #152]	; (8006f94 <USB_EP0_OutStart+0xb8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d90a      	bls.n	8006f16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f10:	d101      	bne.n	8006f16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	e037      	b.n	8006f86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	2300      	movs	r3, #0
 8006f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f44:	f043 0318 	orr.w	r3, r3, #24
 8006f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d10f      	bne.n	8006f84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	371c      	adds	r7, #28
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	4f54300a 	.word	0x4f54300a

08006f98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4a13      	ldr	r2, [pc, #76]	; (8006ffc <USB_CoreReset+0x64>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d901      	bls.n	8006fb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e01b      	b.n	8006fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	daf2      	bge.n	8006fa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f043 0201 	orr.w	r2, r3, #1
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <USB_CoreReset+0x64>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d901      	bls.n	8006fe0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e006      	b.n	8006fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d0f0      	beq.n	8006fce <USB_CoreReset+0x36>

  return HAL_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	00030d40 	.word	0x00030d40

08007000 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800700c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007010:	f002 f990 	bl	8009334 <USBD_static_malloc>
 8007014:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007024:	2302      	movs	r3, #2
 8007026:	e066      	b.n	80070f6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7c1b      	ldrb	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d119      	bne.n	800706c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800703c:	2202      	movs	r2, #2
 800703e:	2181      	movs	r1, #129	; 0x81
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f002 f854 	bl	80090ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800704c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007050:	2202      	movs	r2, #2
 8007052:	2101      	movs	r1, #1
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f002 f84a 	bl	80090ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2210      	movs	r2, #16
 8007066:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800706a:	e016      	b.n	800709a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800706c:	2340      	movs	r3, #64	; 0x40
 800706e:	2202      	movs	r2, #2
 8007070:	2181      	movs	r1, #129	; 0x81
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f002 f83b 	bl	80090ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	2202      	movs	r2, #2
 8007082:	2101      	movs	r1, #1
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f002 f832 	bl	80090ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2210      	movs	r2, #16
 8007096:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800709a:	2308      	movs	r3, #8
 800709c:	2203      	movs	r2, #3
 800709e:	2182      	movs	r1, #130	; 0x82
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f002 f824 	bl	80090ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7c1b      	ldrb	r3, [r3, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d109      	bne.n	80070e4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070da:	2101      	movs	r1, #1
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f002 f8f5 	bl	80092cc <USBD_LL_PrepareReceive>
 80070e2:	e007      	b.n	80070f4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070ea:	2340      	movs	r3, #64	; 0x40
 80070ec:	2101      	movs	r1, #1
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f002 f8ec 	bl	80092cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b082      	sub	sp, #8
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800710a:	2181      	movs	r1, #129	; 0x81
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f002 f814 	bl	800913a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007118:	2101      	movs	r1, #1
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f002 f80d 	bl	800913a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007128:	2182      	movs	r1, #130	; 0x82
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f002 f805 	bl	800913a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00e      	beq.n	8007168 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715a:	4618      	mov	r0, r3
 800715c:	f002 f8f8 	bl	8009350 <USBD_static_free>
    pdev->pClassData = NULL;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
	...

08007174 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b086      	sub	sp, #24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007184:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	e0af      	b.n	80072fc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d03f      	beq.n	8007228 <USBD_CDC_Setup+0xb4>
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	f040 809f 	bne.w	80072ec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	88db      	ldrh	r3, [r3, #6]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d02e      	beq.n	8007214 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	b25b      	sxtb	r3, r3
 80071bc:	2b00      	cmp	r3, #0
 80071be:	da16      	bge.n	80071ee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	683a      	ldr	r2, [r7, #0]
 80071ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80071cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	88d2      	ldrh	r2, [r2, #6]
 80071d2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	88db      	ldrh	r3, [r3, #6]
 80071d8:	2b07      	cmp	r3, #7
 80071da:	bf28      	it	cs
 80071dc:	2307      	movcs	r3, #7
 80071de:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	89fa      	ldrh	r2, [r7, #14]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 fb19 	bl	800881e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80071ec:	e085      	b.n	80072fa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	785a      	ldrb	r2, [r3, #1]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	88db      	ldrh	r3, [r3, #6]
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007204:	6939      	ldr	r1, [r7, #16]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	461a      	mov	r2, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 fb32 	bl	8008876 <USBD_CtlPrepareRx>
      break;
 8007212:	e072      	b.n	80072fa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	7850      	ldrb	r0, [r2, #1]
 8007220:	2200      	movs	r2, #0
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	4798      	blx	r3
      break;
 8007226:	e068      	b.n	80072fa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b0b      	cmp	r3, #11
 800722e:	d852      	bhi.n	80072d6 <USBD_CDC_Setup+0x162>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <USBD_CDC_Setup+0xc4>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	08007269 	.word	0x08007269
 800723c:	080072e5 	.word	0x080072e5
 8007240:	080072d7 	.word	0x080072d7
 8007244:	080072d7 	.word	0x080072d7
 8007248:	080072d7 	.word	0x080072d7
 800724c:	080072d7 	.word	0x080072d7
 8007250:	080072d7 	.word	0x080072d7
 8007254:	080072d7 	.word	0x080072d7
 8007258:	080072d7 	.word	0x080072d7
 800725c:	080072d7 	.word	0x080072d7
 8007260:	08007293 	.word	0x08007293
 8007264:	080072bd 	.word	0x080072bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b03      	cmp	r3, #3
 8007272:	d107      	bne.n	8007284 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007274:	f107 030a 	add.w	r3, r7, #10
 8007278:	2202      	movs	r2, #2
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 face 	bl	800881e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007282:	e032      	b.n	80072ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fa58 	bl	800873c <USBD_CtlError>
            ret = USBD_FAIL;
 800728c:	2303      	movs	r3, #3
 800728e:	75fb      	strb	r3, [r7, #23]
          break;
 8007290:	e02b      	b.n	80072ea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d107      	bne.n	80072ae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800729e:	f107 030d 	add.w	r3, r7, #13
 80072a2:	2201      	movs	r2, #1
 80072a4:	4619      	mov	r1, r3
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f001 fab9 	bl	800881e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ac:	e01d      	b.n	80072ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 fa43 	bl	800873c <USBD_CtlError>
            ret = USBD_FAIL;
 80072b6:	2303      	movs	r3, #3
 80072b8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ba:	e016      	b.n	80072ea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d00f      	beq.n	80072e8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fa36 	bl	800873c <USBD_CtlError>
            ret = USBD_FAIL;
 80072d0:	2303      	movs	r3, #3
 80072d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072d4:	e008      	b.n	80072e8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 fa2f 	bl	800873c <USBD_CtlError>
          ret = USBD_FAIL;
 80072de:	2303      	movs	r3, #3
 80072e0:	75fb      	strb	r3, [r7, #23]
          break;
 80072e2:	e002      	b.n	80072ea <USBD_CDC_Setup+0x176>
          break;
 80072e4:	bf00      	nop
 80072e6:	e008      	b.n	80072fa <USBD_CDC_Setup+0x186>
          break;
 80072e8:	bf00      	nop
      }
      break;
 80072ea:	e006      	b.n	80072fa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fa24 	bl	800873c <USBD_CtlError>
      ret = USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	75fb      	strb	r3, [r7, #23]
      break;
 80072f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007316:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007322:	2303      	movs	r3, #3
 8007324:	e04f      	b.n	80073c6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800732c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	3318      	adds	r3, #24
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d029      	beq.n	8007398 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	3318      	adds	r3, #24
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	78f9      	ldrb	r1, [r7, #3]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	460b      	mov	r3, r1
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	1a5b      	subs	r3, r3, r1
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4403      	add	r3, r0
 8007364:	3344      	adds	r3, #68	; 0x44
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	fbb2 f1f3 	udiv	r1, r2, r3
 800736c:	fb03 f301 	mul.w	r3, r3, r1
 8007370:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007372:	2b00      	cmp	r3, #0
 8007374:	d110      	bne.n	8007398 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007376:	78fa      	ldrb	r2, [r7, #3]
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	3318      	adds	r3, #24
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800738a:	78f9      	ldrb	r1, [r7, #3]
 800738c:	2300      	movs	r3, #0
 800738e:	2200      	movs	r2, #0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 ff7a 	bl	800928a <USBD_LL_Transmit>
 8007396:	e015      	b.n	80073c4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d101      	bne.n	80073f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e015      	b.n	800741c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 ff8a 	bl	800930e <USBD_LL_GetRxDataSize>
 80073fa:	4602      	mov	r2, r0
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007416:	4611      	mov	r1, r2
 8007418:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007432:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800743a:	2303      	movs	r3, #3
 800743c:	e01b      	b.n	8007476 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d015      	beq.n	8007474 <USBD_CDC_EP0_RxReady+0x50>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800744e:	2bff      	cmp	r3, #255	; 0xff
 8007450:	d010      	beq.n	8007474 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007460:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007468:	b292      	uxth	r2, r2
 800746a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	22ff      	movs	r2, #255	; 0xff
 8007470:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2243      	movs	r2, #67	; 0x43
 800748c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800748e:	4b03      	ldr	r3, [pc, #12]	; (800749c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20000098 	.word	0x20000098

080074a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2243      	movs	r2, #67	; 0x43
 80074ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80074ae:	4b03      	ldr	r3, [pc, #12]	; (80074bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	20000054 	.word	0x20000054

080074c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2243      	movs	r2, #67	; 0x43
 80074cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80074ce:	4b03      	ldr	r3, [pc, #12]	; (80074dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr
 80074dc:	200000dc 	.word	0x200000dc

080074e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	220a      	movs	r2, #10
 80074ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074ee:	4b03      	ldr	r3, [pc, #12]	; (80074fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20000010 	.word	0x20000010

08007500 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007510:	2303      	movs	r3, #3
 8007512:	e004      	b.n	800751e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800752a:	b480      	push	{r7}
 800752c:	b087      	sub	sp, #28
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800753c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	e008      	b.n	800755a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007576:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	e004      	b.n	800758c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e01a      	b.n	80075f0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d114      	bne.n	80075ee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80075e2:	2181      	movs	r1, #129	; 0x81
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fe50 	bl	800928a <USBD_LL_Transmit>

    ret = USBD_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007606:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	e016      	b.n	8007644 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7c1b      	ldrb	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d109      	bne.n	8007632 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007628:	2101      	movs	r1, #1
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 fe4e 	bl	80092cc <USBD_LL_PrepareReceive>
 8007630:	e007      	b.n	8007642 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007638:	2340      	movs	r3, #64	; 0x40
 800763a:	2101      	movs	r1, #1
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fe45 	bl	80092cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007660:	2303      	movs	r3, #3
 8007662:	e01f      	b.n	80076a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	79fa      	ldrb	r2, [r7, #7]
 8007696:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f001 fcbd 	bl	8009018 <USBD_LL_Init>
 800769e:	4603      	mov	r3, r0
 80076a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076b6:	2300      	movs	r3, #0
 80076b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e016      	b.n	80076f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	f107 020e 	add.w	r2, r7, #14
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	4602      	mov	r2, r0
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 fcd8 	bl	80090b8 <USBD_LL_Start>
 8007708:	4603      	mov	r3, r0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007734:	2303      	movs	r3, #3
 8007736:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d009      	beq.n	8007756 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	78fa      	ldrb	r2, [r7, #3]
 800774c:	4611      	mov	r1, r2
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
 8007752:	4603      	mov	r3, r0
 8007754:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	4611      	mov	r1, r2
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	4798      	blx	r3
  }

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 ff90 	bl	80086c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d01a      	beq.n	8007802 <USBD_LL_SetupStage+0x72>
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d822      	bhi.n	8007816 <USBD_LL_SetupStage+0x86>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <USBD_LL_SetupStage+0x4a>
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d00a      	beq.n	80077ee <USBD_LL_SetupStage+0x5e>
 80077d8:	e01d      	b.n	8007816 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa62 	bl	8007cac <USBD_StdDevReq>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]
      break;
 80077ec:	e020      	b.n	8007830 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fac6 	bl	8007d88 <USBD_StdItfReq>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007800:	e016      	b.n	8007830 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fb05 	bl	8007e1a <USBD_StdEPReq>
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
      break;
 8007814:	e00c      	b.n	8007830 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800781c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007820:	b2db      	uxtb	r3, r3
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 fca7 	bl	8009178 <USBD_LL_StallEP>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
      break;
 800782e:	bf00      	nop
  }

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b086      	sub	sp, #24
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	460b      	mov	r3, r1
 8007844:	607a      	str	r2, [r7, #4]
 8007846:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d138      	bne.n	80078c0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007854:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800785c:	2b03      	cmp	r3, #3
 800785e:	d14a      	bne.n	80078f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	429a      	cmp	r2, r3
 800786a:	d913      	bls.n	8007894 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	1ad2      	subs	r2, r2, r3
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	68da      	ldr	r2, [r3, #12]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	4293      	cmp	r3, r2
 8007884:	bf28      	it	cs
 8007886:	4613      	movcs	r3, r2
 8007888:	461a      	mov	r2, r3
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f001 f80f 	bl	80088b0 <USBD_CtlContinueRx>
 8007892:	e030      	b.n	80078f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b03      	cmp	r3, #3
 800789e:	d10b      	bne.n	80078b8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f001 f80a 	bl	80088d2 <USBD_CtlSendStatus>
 80078be:	e01a      	b.n	80078f6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d114      	bne.n	80078f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00e      	beq.n	80078f6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	7afa      	ldrb	r2, [r7, #11]
 80078e2:	4611      	mov	r1, r2
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	4798      	blx	r3
 80078e8:	4603      	mov	r3, r0
 80078ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	e000      	b.n	80078f8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	460b      	mov	r3, r1
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800790e:	7afb      	ldrb	r3, [r7, #11]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d16b      	bne.n	80079ec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3314      	adds	r3, #20
 8007918:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007920:	2b02      	cmp	r3, #2
 8007922:	d156      	bne.n	80079d2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	429a      	cmp	r2, r3
 800792e:	d914      	bls.n	800795a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	689a      	ldr	r2, [r3, #8]
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	1ad2      	subs	r2, r2, r3
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	461a      	mov	r2, r3
 8007944:	6879      	ldr	r1, [r7, #4]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 ff84 	bl	8008854 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800794c:	2300      	movs	r3, #0
 800794e:	2200      	movs	r2, #0
 8007950:	2100      	movs	r1, #0
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f001 fcba 	bl	80092cc <USBD_LL_PrepareReceive>
 8007958:	e03b      	b.n	80079d2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	d11c      	bne.n	80079a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800796e:	429a      	cmp	r2, r3
 8007970:	d316      	bcc.n	80079a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800797c:	429a      	cmp	r2, r3
 800797e:	d20f      	bcs.n	80079a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007980:	2200      	movs	r2, #0
 8007982:	2100      	movs	r1, #0
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 ff65 	bl	8008854 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007992:	2300      	movs	r3, #0
 8007994:	2200      	movs	r2, #0
 8007996:	2100      	movs	r1, #0
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f001 fc97 	bl	80092cc <USBD_LL_PrepareReceive>
 800799e:	e018      	b.n	80079d2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d10b      	bne.n	80079c4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d005      	beq.n	80079c4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079c4:	2180      	movs	r1, #128	; 0x80
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f001 fbd6 	bl	8009178 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 ff93 	bl	80088f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d122      	bne.n	8007a22 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff fe98 	bl	8007712 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80079ea:	e01a      	b.n	8007a22 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d114      	bne.n	8007a22 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00e      	beq.n	8007a22 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	7afa      	ldrb	r2, [r7, #11]
 8007a0e:	4611      	mov	r1, r2
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	4798      	blx	r3
 8007a14:	4603      	mov	r3, r0
 8007a16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007a1e:	7dfb      	ldrb	r3, [r7, #23]
 8007a20:	e000      	b.n	8007a24 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3718      	adds	r7, #24
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e02f      	b.n	8007ac0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00f      	beq.n	8007a8a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6852      	ldr	r2, [r2, #4]
 8007a82:	b2d2      	uxtb	r2, r2
 8007a84:	4611      	mov	r1, r2
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a8a:	2340      	movs	r3, #64	; 0x40
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2100      	movs	r1, #0
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 fb2c 	bl	80090ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2240      	movs	r2, #64	; 0x40
 8007aa2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007aa6:	2340      	movs	r3, #64	; 0x40
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2180      	movs	r1, #128	; 0x80
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fb1e 	bl	80090ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2240      	movs	r2, #64	; 0x40
 8007abc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	78fa      	ldrb	r2, [r7, #3]
 8007ad8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2204      	movs	r2, #4
 8007b02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d106      	bne.n	8007b36 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e012      	b.n	8007b80 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d10b      	bne.n	8007b7e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	69db      	ldr	r3, [r3, #28]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e014      	b.n	8007bcc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b03      	cmp	r3, #3
 8007bac:	d10d      	bne.n	8007bca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	78fa      	ldrb	r2, [r7, #3]
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e014      	b.n	8007c18 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b03      	cmp	r3, #3
 8007bf8:	d10d      	bne.n	8007c16 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d007      	beq.n	8007c16 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	78fa      	ldrb	r2, [r7, #3]
 8007c10:	4611      	mov	r1, r2
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d009      	beq.n	8007c64 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6852      	ldr	r2, [r2, #4]
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	4611      	mov	r1, r2
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	4798      	blx	r3
  }

  return USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b087      	sub	sp, #28
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3301      	adds	r3, #1
 8007c84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c8c:	8a3b      	ldrh	r3, [r7, #16]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	b21a      	sxth	r2, r3
 8007c92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	b21b      	sxth	r3, r3
 8007c9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c9c:	89fb      	ldrh	r3, [r7, #14]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
	...

08007cac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d005      	beq.n	8007cd2 <USBD_StdDevReq+0x26>
 8007cc6:	2b40      	cmp	r3, #64	; 0x40
 8007cc8:	d853      	bhi.n	8007d72 <USBD_StdDevReq+0xc6>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <USBD_StdDevReq+0x3a>
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	d14f      	bne.n	8007d72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e04a      	b.n	8007d7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	785b      	ldrb	r3, [r3, #1]
 8007cea:	2b09      	cmp	r3, #9
 8007cec:	d83b      	bhi.n	8007d66 <USBD_StdDevReq+0xba>
 8007cee:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <USBD_StdDevReq+0x48>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007d5d 	.word	0x08007d5d
 8007cfc:	08007d67 	.word	0x08007d67
 8007d00:	08007d53 	.word	0x08007d53
 8007d04:	08007d67 	.word	0x08007d67
 8007d08:	08007d27 	.word	0x08007d27
 8007d0c:	08007d1d 	.word	0x08007d1d
 8007d10:	08007d67 	.word	0x08007d67
 8007d14:	08007d3f 	.word	0x08007d3f
 8007d18:	08007d31 	.word	0x08007d31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f9de 	bl	80080e0 <USBD_GetDescriptor>
          break;
 8007d24:	e024      	b.n	8007d70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fb43 	bl	80083b4 <USBD_SetAddress>
          break;
 8007d2e:	e01f      	b.n	8007d70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fb82 	bl	800843c <USBD_SetConfig>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]
          break;
 8007d3c:	e018      	b.n	8007d70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fc21 	bl	8008588 <USBD_GetConfig>
          break;
 8007d46:	e013      	b.n	8007d70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fc52 	bl	80085f4 <USBD_GetStatus>
          break;
 8007d50:	e00e      	b.n	8007d70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fc81 	bl	800865c <USBD_SetFeature>
          break;
 8007d5a:	e009      	b.n	8007d70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fc90 	bl	8008684 <USBD_ClrFeature>
          break;
 8007d64:	e004      	b.n	8007d70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fce7 	bl	800873c <USBD_CtlError>
          break;
 8007d6e:	bf00      	nop
      }
      break;
 8007d70:	e004      	b.n	8007d7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fce1 	bl	800873c <USBD_CtlError>
      break;
 8007d7a:	bf00      	nop
  }

  return ret;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop

08007d88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d9e:	2b40      	cmp	r3, #64	; 0x40
 8007da0:	d005      	beq.n	8007dae <USBD_StdItfReq+0x26>
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d82f      	bhi.n	8007e06 <USBD_StdItfReq+0x7e>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <USBD_StdItfReq+0x26>
 8007daa:	2b20      	cmp	r3, #32
 8007dac:	d12b      	bne.n	8007e06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d81d      	bhi.n	8007df8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	889b      	ldrh	r3, [r3, #4]
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d813      	bhi.n	8007dee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	4798      	blx	r3
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	88db      	ldrh	r3, [r3, #6]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d110      	bne.n	8007e02 <USBD_StdItfReq+0x7a>
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10d      	bne.n	8007e02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fd73 	bl	80088d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007dec:	e009      	b.n	8007e02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fca3 	bl	800873c <USBD_CtlError>
          break;
 8007df6:	e004      	b.n	8007e02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fc9e 	bl	800873c <USBD_CtlError>
          break;
 8007e00:	e000      	b.n	8007e04 <USBD_StdItfReq+0x7c>
          break;
 8007e02:	bf00      	nop
      }
      break;
 8007e04:	e004      	b.n	8007e10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc97 	bl	800873c <USBD_CtlError>
      break;
 8007e0e:	bf00      	nop
  }

  return ret;
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b084      	sub	sp, #16
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	889b      	ldrh	r3, [r3, #4]
 8007e2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e36:	2b40      	cmp	r3, #64	; 0x40
 8007e38:	d007      	beq.n	8007e4a <USBD_StdEPReq+0x30>
 8007e3a:	2b40      	cmp	r3, #64	; 0x40
 8007e3c:	f200 8145 	bhi.w	80080ca <USBD_StdEPReq+0x2b0>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00c      	beq.n	8007e5e <USBD_StdEPReq+0x44>
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	f040 8140 	bne.w	80080ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	6839      	ldr	r1, [r7, #0]
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	4798      	blx	r3
 8007e58:	4603      	mov	r3, r0
 8007e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5c:	e13a      	b.n	80080d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	d007      	beq.n	8007e76 <USBD_StdEPReq+0x5c>
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	f300 8129 	bgt.w	80080be <USBD_StdEPReq+0x2a4>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d07f      	beq.n	8007f70 <USBD_StdEPReq+0x156>
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d03c      	beq.n	8007eee <USBD_StdEPReq+0xd4>
 8007e74:	e123      	b.n	80080be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d002      	beq.n	8007e88 <USBD_StdEPReq+0x6e>
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d016      	beq.n	8007eb4 <USBD_StdEPReq+0x9a>
 8007e86:	e02c      	b.n	8007ee2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00d      	beq.n	8007eaa <USBD_StdEPReq+0x90>
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b80      	cmp	r3, #128	; 0x80
 8007e92:	d00a      	beq.n	8007eaa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 f96d 	bl	8009178 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e9e:	2180      	movs	r1, #128	; 0x80
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 f969 	bl	8009178 <USBD_LL_StallEP>
 8007ea6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ea8:	e020      	b.n	8007eec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fc45 	bl	800873c <USBD_CtlError>
              break;
 8007eb2:	e01b      	b.n	8007eec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	885b      	ldrh	r3, [r3, #2]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10e      	bne.n	8007eda <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <USBD_StdEPReq+0xc0>
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b80      	cmp	r3, #128	; 0x80
 8007ec6:	d008      	beq.n	8007eda <USBD_StdEPReq+0xc0>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	88db      	ldrh	r3, [r3, #6]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f94f 	bl	8009178 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fcf9 	bl	80088d2 <USBD_CtlSendStatus>

              break;
 8007ee0:	e004      	b.n	8007eec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fc29 	bl	800873c <USBD_CtlError>
              break;
 8007eea:	bf00      	nop
          }
          break;
 8007eec:	e0ec      	b.n	80080c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d002      	beq.n	8007f00 <USBD_StdEPReq+0xe6>
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d016      	beq.n	8007f2c <USBD_StdEPReq+0x112>
 8007efe:	e030      	b.n	8007f62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00d      	beq.n	8007f22 <USBD_StdEPReq+0x108>
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b80      	cmp	r3, #128	; 0x80
 8007f0a:	d00a      	beq.n	8007f22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 f931 	bl	8009178 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f16:	2180      	movs	r1, #128	; 0x80
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 f92d 	bl	8009178 <USBD_LL_StallEP>
 8007f1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f20:	e025      	b.n	8007f6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fc09 	bl	800873c <USBD_CtlError>
              break;
 8007f2a:	e020      	b.n	8007f6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	885b      	ldrh	r3, [r3, #2]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d11b      	bne.n	8007f6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d004      	beq.n	8007f48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f3e:	7bbb      	ldrb	r3, [r7, #14]
 8007f40:	4619      	mov	r1, r3
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 f937 	bl	80091b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fcc2 	bl	80088d2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	4798      	blx	r3
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007f60:	e004      	b.n	8007f6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fbe9 	bl	800873c <USBD_CtlError>
              break;
 8007f6a:	e000      	b.n	8007f6e <USBD_StdEPReq+0x154>
              break;
 8007f6c:	bf00      	nop
          }
          break;
 8007f6e:	e0ab      	b.n	80080c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d002      	beq.n	8007f82 <USBD_StdEPReq+0x168>
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d032      	beq.n	8007fe6 <USBD_StdEPReq+0x1cc>
 8007f80:	e097      	b.n	80080b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d007      	beq.n	8007f98 <USBD_StdEPReq+0x17e>
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	2b80      	cmp	r3, #128	; 0x80
 8007f8c:	d004      	beq.n	8007f98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fbd3 	bl	800873c <USBD_CtlError>
                break;
 8007f96:	e091      	b.n	80080bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	da0b      	bge.n	8007fb8 <USBD_StdEPReq+0x19e>
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
 8007fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	3310      	adds	r3, #16
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	e00b      	b.n	8007fd0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	3304      	adds	r3, #4
 8007fd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fc1d 	bl	800881e <USBD_CtlSendData>
              break;
 8007fe4:	e06a      	b.n	80080bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007fe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	da11      	bge.n	8008012 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	f003 020f 	and.w	r2, r3, #15
 8007ff4:	6879      	ldr	r1, [r7, #4]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	440b      	add	r3, r1
 8008000:	3324      	adds	r3, #36	; 0x24
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d117      	bne.n	8008038 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008008:	6839      	ldr	r1, [r7, #0]
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fb96 	bl	800873c <USBD_CtlError>
                  break;
 8008010:	e054      	b.n	80080bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	f003 020f 	and.w	r2, r3, #15
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d104      	bne.n	8008038 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fb83 	bl	800873c <USBD_CtlError>
                  break;
 8008036:	e041      	b.n	80080bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da0b      	bge.n	8008058 <USBD_StdEPReq+0x23e>
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	3310      	adds	r3, #16
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	4413      	add	r3, r2
 8008054:	3304      	adds	r3, #4
 8008056:	e00b      	b.n	8008070 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800805e:	4613      	mov	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4413      	add	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	3304      	adds	r3, #4
 8008070:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <USBD_StdEPReq+0x264>
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	2b80      	cmp	r3, #128	; 0x80
 800807c:	d103      	bne.n	8008086 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	e00e      	b.n	80080a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 f8b2 	bl	80091f4 <USBD_LL_IsStallEP>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2201      	movs	r2, #1
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	e002      	b.n	80080a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	2202      	movs	r2, #2
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fbb7 	bl	800881e <USBD_CtlSendData>
              break;
 80080b0:	e004      	b.n	80080bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fb41 	bl	800873c <USBD_CtlError>
              break;
 80080ba:	bf00      	nop
          }
          break;
 80080bc:	e004      	b.n	80080c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fb3b 	bl	800873c <USBD_CtlError>
          break;
 80080c6:	bf00      	nop
      }
      break;
 80080c8:	e004      	b.n	80080d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fb35 	bl	800873c <USBD_CtlError>
      break;
 80080d2:	bf00      	nop
  }

  return ret;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	885b      	ldrh	r3, [r3, #2]
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	2b06      	cmp	r3, #6
 8008102:	f200 8128 	bhi.w	8008356 <USBD_GetDescriptor+0x276>
 8008106:	a201      	add	r2, pc, #4	; (adr r2, 800810c <USBD_GetDescriptor+0x2c>)
 8008108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810c:	08008129 	.word	0x08008129
 8008110:	08008141 	.word	0x08008141
 8008114:	08008181 	.word	0x08008181
 8008118:	08008357 	.word	0x08008357
 800811c:	08008357 	.word	0x08008357
 8008120:	080082f7 	.word	0x080082f7
 8008124:	08008323 	.word	0x08008323
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	7c12      	ldrb	r2, [r2, #16]
 8008134:	f107 0108 	add.w	r1, r7, #8
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
 800813c:	60f8      	str	r0, [r7, #12]
      break;
 800813e:	e112      	b.n	8008366 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7c1b      	ldrb	r3, [r3, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10d      	bne.n	8008164 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	f107 0208 	add.w	r2, r7, #8
 8008154:	4610      	mov	r0, r2
 8008156:	4798      	blx	r3
 8008158:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	2202      	movs	r2, #2
 8008160:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008162:	e100      	b.n	8008366 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	f107 0208 	add.w	r2, r7, #8
 8008170:	4610      	mov	r0, r2
 8008172:	4798      	blx	r3
 8008174:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	3301      	adds	r3, #1
 800817a:	2202      	movs	r2, #2
 800817c:	701a      	strb	r2, [r3, #0]
      break;
 800817e:	e0f2      	b.n	8008366 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	885b      	ldrh	r3, [r3, #2]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b05      	cmp	r3, #5
 8008188:	f200 80ac 	bhi.w	80082e4 <USBD_GetDescriptor+0x204>
 800818c:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <USBD_GetDescriptor+0xb4>)
 800818e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008192:	bf00      	nop
 8008194:	080081ad 	.word	0x080081ad
 8008198:	080081e1 	.word	0x080081e1
 800819c:	08008215 	.word	0x08008215
 80081a0:	08008249 	.word	0x08008249
 80081a4:	0800827d 	.word	0x0800827d
 80081a8:	080082b1 	.word	0x080082b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00b      	beq.n	80081d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	7c12      	ldrb	r2, [r2, #16]
 80081c4:	f107 0108 	add.w	r1, r7, #8
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ce:	e091      	b.n	80082f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fab2 	bl	800873c <USBD_CtlError>
            err++;
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	3301      	adds	r3, #1
 80081dc:	72fb      	strb	r3, [r7, #11]
          break;
 80081de:	e089      	b.n	80082f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00b      	beq.n	8008204 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	7c12      	ldrb	r2, [r2, #16]
 80081f8:	f107 0108 	add.w	r1, r7, #8
 80081fc:	4610      	mov	r0, r2
 80081fe:	4798      	blx	r3
 8008200:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008202:	e077      	b.n	80082f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 fa98 	bl	800873c <USBD_CtlError>
            err++;
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	3301      	adds	r3, #1
 8008210:	72fb      	strb	r3, [r7, #11]
          break;
 8008212:	e06f      	b.n	80082f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d00b      	beq.n	8008238 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	f107 0108 	add.w	r1, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008236:	e05d      	b.n	80082f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa7e 	bl	800873c <USBD_CtlError>
            err++;
 8008240:	7afb      	ldrb	r3, [r7, #11]
 8008242:	3301      	adds	r3, #1
 8008244:	72fb      	strb	r3, [r7, #11]
          break;
 8008246:	e055      	b.n	80082f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00b      	beq.n	800826c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	7c12      	ldrb	r2, [r2, #16]
 8008260:	f107 0108 	add.w	r1, r7, #8
 8008264:	4610      	mov	r0, r2
 8008266:	4798      	blx	r3
 8008268:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800826a:	e043      	b.n	80082f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa64 	bl	800873c <USBD_CtlError>
            err++;
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	3301      	adds	r3, #1
 8008278:	72fb      	strb	r3, [r7, #11]
          break;
 800827a:	e03b      	b.n	80082f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00b      	beq.n	80082a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	7c12      	ldrb	r2, [r2, #16]
 8008294:	f107 0108 	add.w	r1, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800829e:	e029      	b.n	80082f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082a0:	6839      	ldr	r1, [r7, #0]
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fa4a 	bl	800873c <USBD_CtlError>
            err++;
 80082a8:	7afb      	ldrb	r3, [r7, #11]
 80082aa:	3301      	adds	r3, #1
 80082ac:	72fb      	strb	r3, [r7, #11]
          break;
 80082ae:	e021      	b.n	80082f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00b      	beq.n	80082d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7c12      	ldrb	r2, [r2, #16]
 80082c8:	f107 0108 	add.w	r1, r7, #8
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082d2:	e00f      	b.n	80082f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa30 	bl	800873c <USBD_CtlError>
            err++;
 80082dc:	7afb      	ldrb	r3, [r7, #11]
 80082de:	3301      	adds	r3, #1
 80082e0:	72fb      	strb	r3, [r7, #11]
          break;
 80082e2:	e007      	b.n	80082f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fa28 	bl	800873c <USBD_CtlError>
          err++;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
 80082ee:	3301      	adds	r3, #1
 80082f0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80082f2:	bf00      	nop
      }
      break;
 80082f4:	e037      	b.n	8008366 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	7c1b      	ldrb	r3, [r3, #16]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d109      	bne.n	8008312 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	f107 0208 	add.w	r2, r7, #8
 800830a:	4610      	mov	r0, r2
 800830c:	4798      	blx	r3
 800830e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008310:	e029      	b.n	8008366 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fa11 	bl	800873c <USBD_CtlError>
        err++;
 800831a:	7afb      	ldrb	r3, [r7, #11]
 800831c:	3301      	adds	r3, #1
 800831e:	72fb      	strb	r3, [r7, #11]
      break;
 8008320:	e021      	b.n	8008366 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7c1b      	ldrb	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10d      	bne.n	8008346 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008332:	f107 0208 	add.w	r2, r7, #8
 8008336:	4610      	mov	r0, r2
 8008338:	4798      	blx	r3
 800833a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	2207      	movs	r2, #7
 8008342:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008344:	e00f      	b.n	8008366 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f9f7 	bl	800873c <USBD_CtlError>
        err++;
 800834e:	7afb      	ldrb	r3, [r7, #11]
 8008350:	3301      	adds	r3, #1
 8008352:	72fb      	strb	r3, [r7, #11]
      break;
 8008354:	e007      	b.n	8008366 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f9ef 	bl	800873c <USBD_CtlError>
      err++;
 800835e:	7afb      	ldrb	r3, [r7, #11]
 8008360:	3301      	adds	r3, #1
 8008362:	72fb      	strb	r3, [r7, #11]
      break;
 8008364:	bf00      	nop
  }

  if (err != 0U)
 8008366:	7afb      	ldrb	r3, [r7, #11]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d11e      	bne.n	80083aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	88db      	ldrh	r3, [r3, #6]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d016      	beq.n	80083a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008374:	893b      	ldrh	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00e      	beq.n	8008398 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88da      	ldrh	r2, [r3, #6]
 800837e:	893b      	ldrh	r3, [r7, #8]
 8008380:	4293      	cmp	r3, r2
 8008382:	bf28      	it	cs
 8008384:	4613      	movcs	r3, r2
 8008386:	b29b      	uxth	r3, r3
 8008388:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800838a:	893b      	ldrh	r3, [r7, #8]
 800838c:	461a      	mov	r2, r3
 800838e:	68f9      	ldr	r1, [r7, #12]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fa44 	bl	800881e <USBD_CtlSendData>
 8008396:	e009      	b.n	80083ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f9ce 	bl	800873c <USBD_CtlError>
 80083a0:	e004      	b.n	80083ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa95 	bl	80088d2 <USBD_CtlSendStatus>
 80083a8:	e000      	b.n	80083ac <USBD_GetDescriptor+0x2cc>
    return;
 80083aa:	bf00      	nop
  }
}
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop

080083b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	889b      	ldrh	r3, [r3, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d131      	bne.n	800842a <USBD_SetAddress+0x76>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	88db      	ldrh	r3, [r3, #6]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d12d      	bne.n	800842a <USBD_SetAddress+0x76>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	885b      	ldrh	r3, [r3, #2]
 80083d2:	2b7f      	cmp	r3, #127	; 0x7f
 80083d4:	d829      	bhi.n	800842a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	885b      	ldrh	r3, [r3, #2]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d104      	bne.n	80083f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f9a3 	bl	800873c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f6:	e01d      	b.n	8008434 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	7bfa      	ldrb	r2, [r7, #15]
 80083fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 ff21 	bl	800924c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa61 	bl	80088d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d004      	beq.n	8008420 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2202      	movs	r2, #2
 800841a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841e:	e009      	b.n	8008434 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008428:	e004      	b.n	8008434 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f985 	bl	800873c <USBD_CtlError>
  }
}
 8008432:	bf00      	nop
 8008434:	bf00      	nop
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	885b      	ldrh	r3, [r3, #2]
 800844e:	b2da      	uxtb	r2, r3
 8008450:	4b4c      	ldr	r3, [pc, #304]	; (8008584 <USBD_SetConfig+0x148>)
 8008452:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008454:	4b4b      	ldr	r3, [pc, #300]	; (8008584 <USBD_SetConfig+0x148>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d905      	bls.n	8008468 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f96c 	bl	800873c <USBD_CtlError>
    return USBD_FAIL;
 8008464:	2303      	movs	r3, #3
 8008466:	e088      	b.n	800857a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d002      	beq.n	800847a <USBD_SetConfig+0x3e>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d025      	beq.n	80084c4 <USBD_SetConfig+0x88>
 8008478:	e071      	b.n	800855e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800847a:	4b42      	ldr	r3, [pc, #264]	; (8008584 <USBD_SetConfig+0x148>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01c      	beq.n	80084bc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008482:	4b40      	ldr	r3, [pc, #256]	; (8008584 <USBD_SetConfig+0x148>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800848c:	4b3d      	ldr	r3, [pc, #244]	; (8008584 <USBD_SetConfig+0x148>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff f948 	bl	8007728 <USBD_SetClassConfig>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80084a2:	6839      	ldr	r1, [r7, #0]
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f949 	bl	800873c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084aa:	e065      	b.n	8008578 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fa10 	bl	80088d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2203      	movs	r2, #3
 80084b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ba:	e05d      	b.n	8008578 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fa08 	bl	80088d2 <USBD_CtlSendStatus>
      break;
 80084c2:	e059      	b.n	8008578 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80084c4:	4b2f      	ldr	r3, [pc, #188]	; (8008584 <USBD_SetConfig+0x148>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d112      	bne.n	80084f2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80084d4:	4b2b      	ldr	r3, [pc, #172]	; (8008584 <USBD_SetConfig+0x148>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084de:	4b29      	ldr	r3, [pc, #164]	; (8008584 <USBD_SetConfig+0x148>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff f93b 	bl	8007760 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f9f1 	bl	80088d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80084f0:	e042      	b.n	8008578 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80084f2:	4b24      	ldr	r3, [pc, #144]	; (8008584 <USBD_SetConfig+0x148>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d02a      	beq.n	8008556 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff f929 	bl	8007760 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800850e:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <USBD_SetConfig+0x148>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008518:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <USBD_SetConfig+0x148>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff f902 	bl	8007728 <USBD_SetClassConfig>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008528:	7bfb      	ldrb	r3, [r7, #15]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00f      	beq.n	800854e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800852e:	6839      	ldr	r1, [r7, #0]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f903 	bl	800873c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f7ff f90e 	bl	8007760 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800854c:	e014      	b.n	8008578 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f9bf 	bl	80088d2 <USBD_CtlSendStatus>
      break;
 8008554:	e010      	b.n	8008578 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f9bb 	bl	80088d2 <USBD_CtlSendStatus>
      break;
 800855c:	e00c      	b.n	8008578 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f8eb 	bl	800873c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008566:	4b07      	ldr	r3, [pc, #28]	; (8008584 <USBD_SetConfig+0x148>)
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff f8f7 	bl	8007760 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008572:	2303      	movs	r3, #3
 8008574:	73fb      	strb	r3, [r7, #15]
      break;
 8008576:	bf00      	nop
  }

  return ret;
 8008578:	7bfb      	ldrb	r3, [r7, #15]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	200001a0 	.word	0x200001a0

08008588 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d004      	beq.n	80085a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 f8cd 	bl	800873c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085a2:	e023      	b.n	80085ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	dc02      	bgt.n	80085b6 <USBD_GetConfig+0x2e>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	dc03      	bgt.n	80085bc <USBD_GetConfig+0x34>
 80085b4:	e015      	b.n	80085e2 <USBD_GetConfig+0x5a>
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d00b      	beq.n	80085d2 <USBD_GetConfig+0x4a>
 80085ba:	e012      	b.n	80085e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3308      	adds	r3, #8
 80085c6:	2201      	movs	r2, #1
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f927 	bl	800881e <USBD_CtlSendData>
        break;
 80085d0:	e00c      	b.n	80085ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	3304      	adds	r3, #4
 80085d6:	2201      	movs	r2, #1
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f91f 	bl	800881e <USBD_CtlSendData>
        break;
 80085e0:	e004      	b.n	80085ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f8a9 	bl	800873c <USBD_CtlError>
        break;
 80085ea:	bf00      	nop
}
 80085ec:	bf00      	nop
 80085ee:	3708      	adds	r7, #8
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008604:	b2db      	uxtb	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	2b02      	cmp	r3, #2
 800860a:	d81e      	bhi.n	800864a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	88db      	ldrh	r3, [r3, #6]
 8008610:	2b02      	cmp	r3, #2
 8008612:	d004      	beq.n	800861e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f890 	bl	800873c <USBD_CtlError>
        break;
 800861c:	e01a      	b.n	8008654 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f043 0202 	orr.w	r2, r3, #2
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	330c      	adds	r3, #12
 800863e:	2202      	movs	r2, #2
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f8eb 	bl	800881e <USBD_CtlSendData>
      break;
 8008648:	e004      	b.n	8008654 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f875 	bl	800873c <USBD_CtlError>
      break;
 8008652:	bf00      	nop
  }
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	885b      	ldrh	r3, [r3, #2]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d106      	bne.n	800867c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f92b 	bl	80088d2 <USBD_CtlSendStatus>
  }
}
 800867c:	bf00      	nop
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008694:	b2db      	uxtb	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	2b02      	cmp	r3, #2
 800869a:	d80b      	bhi.n	80086b4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	885b      	ldrh	r3, [r3, #2]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d10c      	bne.n	80086be <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f910 	bl	80088d2 <USBD_CtlSendStatus>
      }
      break;
 80086b2:	e004      	b.n	80086be <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f840 	bl	800873c <USBD_CtlError>
      break;
 80086bc:	e000      	b.n	80086c0 <USBD_ClrFeature+0x3c>
      break;
 80086be:	bf00      	nop
  }
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	781a      	ldrb	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	781a      	ldrb	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3301      	adds	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff fabb 	bl	8007c6e <SWAPBYTE>
 80086f8:	4603      	mov	r3, r0
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	3301      	adds	r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f7ff faae 	bl	8007c6e <SWAPBYTE>
 8008712:	4603      	mov	r3, r0
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3301      	adds	r3, #1
 800871e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff faa1 	bl	8007c6e <SWAPBYTE>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	80da      	strh	r2, [r3, #6]
}
 8008734:	bf00      	nop
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008746:	2180      	movs	r1, #128	; 0x80
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 fd15 	bl	8009178 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800874e:	2100      	movs	r1, #0
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fd11 	bl	8009178 <USBD_LL_StallEP>
}
 8008756:	bf00      	nop
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b086      	sub	sp, #24
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800876a:	2300      	movs	r3, #0
 800876c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d036      	beq.n	80087e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008778:	6938      	ldr	r0, [r7, #16]
 800877a:	f000 f836 	bl	80087ea <USBD_GetLen>
 800877e:	4603      	mov	r3, r0
 8008780:	3301      	adds	r3, #1
 8008782:	b29b      	uxth	r3, r3
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	4413      	add	r3, r2
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	7812      	ldrb	r2, [r2, #0]
 8008796:	701a      	strb	r2, [r3, #0]
  idx++;
 8008798:	7dfb      	ldrb	r3, [r7, #23]
 800879a:	3301      	adds	r3, #1
 800879c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	4413      	add	r3, r2
 80087a4:	2203      	movs	r2, #3
 80087a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
 80087aa:	3301      	adds	r3, #1
 80087ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80087ae:	e013      	b.n	80087d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	4413      	add	r3, r2
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	7812      	ldrb	r2, [r2, #0]
 80087ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	3301      	adds	r3, #1
 80087c0:	613b      	str	r3, [r7, #16]
    idx++;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	3301      	adds	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	4413      	add	r3, r2
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	3301      	adds	r3, #1
 80087d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e7      	bne.n	80087b0 <USBD_GetString+0x52>
 80087e0:	e000      	b.n	80087e4 <USBD_GetString+0x86>
    return;
 80087e2:	bf00      	nop
  }
}
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80087fa:	e005      	b.n	8008808 <USBD_GetLen+0x1e>
  {
    len++;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	3301      	adds	r3, #1
 8008800:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	3301      	adds	r3, #1
 8008806:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1f5      	bne.n	80087fc <USBD_GetLen+0x12>
  }

  return len;
 8008810:	7bfb      	ldrb	r3, [r7, #15]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	60f8      	str	r0, [r7, #12]
 8008826:	60b9      	str	r1, [r7, #8]
 8008828:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2202      	movs	r2, #2
 800882e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	2100      	movs	r1, #0
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fd20 	bl	800928a <USBD_LL_Transmit>

  return USBD_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	2100      	movs	r1, #0
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 fd0f 	bl	800928a <USBD_LL_Transmit>

  return USBD_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2203      	movs	r2, #3
 8008886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	2100      	movs	r1, #0
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 fd13 	bl	80092cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	2100      	movs	r1, #0
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f000 fd02 	bl	80092cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2204      	movs	r2, #4
 80088de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80088e2:	2300      	movs	r3, #0
 80088e4:	2200      	movs	r2, #0
 80088e6:	2100      	movs	r1, #0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fcce 	bl	800928a <USBD_LL_Transmit>

  return USBD_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2205      	movs	r2, #5
 8008904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008908:	2300      	movs	r3, #0
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fcdc 	bl	80092cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008924:	2200      	movs	r2, #0
 8008926:	4913      	ldr	r1, [pc, #76]	; (8008974 <MX_USB_DEVICE_Init+0x54>)
 8008928:	4813      	ldr	r0, [pc, #76]	; (8008978 <MX_USB_DEVICE_Init+0x58>)
 800892a:	f7fe fe8f 	bl	800764c <USBD_Init>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008934:	f7f8 f87a 	bl	8000a2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008938:	4910      	ldr	r1, [pc, #64]	; (800897c <MX_USB_DEVICE_Init+0x5c>)
 800893a:	480f      	ldr	r0, [pc, #60]	; (8008978 <MX_USB_DEVICE_Init+0x58>)
 800893c:	f7fe feb6 	bl	80076ac <USBD_RegisterClass>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008946:	f7f8 f871 	bl	8000a2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800894a:	490d      	ldr	r1, [pc, #52]	; (8008980 <MX_USB_DEVICE_Init+0x60>)
 800894c:	480a      	ldr	r0, [pc, #40]	; (8008978 <MX_USB_DEVICE_Init+0x58>)
 800894e:	f7fe fdd7 	bl	8007500 <USBD_CDC_RegisterInterface>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008958:	f7f8 f868 	bl	8000a2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800895c:	4806      	ldr	r0, [pc, #24]	; (8008978 <MX_USB_DEVICE_Init+0x58>)
 800895e:	f7fe fecc 	bl	80076fa <USBD_Start>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008968:	f7f8 f860 	bl	8000a2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800896c:	f7f9 ff92 	bl	8002894 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008970:	bf00      	nop
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20000134 	.word	0x20000134
 8008978:	20000480 	.word	0x20000480
 800897c:	2000001c 	.word	0x2000001c
 8008980:	20000120 	.word	0x20000120

08008984 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008988:	2200      	movs	r2, #0
 800898a:	4905      	ldr	r1, [pc, #20]	; (80089a0 <CDC_Init_FS+0x1c>)
 800898c:	4805      	ldr	r0, [pc, #20]	; (80089a4 <CDC_Init_FS+0x20>)
 800898e:	f7fe fdcc 	bl	800752a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008992:	4905      	ldr	r1, [pc, #20]	; (80089a8 <CDC_Init_FS+0x24>)
 8008994:	4803      	ldr	r0, [pc, #12]	; (80089a4 <CDC_Init_FS+0x20>)
 8008996:	f7fe fde6 	bl	8007566 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800899a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800899c:	4618      	mov	r0, r3
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20000f50 	.word	0x20000f50
 80089a4:	20000480 	.word	0x20000480
 80089a8:	20000750 	.word	0x20000750

080089ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80089b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
 80089c8:	4613      	mov	r3, r2
 80089ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	2b23      	cmp	r3, #35	; 0x23
 80089d0:	d84a      	bhi.n	8008a68 <CDC_Control_FS+0xac>
 80089d2:	a201      	add	r2, pc, #4	; (adr r2, 80089d8 <CDC_Control_FS+0x1c>)
 80089d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d8:	08008a69 	.word	0x08008a69
 80089dc:	08008a69 	.word	0x08008a69
 80089e0:	08008a69 	.word	0x08008a69
 80089e4:	08008a69 	.word	0x08008a69
 80089e8:	08008a69 	.word	0x08008a69
 80089ec:	08008a69 	.word	0x08008a69
 80089f0:	08008a69 	.word	0x08008a69
 80089f4:	08008a69 	.word	0x08008a69
 80089f8:	08008a69 	.word	0x08008a69
 80089fc:	08008a69 	.word	0x08008a69
 8008a00:	08008a69 	.word	0x08008a69
 8008a04:	08008a69 	.word	0x08008a69
 8008a08:	08008a69 	.word	0x08008a69
 8008a0c:	08008a69 	.word	0x08008a69
 8008a10:	08008a69 	.word	0x08008a69
 8008a14:	08008a69 	.word	0x08008a69
 8008a18:	08008a69 	.word	0x08008a69
 8008a1c:	08008a69 	.word	0x08008a69
 8008a20:	08008a69 	.word	0x08008a69
 8008a24:	08008a69 	.word	0x08008a69
 8008a28:	08008a69 	.word	0x08008a69
 8008a2c:	08008a69 	.word	0x08008a69
 8008a30:	08008a69 	.word	0x08008a69
 8008a34:	08008a69 	.word	0x08008a69
 8008a38:	08008a69 	.word	0x08008a69
 8008a3c:	08008a69 	.word	0x08008a69
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a69 	.word	0x08008a69
 8008a48:	08008a69 	.word	0x08008a69
 8008a4c:	08008a69 	.word	0x08008a69
 8008a50:	08008a69 	.word	0x08008a69
 8008a54:	08008a69 	.word	0x08008a69
 8008a58:	08008a69 	.word	0x08008a69
 8008a5c:	08008a69 	.word	0x08008a69
 8008a60:	08008a69 	.word	0x08008a69
 8008a64:	08008a69 	.word	0x08008a69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008a68:	bf00      	nop
  }

  return (USBD_OK);
 8008a6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	4805      	ldr	r0, [pc, #20]	; (8008a9c <CDC_Receive_FS+0x24>)
 8008a86:	f7fe fd6e 	bl	8007566 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008a8a:	4804      	ldr	r0, [pc, #16]	; (8008a9c <CDC_Receive_FS+0x24>)
 8008a8c:	f7fe fdb4 	bl	80075f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008a90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000480 	.word	0x20000480

08008aa0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008ab0:	4b0d      	ldr	r3, [pc, #52]	; (8008ae8 <CDC_Transmit_FS+0x48>)
 8008ab2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ab6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e00b      	b.n	8008ade <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ac6:	887b      	ldrh	r3, [r7, #2]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	4806      	ldr	r0, [pc, #24]	; (8008ae8 <CDC_Transmit_FS+0x48>)
 8008ace:	f7fe fd2c 	bl	800752a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ad2:	4805      	ldr	r0, [pc, #20]	; (8008ae8 <CDC_Transmit_FS+0x48>)
 8008ad4:	f7fe fd60 	bl	8007598 <USBD_CDC_TransmitPacket>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20000480 	.word	0x20000480

08008aec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	4613      	mov	r3, r2
 8008af8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008afe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	6039      	str	r1, [r7, #0]
 8008b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2212      	movs	r2, #18
 8008b20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b22:	4b03      	ldr	r3, [pc, #12]	; (8008b30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	20000150 	.word	0x20000150

08008b34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2204      	movs	r2, #4
 8008b44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b46:	4b03      	ldr	r3, [pc, #12]	; (8008b54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	20000164 	.word	0x20000164

08008b58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d105      	bne.n	8008b76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	4907      	ldr	r1, [pc, #28]	; (8008b8c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b6e:	4808      	ldr	r0, [pc, #32]	; (8008b90 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b70:	f7ff fdf5 	bl	800875e <USBD_GetString>
 8008b74:	e004      	b.n	8008b80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	4904      	ldr	r1, [pc, #16]	; (8008b8c <USBD_FS_ProductStrDescriptor+0x34>)
 8008b7a:	4805      	ldr	r0, [pc, #20]	; (8008b90 <USBD_FS_ProductStrDescriptor+0x38>)
 8008b7c:	f7ff fdef 	bl	800875e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b80:	4b02      	ldr	r3, [pc, #8]	; (8008b8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20001750 	.word	0x20001750
 8008b90:	0800942c 	.word	0x0800942c

08008b94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	6039      	str	r1, [r7, #0]
 8008b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	4904      	ldr	r1, [pc, #16]	; (8008bb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ba4:	4804      	ldr	r0, [pc, #16]	; (8008bb8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ba6:	f7ff fdda 	bl	800875e <USBD_GetString>
  return USBD_StrDesc;
 8008baa:	4b02      	ldr	r3, [pc, #8]	; (8008bb4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	20001750 	.word	0x20001750
 8008bb8:	08009444 	.word	0x08009444

08008bbc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	221a      	movs	r2, #26
 8008bcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008bce:	f000 f843 	bl	8008c58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008bd2:	4b02      	ldr	r3, [pc, #8]	; (8008bdc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000168 	.word	0x20000168

08008be0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	4603      	mov	r3, r0
 8008be8:	6039      	str	r1, [r7, #0]
 8008bea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	4907      	ldr	r1, [pc, #28]	; (8008c14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008bf6:	4808      	ldr	r0, [pc, #32]	; (8008c18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008bf8:	f7ff fdb1 	bl	800875e <USBD_GetString>
 8008bfc:	e004      	b.n	8008c08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	4904      	ldr	r1, [pc, #16]	; (8008c14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c02:	4805      	ldr	r0, [pc, #20]	; (8008c18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c04:	f7ff fdab 	bl	800875e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c08:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20001750 	.word	0x20001750
 8008c18:	08009458 	.word	0x08009458

08008c1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	6039      	str	r1, [r7, #0]
 8008c26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d105      	bne.n	8008c3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	4907      	ldr	r1, [pc, #28]	; (8008c50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c32:	4808      	ldr	r0, [pc, #32]	; (8008c54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c34:	f7ff fd93 	bl	800875e <USBD_GetString>
 8008c38:	e004      	b.n	8008c44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	4904      	ldr	r1, [pc, #16]	; (8008c50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c3e:	4805      	ldr	r0, [pc, #20]	; (8008c54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c40:	f7ff fd8d 	bl	800875e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20001750 	.word	0x20001750
 8008c54:	08009464 	.word	0x08009464

08008c58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008c5e:	4b0f      	ldr	r3, [pc, #60]	; (8008c9c <Get_SerialNum+0x44>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008c64:	4b0e      	ldr	r3, [pc, #56]	; (8008ca0 <Get_SerialNum+0x48>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008c6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <Get_SerialNum+0x4c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4413      	add	r3, r2
 8008c76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d009      	beq.n	8008c92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008c7e:	2208      	movs	r2, #8
 8008c80:	4909      	ldr	r1, [pc, #36]	; (8008ca8 <Get_SerialNum+0x50>)
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 f814 	bl	8008cb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008c88:	2204      	movs	r2, #4
 8008c8a:	4908      	ldr	r1, [pc, #32]	; (8008cac <Get_SerialNum+0x54>)
 8008c8c:	68b8      	ldr	r0, [r7, #8]
 8008c8e:	f000 f80f 	bl	8008cb0 <IntToUnicode>
  }
}
 8008c92:	bf00      	nop
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	1ff1e800 	.word	0x1ff1e800
 8008ca0:	1ff1e804 	.word	0x1ff1e804
 8008ca4:	1ff1e808 	.word	0x1ff1e808
 8008ca8:	2000016a 	.word	0x2000016a
 8008cac:	2000017a 	.word	0x2000017a

08008cb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	75fb      	strb	r3, [r7, #23]
 8008cc6:	e027      	b.n	8008d18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	0f1b      	lsrs	r3, r3, #28
 8008ccc:	2b09      	cmp	r3, #9
 8008cce:	d80b      	bhi.n	8008ce8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	0f1b      	lsrs	r3, r3, #28
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	4619      	mov	r1, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	440b      	add	r3, r1
 8008ce0:	3230      	adds	r2, #48	; 0x30
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	e00a      	b.n	8008cfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	0f1b      	lsrs	r3, r3, #28
 8008cec:	b2da      	uxtb	r2, r3
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	440b      	add	r3, r1
 8008cf8:	3237      	adds	r2, #55	; 0x37
 8008cfa:	b2d2      	uxtb	r2, r2
 8008cfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d04:	7dfb      	ldrb	r3, [r7, #23]
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	3301      	adds	r3, #1
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	3301      	adds	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]
 8008d18:	7dfa      	ldrb	r2, [r7, #23]
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d3d3      	bcc.n	8008cc8 <IntToUnicode+0x18>
  }
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
	...

08008d30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b0b8      	sub	sp, #224	; 0xe0
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	605a      	str	r2, [r3, #4]
 8008d42:	609a      	str	r2, [r3, #8]
 8008d44:	60da      	str	r2, [r3, #12]
 8008d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008d48:	f107 0310 	add.w	r3, r7, #16
 8008d4c:	22bc      	movs	r2, #188	; 0xbc
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f000 fb57 	bl	8009404 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a33      	ldr	r2, [pc, #204]	; (8008e28 <HAL_PCD_MspInit+0xf8>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d15e      	bne.n	8008e1e <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008d60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008d66:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8008d6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008d6e:	f107 0310 	add.w	r3, r7, #16
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fa fd0e 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8008d7e:	f7f7 fe55 	bl	8000a2c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008d82:	f7f9 fd87 	bl	8002894 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d86:	4b29      	ldr	r3, [pc, #164]	; (8008e2c <HAL_PCD_MspInit+0xfc>)
 8008d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d8c:	4a27      	ldr	r2, [pc, #156]	; (8008e2c <HAL_PCD_MspInit+0xfc>)
 8008d8e:	f043 0301 	orr.w	r3, r3, #1
 8008d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008d96:	4b25      	ldr	r3, [pc, #148]	; (8008e2c <HAL_PCD_MspInit+0xfc>)
 8008d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8008da4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008da8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dac:	2302      	movs	r3, #2
 8008dae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008db8:	2300      	movs	r3, #0
 8008dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4819      	ldr	r0, [pc, #100]	; (8008e30 <HAL_PCD_MspInit+0x100>)
 8008dcc:	f7f8 f984 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008de4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008de8:	4619      	mov	r1, r3
 8008dea:	4811      	ldr	r0, [pc, #68]	; (8008e30 <HAL_PCD_MspInit+0x100>)
 8008dec:	f7f8 f974 	bl	80010d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008df0:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <HAL_PCD_MspInit+0xfc>)
 8008df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008df6:	4a0d      	ldr	r2, [pc, #52]	; (8008e2c <HAL_PCD_MspInit+0xfc>)
 8008df8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008dfc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008e00:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <HAL_PCD_MspInit+0xfc>)
 8008e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008e06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e0a:	60bb      	str	r3, [r7, #8]
 8008e0c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2100      	movs	r1, #0
 8008e12:	2065      	movs	r0, #101	; 0x65
 8008e14:	f7f8 f92b 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e18:	2065      	movs	r0, #101	; 0x65
 8008e1a:	f7f8 f942 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e1e:	bf00      	nop
 8008e20:	37e0      	adds	r7, #224	; 0xe0
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	40080000 	.word	0x40080000
 8008e2c:	58024400 	.word	0x58024400
 8008e30:	58020000 	.word	0x58020000

08008e34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f7fe fca0 	bl	8007790 <USBD_LL_SetupStage>
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	440b      	add	r3, r1
 8008e78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	4619      	mov	r1, r3
 8008e82:	f7fe fcda 	bl	800783a <USBD_LL_DataOutStage>
}
 8008e86:	bf00      	nop
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	460b      	mov	r3, r1
 8008e98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ea0:	78fa      	ldrb	r2, [r7, #3]
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	1a9b      	subs	r3, r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	440b      	add	r3, r1
 8008eae:	3348      	adds	r3, #72	; 0x48
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f7fe fd23 	bl	8007900 <USBD_LL_DataInStage>
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7fe fe37 	bl	8007b44 <USBD_LL_SOF>
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	73fb      	strb	r3, [r7, #15]
 8008ef6:	e008      	b.n	8008f0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d102      	bne.n	8008f06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f00:	2301      	movs	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
 8008f04:	e001      	b.n	8008f0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f06:	f7f7 fd91 	bl	8000a2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f10:	7bfa      	ldrb	r2, [r7, #15]
 8008f12:	4611      	mov	r1, r2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fdd7 	bl	8007ac8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fe fd83 	bl	8007a2c <USBD_LL_Reset>
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fdd2 	bl	8007ae8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6812      	ldr	r2, [r2, #0]
 8008f52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f56:	f043 0301 	orr.w	r3, r3, #1
 8008f5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d005      	beq.n	8008f70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008f64:	4b04      	ldr	r3, [pc, #16]	; (8008f78 <HAL_PCD_SuspendCallback+0x48>)
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	4a03      	ldr	r2, [pc, #12]	; (8008f78 <HAL_PCD_SuspendCallback+0x48>)
 8008f6a:	f043 0306 	orr.w	r3, r3, #6
 8008f6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	e000ed00 	.word	0xe000ed00

08008f7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fe fdc2 	bl	8007b14 <USBD_LL_Resume>
}
 8008f90:	bf00      	nop
 8008f92:	3708      	adds	r7, #8
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	4611      	mov	r1, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fe fe10 	bl	8007bd4 <USBD_LL_IsoOUTIncomplete>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fdd8 	bl	8007b88 <USBD_LL_IsoINIncomplete>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fe16 	bl	8007c20 <USBD_LL_DevConnected>
}
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fe13 	bl	8007c36 <USBD_LL_DevDisconnected>
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d13e      	bne.n	80090a6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009028:	4a21      	ldr	r2, [pc, #132]	; (80090b0 <USBD_LL_Init+0x98>)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <USBD_LL_Init+0x98>)
 8009034:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009038:	4b1d      	ldr	r3, [pc, #116]	; (80090b0 <USBD_LL_Init+0x98>)
 800903a:	4a1e      	ldr	r2, [pc, #120]	; (80090b4 <USBD_LL_Init+0x9c>)
 800903c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800903e:	4b1c      	ldr	r3, [pc, #112]	; (80090b0 <USBD_LL_Init+0x98>)
 8009040:	2209      	movs	r2, #9
 8009042:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009044:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <USBD_LL_Init+0x98>)
 8009046:	2202      	movs	r2, #2
 8009048:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800904a:	4b19      	ldr	r3, [pc, #100]	; (80090b0 <USBD_LL_Init+0x98>)
 800904c:	2200      	movs	r2, #0
 800904e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009050:	4b17      	ldr	r3, [pc, #92]	; (80090b0 <USBD_LL_Init+0x98>)
 8009052:	2202      	movs	r2, #2
 8009054:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009056:	4b16      	ldr	r3, [pc, #88]	; (80090b0 <USBD_LL_Init+0x98>)
 8009058:	2200      	movs	r2, #0
 800905a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800905c:	4b14      	ldr	r3, [pc, #80]	; (80090b0 <USBD_LL_Init+0x98>)
 800905e:	2200      	movs	r2, #0
 8009060:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009062:	4b13      	ldr	r3, [pc, #76]	; (80090b0 <USBD_LL_Init+0x98>)
 8009064:	2200      	movs	r2, #0
 8009066:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8009068:	4b11      	ldr	r3, [pc, #68]	; (80090b0 <USBD_LL_Init+0x98>)
 800906a:	2201      	movs	r2, #1
 800906c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800906e:	4b10      	ldr	r3, [pc, #64]	; (80090b0 <USBD_LL_Init+0x98>)
 8009070:	2201      	movs	r2, #1
 8009072:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <USBD_LL_Init+0x98>)
 8009076:	2200      	movs	r2, #0
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800907a:	480d      	ldr	r0, [pc, #52]	; (80090b0 <USBD_LL_Init+0x98>)
 800907c:	f7f8 f9f5 	bl	800146a <HAL_PCD_Init>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009086:	f7f7 fcd1 	bl	8000a2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800908a:	2180      	movs	r1, #128	; 0x80
 800908c:	4808      	ldr	r0, [pc, #32]	; (80090b0 <USBD_LL_Init+0x98>)
 800908e:	f7f9 fb86 	bl	800279e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009092:	2240      	movs	r2, #64	; 0x40
 8009094:	2100      	movs	r1, #0
 8009096:	4806      	ldr	r0, [pc, #24]	; (80090b0 <USBD_LL_Init+0x98>)
 8009098:	f7f9 fb3a 	bl	8002710 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800909c:	2280      	movs	r2, #128	; 0x80
 800909e:	2101      	movs	r1, #1
 80090a0:	4803      	ldr	r0, [pc, #12]	; (80090b0 <USBD_LL_Init+0x98>)
 80090a2:	f7f9 fb35 	bl	8002710 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20001950 	.word	0x20001950
 80090b4:	40080000 	.word	0x40080000

080090b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7f8 faef 	bl	80016b2 <HAL_PCD_Start>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f942 	bl	8009364 <USBD_Get_USB_Status>
 80090e0:	4603      	mov	r3, r0
 80090e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	4608      	mov	r0, r1
 80090f8:	4611      	mov	r1, r2
 80090fa:	461a      	mov	r2, r3
 80090fc:	4603      	mov	r3, r0
 80090fe:	70fb      	strb	r3, [r7, #3]
 8009100:	460b      	mov	r3, r1
 8009102:	70bb      	strb	r3, [r7, #2]
 8009104:	4613      	mov	r3, r2
 8009106:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009116:	78bb      	ldrb	r3, [r7, #2]
 8009118:	883a      	ldrh	r2, [r7, #0]
 800911a:	78f9      	ldrb	r1, [r7, #3]
 800911c:	f7f8 ff00 	bl	8001f20 <HAL_PCD_EP_Open>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f91c 	bl	8009364 <USBD_Get_USB_Status>
 800912c:	4603      	mov	r3, r0
 800912e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009130:	7bbb      	ldrb	r3, [r7, #14]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009154:	78fa      	ldrb	r2, [r7, #3]
 8009156:	4611      	mov	r1, r2
 8009158:	4618      	mov	r0, r3
 800915a:	f7f8 ff49 	bl	8001ff0 <HAL_PCD_EP_Close>
 800915e:	4603      	mov	r3, r0
 8009160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009162:	7bfb      	ldrb	r3, [r7, #15]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f8fd 	bl	8009364 <USBD_Get_USB_Status>
 800916a:	4603      	mov	r3, r0
 800916c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800916e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009192:	78fa      	ldrb	r2, [r7, #3]
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7f9 f821 	bl	80021de <HAL_PCD_EP_SetStall>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f8de 	bl	8009364 <USBD_Get_USB_Status>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	4611      	mov	r1, r2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7f9 f866 	bl	80022a6 <HAL_PCD_EP_ClrStall>
 80091da:	4603      	mov	r3, r0
 80091dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 f8bf 	bl	8009364 <USBD_Get_USB_Status>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009206:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800920c:	2b00      	cmp	r3, #0
 800920e:	da0b      	bge.n	8009228 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009216:	68f9      	ldr	r1, [r7, #12]
 8009218:	4613      	mov	r3, r2
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	440b      	add	r3, r1
 8009222:	333e      	adds	r3, #62	; 0x3e
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	e00b      	b.n	8009240 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922e:	68f9      	ldr	r1, [r7, #12]
 8009230:	4613      	mov	r3, r2
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	440b      	add	r3, r1
 800923a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800923e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009266:	78fa      	ldrb	r2, [r7, #3]
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f7f8 fe33 	bl	8001ed6 <HAL_PCD_SetAddress>
 8009270:	4603      	mov	r3, r0
 8009272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 f874 	bl	8009364 <USBD_Get_USB_Status>
 800927c:	4603      	mov	r3, r0
 800927e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009280:	7bbb      	ldrb	r3, [r7, #14]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af00      	add	r7, sp, #0
 8009290:	60f8      	str	r0, [r7, #12]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
 8009296:	460b      	mov	r3, r1
 8009298:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800929a:	2300      	movs	r3, #0
 800929c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092a8:	7af9      	ldrb	r1, [r7, #11]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	f7f8 ff4c 	bl	800214a <HAL_PCD_EP_Transmit>
 80092b2:	4603      	mov	r3, r0
 80092b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 f853 	bl	8009364 <USBD_Get_USB_Status>
 80092be:	4603      	mov	r3, r0
 80092c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80092c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	607a      	str	r2, [r7, #4]
 80092d6:	603b      	str	r3, [r7, #0]
 80092d8:	460b      	mov	r3, r1
 80092da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092ea:	7af9      	ldrb	r1, [r7, #11]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	f7f8 fec8 	bl	8002084 <HAL_PCD_EP_Receive>
 80092f4:	4603      	mov	r3, r0
 80092f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f832 	bl	8009364 <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009304:	7dbb      	ldrb	r3, [r7, #22]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3718      	adds	r7, #24
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009320:	78fa      	ldrb	r2, [r7, #3]
 8009322:	4611      	mov	r1, r2
 8009324:	4618      	mov	r0, r3
 8009326:	f7f8 fef8 	bl	800211a <HAL_PCD_EP_GetRxCount>
 800932a:	4603      	mov	r3, r0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3708      	adds	r7, #8
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800933c:	4b03      	ldr	r3, [pc, #12]	; (800934c <USBD_static_malloc+0x18>)
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	200001a4 	.word	0x200001a4

08009350 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009372:	79fb      	ldrb	r3, [r7, #7]
 8009374:	2b03      	cmp	r3, #3
 8009376:	d817      	bhi.n	80093a8 <USBD_Get_USB_Status+0x44>
 8009378:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <USBD_Get_USB_Status+0x1c>)
 800937a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937e:	bf00      	nop
 8009380:	08009391 	.word	0x08009391
 8009384:	08009397 	.word	0x08009397
 8009388:	0800939d 	.word	0x0800939d
 800938c:	080093a3 	.word	0x080093a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
    break;
 8009394:	e00b      	b.n	80093ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009396:	2303      	movs	r3, #3
 8009398:	73fb      	strb	r3, [r7, #15]
    break;
 800939a:	e008      	b.n	80093ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800939c:	2301      	movs	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
    break;
 80093a0:	e005      	b.n	80093ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80093a2:	2303      	movs	r3, #3
 80093a4:	73fb      	strb	r3, [r7, #15]
    break;
 80093a6:	e002      	b.n	80093ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80093a8:	2303      	movs	r3, #3
 80093aa:	73fb      	strb	r3, [r7, #15]
    break;
 80093ac:	bf00      	nop
  }
  return usb_status;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <__libc_init_array>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	4d0d      	ldr	r5, [pc, #52]	; (80093f4 <__libc_init_array+0x38>)
 80093c0:	4c0d      	ldr	r4, [pc, #52]	; (80093f8 <__libc_init_array+0x3c>)
 80093c2:	1b64      	subs	r4, r4, r5
 80093c4:	10a4      	asrs	r4, r4, #2
 80093c6:	2600      	movs	r6, #0
 80093c8:	42a6      	cmp	r6, r4
 80093ca:	d109      	bne.n	80093e0 <__libc_init_array+0x24>
 80093cc:	4d0b      	ldr	r5, [pc, #44]	; (80093fc <__libc_init_array+0x40>)
 80093ce:	4c0c      	ldr	r4, [pc, #48]	; (8009400 <__libc_init_array+0x44>)
 80093d0:	f000 f820 	bl	8009414 <_init>
 80093d4:	1b64      	subs	r4, r4, r5
 80093d6:	10a4      	asrs	r4, r4, #2
 80093d8:	2600      	movs	r6, #0
 80093da:	42a6      	cmp	r6, r4
 80093dc:	d105      	bne.n	80093ea <__libc_init_array+0x2e>
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e4:	4798      	blx	r3
 80093e6:	3601      	adds	r6, #1
 80093e8:	e7ee      	b.n	80093c8 <__libc_init_array+0xc>
 80093ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ee:	4798      	blx	r3
 80093f0:	3601      	adds	r6, #1
 80093f2:	e7f2      	b.n	80093da <__libc_init_array+0x1e>
 80093f4:	08009484 	.word	0x08009484
 80093f8:	08009484 	.word	0x08009484
 80093fc:	08009484 	.word	0x08009484
 8009400:	08009488 	.word	0x08009488

08009404 <memset>:
 8009404:	4402      	add	r2, r0
 8009406:	4603      	mov	r3, r0
 8009408:	4293      	cmp	r3, r2
 800940a:	d100      	bne.n	800940e <memset+0xa>
 800940c:	4770      	bx	lr
 800940e:	f803 1b01 	strb.w	r1, [r3], #1
 8009412:	e7f9      	b.n	8009408 <memset+0x4>

08009414 <_init>:
 8009414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009416:	bf00      	nop
 8009418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800941a:	bc08      	pop	{r3}
 800941c:	469e      	mov	lr, r3
 800941e:	4770      	bx	lr

08009420 <_fini>:
 8009420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009422:	bf00      	nop
 8009424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009426:	bc08      	pop	{r3}
 8009428:	469e      	mov	lr, r3
 800942a:	4770      	bx	lr
