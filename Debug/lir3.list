
lir3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ec  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009584  08009584  00019584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080095e0  080095e0  000195e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000000  080095e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001bd4  20000184  08009768  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d58  08009768  00021d58  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   000296d2  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000046d8  00000000  00000000  00049884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013f0  00000000  00000000  0004df60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001268  00000000  00000000  0004f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039684  00000000  00000000  000505b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019ada  00000000  00000000  00089c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d6ea  00000000  00000000  000a3716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00200e00  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000052b4  00000000  00000000  00200e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000184 	.word	0x20000184
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800956c 	.word	0x0800956c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000188 	.word	0x20000188
 80002d4:	0800956c 	.word	0x0800956c

080002d8 <lirPulse>:
#include "lirh743zi.h"

void lirPulse(TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIO_Data, uint16_t GPIO_Data_Pin, GPIO_TypeDef* GPIO_Clck, uint16_t GPIO_Clck_Pin){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	4613      	mov	r3, r2
 80002e6:	80fb      	strh	r3, [r7, #6]
	if (PULSE_COUNT<MAX_PULSE_COUNT){
 80002e8:	4b4b      	ldr	r3, [pc, #300]	; (8000418 <lirPulse+0x140>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b4b      	ldr	r3, [pc, #300]	; (800041c <lirPulse+0x144>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d233      	bcs.n	800035e <lirPulse+0x86>
//		генерация клоков
		 GPIO_Clck->ODR ^= (0x1UL << (GPIO_Clck_Pin)); // PG2(CLCK)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	8b3b      	ldrh	r3, [r7, #24]
 80002fc:	2101      	movs	r1, #1
 80002fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000302:	405a      	eors	r2, r3
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	615a      	str	r2, [r3, #20]
		 PULSE_COUNT++;
 8000308:	4b43      	ldr	r3, [pc, #268]	; (8000418 <lirPulse+0x140>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	3301      	adds	r3, #1
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4b41      	ldr	r3, [pc, #260]	; (8000418 <lirPulse+0x140>)
 8000314:	701a      	strb	r2, [r3, #0]
//		 чтение бита в data по каждому нечетному клоку,пропуская первый
		 if ((PULSE_COUNT&0x1UL)&(PULSE_COUNT>2UL)){
 8000316:	4b40      	ldr	r3, [pc, #256]	; (8000418 <lirPulse+0x140>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b3d      	ldr	r3, [pc, #244]	; (8000418 <lirPulse+0x140>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b02      	cmp	r3, #2
 800032a:	bf8c      	ite	hi
 800032c:	2301      	movhi	r3, #1
 800032e:	2300      	movls	r3, #0
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4013      	ands	r3, r2
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d06a      	beq.n	8000410 <lirPulse+0x138>
		 		  data<<=0x1UL;
 800033a:	4b39      	ldr	r3, [pc, #228]	; (8000420 <lirPulse+0x148>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4a37      	ldr	r2, [pc, #220]	; (8000420 <lirPulse+0x148>)
 8000342:	6013      	str	r3, [r2, #0]
		 		  data |= (GPIO_Data->IDR >> GPIO_Data_Pin)&0x01; //read bit pG3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	691a      	ldr	r2, [r3, #16]
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	fa22 f303 	lsr.w	r3, r2, r3
 800034e:	f003 0201 	and.w	r2, r3, #1
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <lirPulse+0x148>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4313      	orrs	r3, r2
 8000358:	4a31      	ldr	r2, [pc, #196]	; (8000420 <lirPulse+0x148>)
 800035a:	6013      	str	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)tosend, 12);
//				обнуление
				data = 0;
				PULSE_COUNT = 0;
			}
}
 800035c:	e058      	b.n	8000410 <lirPulse+0x138>
				htim->Instance->CR1 &= ~(TIM_CR1_CEN);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f022 0201 	bic.w	r2, r2, #1
 800036c:	601a      	str	r2, [r3, #0]
				htim->Instance->CNT = 0;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
				tbuf = DWT->CYCCNT;
 8000376:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <lirPulse+0x14c>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4a2b      	ldr	r2, [pc, #172]	; (8000428 <lirPulse+0x150>)
 800037c:	6013      	str	r3, [r2, #0]
				DWT->CYCCNT = 0UL;
 800037e:	4b29      	ldr	r3, [pc, #164]	; (8000424 <lirPulse+0x14c>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
				tosend[0]= data&0x3FFFUL;
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <lirPulse+0x148>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800038c:	4a27      	ldr	r2, [pc, #156]	; (800042c <lirPulse+0x154>)
 800038e:	6013      	str	r3, [r2, #0]
				tosend[0]<<=16;
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <lirPulse+0x154>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	041b      	lsls	r3, r3, #16
 8000396:	4a25      	ldr	r2, [pc, #148]	; (800042c <lirPulse+0x154>)
 8000398:	6013      	str	r3, [r2, #0]
				tosend[0]|= ++count;
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <lirPulse+0x158>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	3301      	adds	r3, #1
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b22      	ldr	r3, [pc, #136]	; (8000430 <lirPulse+0x158>)
 80003a6:	4611      	mov	r1, r2
 80003a8:	8019      	strh	r1, [r3, #0]
 80003aa:	4b20      	ldr	r3, [pc, #128]	; (800042c <lirPulse+0x154>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4313      	orrs	r3, r2
 80003b0:	4a1e      	ldr	r2, [pc, #120]	; (800042c <lirPulse+0x154>)
 80003b2:	6013      	str	r3, [r2, #0]
				timestamp += DWTtoUS(tbuf);
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <lirPulse+0x150>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	ee07 3a90 	vmov	s15, r3
 80003bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000434 <lirPulse+0x15c>
 80003c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <lirPulse+0x160>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	ee07 3a90 	vmov	s15, r3
 80003d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <lirPulse+0x164>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	ee07 3a90 	vmov	s15, r3
 80003e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003ec:	ee17 2a90 	vmov	r2, s15
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <lirPulse+0x164>)
 80003f2:	601a      	str	r2, [r3, #0]
				tosend[1]= timestamp; //переменной этой хватит на час с чем-то, если хранить микросекунды
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <lirPulse+0x164>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <lirPulse+0x154>)
 80003fa:	6053      	str	r3, [r2, #4]
				CDC_Transmit_FS((uint8_t*)tosend, 12);
 80003fc:	210c      	movs	r1, #12
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <lirPulse+0x154>)
 8000400:	f008 fbfa 	bl	8008bf8 <CDC_Transmit_FS>
				data = 0;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <lirPulse+0x148>)
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
				PULSE_COUNT = 0;
 800040a:	4b03      	ldr	r3, [pc, #12]	; (8000418 <lirPulse+0x140>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200003e0 	.word	0x200003e0
 800041c:	200003da 	.word	0x200003da
 8000420:	200003d4 	.word	0x200003d4
 8000424:	e0001000 	.word	0xe0001000
 8000428:	200003dc 	.word	0x200003dc
 800042c:	200003c8 	.word	0x200003c8
 8000430:	200003d8 	.word	0x200003d8
 8000434:	49742400 	.word	0x49742400
 8000438:	20000000 	.word	0x20000000
 800043c:	200003c4 	.word	0x200003c4

08000440 <lirCycle>:

void lirCycle(TIM_HandleTypeDef *htim, uint32_t IRQN){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
	htim->Instance->CR1 |= TIM_CR1_CEN;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f042 0201 	orr.w	r2, r2, #1
 8000458:	601a      	str	r2, [r3, #0]
	htim->Instance->DIER|= IRQN;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68d9      	ldr	r1, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	430a      	orrs	r2, r1
 8000468:	60da      	str	r2, [r3, #12]
	if (timestamp>0xFFFF0000) timestamp = 0; //чтобы избежать переполнения таймера
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <lirCycle+0x48>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000472:	d902      	bls.n	800047a <lirCycle+0x3a>
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <lirCycle+0x48>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	200003c4 	.word	0x200003c4

0800048c <lirInit>:

void lirInit(){
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	PULSE_COUNT = 0;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <lirInit+0x38>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
	MAX_PULSE_COUNT = (BITNESS + 1) * 2;
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <lirInit+0x3c>)
 8000498:	221e      	movs	r2, #30
 800049a:	701a      	strb	r2, [r3, #0]
	data = 0;
 800049c:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <lirInit+0x40>)
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
	tbuf = 0;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <lirInit+0x44>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
	timestamp = 0;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <lirInit+0x48>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
	count = 0;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <lirInit+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	801a      	strh	r2, [r3, #0]
//	стоп слово для определения конца посылки
	tosend[2]=0xFAFBFCFD;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <lirInit+0x50>)
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <lirInit+0x54>)
 80004b8:	609a      	str	r2, [r3, #8]
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	200003e0 	.word	0x200003e0
 80004c8:	200003da 	.word	0x200003da
 80004cc:	200003d4 	.word	0x200003d4
 80004d0:	200003dc 	.word	0x200003dc
 80004d4:	200003c4 	.word	0x200003c4
 80004d8:	200003d8 	.word	0x200003d8
 80004dc:	200003c8 	.word	0x200003c8
 80004e0:	fafbfcfd 	.word	0xfafbfcfd

080004e4 <DWTinit>:

void DWTinit(){
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <DWTinit+0x2c>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <DWTinit+0x2c>)
 80004ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004f2:	60d3      	str	r3, [r2, #12]
//	DWT->LAR = 0xC5ACCE55; //софтверный анлок??
	DWT->CYCCNT = 0U;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <DWTinit+0x30>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <DWTinit+0x30>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <DWTinit+0x30>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	e000edf0 	.word	0xe000edf0
 8000514:	e0001000 	.word	0xe0001000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fc4c 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f81e 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f964 	bl	80007f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000528:	f000 f89e 	bl	8000668 <MX_TIM1_Init>
  MX_TIM2_Init();
 800052c:	f000 f8ee 	bl	800070c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000530:	f008 faa2 	bl	8008a78 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DWTinit();
 8000534:	f7ff ffd6 	bl	80004e4 <DWTinit>
  lirInit();
 8000538:	f7ff ffa8 	bl	800048c <lirInit>

//  TIM1->CCER|=TIM_CCER_CC1E; //map to pins (pin PE9)
//  TIM1->BDTR|=TIM_BDTR_MOE; //main output enable


  TIM2->CR1|= TIM_CR1_CEN;
 800053c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6013      	str	r3, [r2, #0]
  TIM2->DIER|= TIM2_IRQn;
 800054c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000556:	f043 031c 	orr.w	r3, r3, #28
 800055a:	60d3      	str	r3, [r2, #12]
//  TIM1->DIER|= TIM1_CC_IRQn;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x44>
	...

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09c      	sub	sp, #112	; 0x70
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	224c      	movs	r2, #76	; 0x4c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f008 fff4 	bl	800955c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2220      	movs	r2, #32
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 ffee 	bl	800955c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000580:	2002      	movs	r0, #2
 8000582:	f002 f98f 	bl	80028a4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b35      	ldr	r3, [pc, #212]	; (8000660 <SystemClock_Config+0x100>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a34      	ldr	r2, [pc, #208]	; (8000660 <SystemClock_Config+0x100>)
 8000590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000594:	6193      	str	r3, [r2, #24]
 8000596:	4b32      	ldr	r3, [pc, #200]	; (8000660 <SystemClock_Config+0x100>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <SystemClock_Config+0x104>)
 80005a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a4:	4a2f      	ldr	r2, [pc, #188]	; (8000664 <SystemClock_Config+0x104>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <SystemClock_Config+0x104>)
 80005ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b8:	bf00      	nop
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <SystemClock_Config+0x100>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c6:	d1f8      	bne.n	80005ba <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005c8:	2322      	movs	r3, #34	; 0x22
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d8:	2302      	movs	r3, #2
 80005da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005e0:	230c      	movs	r3, #12
 80005e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005e4:	23b4      	movs	r3, #180	; 0xb4
 80005e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005f4:	2308      	movs	r3, #8
 80005f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000604:	4618      	mov	r0, r3
 8000606:	f002 f997 	bl	8002938 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000610:	f000 fa50 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	233f      	movs	r3, #63	; 0x3f
 8000616:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2303      	movs	r3, #3
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000620:	2308      	movs	r3, #8
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800062c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000630:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fd8c 	bl	8003158 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000646:	f000 fa35 	bl	8000ab4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800064a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800064e:	2100      	movs	r1, #0
 8000650:	2001      	movs	r0, #1
 8000652:	f002 ff37 	bl	80034c4 <HAL_RCC_MCOConfig>
}
 8000656:	bf00      	nop
 8000658:	3770      	adds	r7, #112	; 0x70
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	58024800 	.word	0x58024800
 8000664:	58000400 	.word	0x58000400

08000668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <MX_TIM1_Init+0x9c>)
 8000688:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <MX_TIM1_Init+0xa0>)
 800068a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23;
 800068c:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_TIM1_Init+0x9c>)
 800068e:	2217      	movs	r2, #23
 8000690:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_TIM1_Init+0x9c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_TIM1_Init+0x9c>)
 800069a:	2218      	movs	r2, #24
 800069c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006b2:	f004 f9bf 	bl	8004a34 <HAL_TIM_Base_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006bc:	f000 f9fa 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006ce:	f004 fbff 	bl	8004ed0 <HAL_TIM_ConfigClockSource>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006d8:	f000 f9ec 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_TIM1_Init+0x9c>)
 80006ee:	f005 f91b 	bl	8005928 <HAL_TIMEx_MasterConfigSynchronization>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006f8:	f000 f9dc 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	200003e4 	.word	0x200003e4
 8000708:	40010000 	.word	0x40010000

0800070c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	463b      	mov	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */


  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000744:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8000746:	4b29      	ldr	r3, [pc, #164]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000748:	22ef      	movs	r2, #239	; 0xef
 800074a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_TIM2_Init+0xe0>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 8000752:	4b26      	ldr	r3, [pc, #152]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000754:	2295      	movs	r2, #149	; 0x95
 8000756:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_TIM2_Init+0xe0>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000764:	4821      	ldr	r0, [pc, #132]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000766:	f004 f965 	bl	8004a34 <HAL_TIM_Base_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000770:	f000 f9a0 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800077a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077e:	4619      	mov	r1, r3
 8000780:	481a      	ldr	r0, [pc, #104]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000782:	f004 fba5 	bl	8004ed0 <HAL_TIM_ConfigClockSource>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800078c:	f000 f992 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000790:	4816      	ldr	r0, [pc, #88]	; (80007ec <MX_TIM2_Init+0xe0>)
 8000792:	f004 f9a6 	bl	8004ae2 <HAL_TIM_OC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800079c:	f000 f98a 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	480f      	ldr	r0, [pc, #60]	; (80007ec <MX_TIM2_Init+0xe0>)
 80007b0:	f005 f8ba 	bl	8005928 <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007ba:	f000 f97b 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_TIM2_Init+0xe0>)
 80007d6:	f004 fb05 	bl	8004de4 <HAL_TIM_OC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007e0:	f000 f968 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3738      	adds	r7, #56	; 0x38
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000430 	.word	0x20000430

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4ba3      	ldr	r3, [pc, #652]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	4aa1      	ldr	r2, [pc, #644]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000816:	4b9f      	ldr	r3, [pc, #636]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000824:	4b9b      	ldr	r3, [pc, #620]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082a:	4a9a      	ldr	r2, [pc, #616]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000834:	4b97      	ldr	r3, [pc, #604]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b94      	ldr	r3, [pc, #592]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	4a92      	ldr	r2, [pc, #584]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000852:	4b90      	ldr	r3, [pc, #576]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000860:	4b8c      	ldr	r3, [pc, #560]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	4a8b      	ldr	r2, [pc, #556]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000870:	4b88      	ldr	r3, [pc, #544]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b85      	ldr	r3, [pc, #532]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	4a83      	ldr	r2, [pc, #524]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088e:	4b81      	ldr	r3, [pc, #516]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	f003 0308 	and.w	r3, r3, #8
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089c:	4b7d      	ldr	r3, [pc, #500]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	4a7c      	ldr	r2, [pc, #496]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b79      	ldr	r3, [pc, #484]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ba:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	4a74      	ldr	r2, [pc, #464]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b72      	ldr	r3, [pc, #456]	; (8000a94 <MX_GPIO_Init+0x2a4>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f244 0101 	movw	r1, #16385	; 0x4001
 80008de:	486e      	ldr	r0, [pc, #440]	; (8000a98 <MX_GPIO_Init+0x2a8>)
 80008e0:	f000 fdec 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ea:	486c      	ldr	r0, [pc, #432]	; (8000a9c <MX_GPIO_Init+0x2ac>)
 80008ec:	f000 fde6 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLCK_GPIO_Port, CLCK_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2104      	movs	r1, #4
 80008f4:	486a      	ldr	r0, [pc, #424]	; (8000aa0 <MX_GPIO_Init+0x2b0>)
 80008f6:	f000 fde1 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2102      	movs	r1, #2
 80008fe:	4869      	ldr	r0, [pc, #420]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000900:	f000 fddc 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4863      	ldr	r0, [pc, #396]	; (8000aa8 <MX_GPIO_Init+0x2b8>)
 800091a:	f000 fc1f 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800091e:	2332      	movs	r3, #50	; 0x32
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800092e:	230b      	movs	r3, #11
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	485b      	ldr	r0, [pc, #364]	; (8000aa8 <MX_GPIO_Init+0x2b8>)
 800093a:	f000 fc0f 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800093e:	2386      	movs	r3, #134	; 0x86
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800094e:	230b      	movs	r3, #11
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4854      	ldr	r0, [pc, #336]	; (8000aac <MX_GPIO_Init+0x2bc>)
 800095a:	f000 fbff 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800095e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4848      	ldr	r0, [pc, #288]	; (8000a98 <MX_GPIO_Init+0x2a8>)
 8000978:	f000 fbf0 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098e:	230b      	movs	r3, #11
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	483f      	ldr	r0, [pc, #252]	; (8000a98 <MX_GPIO_Init+0x2a8>)
 800099a:	f000 fbdf 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800099e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009b0:	2307      	movs	r3, #7
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4838      	ldr	r0, [pc, #224]	; (8000a9c <MX_GPIO_Init+0x2ac>)
 80009bc:	f000 fbce 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4830      	ldr	r0, [pc, #192]	; (8000a9c <MX_GPIO_Init+0x2ac>)
 80009da:	f000 fbbf 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLCK_Pin */
  GPIO_InitStruct.Pin = CLCK_Pin;
 80009de:	2304      	movs	r3, #4
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CLCK_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	482a      	ldr	r0, [pc, #168]	; (8000aa0 <MX_GPIO_Init+0x2b0>)
 80009f6:	f000 fbb1 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_Pin */
  GPIO_InitStruct.Pin = DATA_Pin;
 80009fa:	2308      	movs	r3, #8
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4824      	ldr	r0, [pc, #144]	; (8000aa0 <MX_GPIO_Init+0x2b0>)
 8000a0e:	f000 fba5 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x2c0>)
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <MX_GPIO_Init+0x2b0>)
 8000a26:	f000 fb99 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <MX_GPIO_Init+0x2b8>)
 8000a48:	f000 fb88 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5e:	230b      	movs	r3, #11
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_GPIO_Init+0x2b0>)
 8000a6a:	f000 fb77 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_GPIO_Init+0x2b4>)
 8000a86:	f000 fb69 	bl	800115c <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3730      	adds	r7, #48	; 0x30
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	58024400 	.word	0x58024400
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58020c00 	.word	0x58020c00
 8000aa0:	58021800 	.word	0x58021800
 8000aa4:	58021000 	.word	0x58021000
 8000aa8:	58020800 	.word	0x58020800
 8000aac:	58020000 	.word	0x58020000
 8000ab0:	11110000 	.word	0x11110000

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <HAL_MspInit+0x30>)
 8000ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000acc:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x30>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x30>)
 8000ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	58024400 	.word	0x58024400

08000af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <HAL_TIM_Base_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d117      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <HAL_TIM_Base_MspInit+0x88>)
 8000b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	; (8000b7c <HAL_TIM_Base_MspInit+0x88>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_TIM_Base_MspInit+0x88>)
 8000b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2019      	movs	r0, #25
 8000b2a:	f000 fae2 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b2e:	2019      	movs	r0, #25
 8000b30:	f000 faf9 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b34:	e01b      	b.n	8000b6e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b3e:	d116      	bne.n	8000b6e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_TIM_Base_MspInit+0x88>)
 8000b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b46:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_TIM_Base_MspInit+0x88>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <HAL_TIM_Base_MspInit+0x88>)
 8000b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	201c      	movs	r0, #28
 8000b64:	f000 fac5 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b68:	201c      	movs	r0, #28
 8000b6a:	f000 fadc 	bl	8001126 <HAL_NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	58024400 	.word	0x58024400

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f966 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	TIM1->SR &= ~TIM_SR_UIF; //flag reset
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <TIM1_UP_IRQHandler+0x28>)
 8000bdc:	691b      	ldr	r3, [r3, #16]
 8000bde:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <TIM1_UP_IRQHandler+0x28>)
 8000be0:	f023 0301 	bic.w	r3, r3, #1
 8000be4:	6113      	str	r3, [r2, #16]
	lirPulse(&htim1, DATA_GPIO_Port, 3, CLCK_GPIO_Port, 2);
 8000be6:	2302      	movs	r3, #2
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <TIM1_UP_IRQHandler+0x2c>)
 8000bec:	2203      	movs	r2, #3
 8000bee:	4904      	ldr	r1, [pc, #16]	; (8000c00 <TIM1_UP_IRQHandler+0x2c>)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <TIM1_UP_IRQHandler+0x30>)
 8000bf2:	f7ff fb71 	bl	80002d8 <lirPulse>
  /* USER CODE END TIM1_UP_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40010000 	.word	0x40010000
 8000c00:	58021800 	.word	0x58021800
 8000c04:	200003e4 	.word	0x200003e4

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	TIM2->SR &= ~TIM_SR_UIF; //flag reset
 8000c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c16:	f023 0301 	bic.w	r3, r3, #1
 8000c1a:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <TIM2_IRQHandler+0x28>)
 8000c1e:	f003 ffc1 	bl	8004ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  TIM1->CCER|=TIM_CCER_CC1E; //map to pins (pin PE9)
//  TIM1->BDTR|=TIM_BDTR_MOE; //main output enable
  lirCycle(&htim1, TIM1_UP_TIM10_IRQn);
 8000c22:	2119      	movs	r1, #25
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <TIM2_IRQHandler+0x2c>)
 8000c26:	f7ff fc0b 	bl	8000440 <lirCycle>
//  TIM1->DIER|= TIM1_CC_IRQn;
  /* USER CODE END TIM2_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000430 	.word	0x20000430
 8000c34:	200003e4 	.word	0x200003e4

08000c38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <OTG_FS_IRQHandler+0x10>)
 8000c3e:	f000 fdad 	bl	800179c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20001950 	.word	0x20001950

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c50:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <SystemInit+0xec>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a38      	ldr	r2, [pc, #224]	; (8000d38 <SystemInit+0xec>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c60:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <SystemInit+0xf0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 030f 	and.w	r3, r3, #15
 8000c68:	2b06      	cmp	r3, #6
 8000c6a:	d807      	bhi.n	8000c7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c6c:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <SystemInit+0xf0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f023 030f 	bic.w	r3, r3, #15
 8000c74:	4a31      	ldr	r2, [pc, #196]	; (8000d3c <SystemInit+0xf0>)
 8000c76:	f043 0307 	orr.w	r3, r3, #7
 8000c7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c7c:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <SystemInit+0xf4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <SystemInit+0xf4>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <SystemInit+0xf4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <SystemInit+0xf4>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	492b      	ldr	r1, [pc, #172]	; (8000d40 <SystemInit+0xf4>)
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <SystemInit+0xf8>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c9a:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <SystemInit+0xf0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <SystemInit+0xf0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 030f 	bic.w	r3, r3, #15
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <SystemInit+0xf0>)
 8000cb0:	f043 0307 	orr.w	r3, r3, #7
 8000cb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <SystemInit+0xf4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cbc:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <SystemInit+0xf4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <SystemInit+0xf4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <SystemInit+0xf4>)
 8000cca:	4a1f      	ldr	r2, [pc, #124]	; (8000d48 <SystemInit+0xfc>)
 8000ccc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <SystemInit+0xf4>)
 8000cd0:	4a1e      	ldr	r2, [pc, #120]	; (8000d4c <SystemInit+0x100>)
 8000cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <SystemInit+0xf4>)
 8000cd6:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <SystemInit+0x104>)
 8000cd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <SystemInit+0xf4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <SystemInit+0xf4>)
 8000ce2:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <SystemInit+0x104>)
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <SystemInit+0xf4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <SystemInit+0xf4>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <SystemInit+0x104>)
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <SystemInit+0xf4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <SystemInit+0xf4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <SystemInit+0xf4>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <SystemInit+0xf4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <SystemInit+0x108>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <SystemInit+0x10c>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d16:	d202      	bcs.n	8000d1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d18:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <SystemInit+0x110>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <SystemInit+0x114>)
 8000d20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d24:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d26:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <SystemInit+0xec>)
 8000d28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00
 8000d3c:	52002000 	.word	0x52002000
 8000d40:	58024400 	.word	0x58024400
 8000d44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d48:	02020200 	.word	0x02020200
 8000d4c:	01ff0000 	.word	0x01ff0000
 8000d50:	01010280 	.word	0x01010280
 8000d54:	5c001000 	.word	0x5c001000
 8000d58:	ffff0000 	.word	0xffff0000
 8000d5c:	51008108 	.word	0x51008108
 8000d60:	52004000 	.word	0x52004000

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d68:	f7ff ff70 	bl	8000c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f008 fbbf 	bl	8009514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fbbf 	bl	8000518 <main>
  bx  lr
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000da8:	080095e4 	.word	0x080095e4
  ldr r2, =_sbss
 8000dac:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000db0:	20001d58 	.word	0x20001d58

08000db4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC3_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f000 f98c 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dc4:	f002 fbe8 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_Init+0x68>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	f003 030f 	and.w	r3, r3, #15
 8000dd4:	4913      	ldr	r1, [pc, #76]	; (8000e24 <HAL_Init+0x6c>)
 8000dd6:	5ccb      	ldrb	r3, [r1, r3]
 8000dd8:	f003 031f 	and.w	r3, r3, #31
 8000ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8000de0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_Init+0x68>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_Init+0x6c>)
 8000dec:	5cd3      	ldrb	r3, [r2, r3]
 8000dee:	f003 031f 	and.w	r3, r3, #31
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	fa22 f303 	lsr.w	r3, r2, r3
 8000df8:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <HAL_Init+0x70>)
 8000dfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <HAL_Init+0x74>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f814 	bl	8000e30 <HAL_InitTick>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e002      	b.n	8000e18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e12:	f7ff fe55 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58024400 	.word	0x58024400
 8000e24:	080095cc 	.word	0x080095cc
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	20000000 	.word	0x20000000

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_InitTick+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e021      	b.n	8000e88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_InitTick+0x64>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_InitTick+0x60>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f971 	bl	8001142 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f93b 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x68>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000000c 	.word	0x2000000c
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	2000047c 	.word	0x2000047c

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000047c 	.word	0x2000047c

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff ffee 	bl	8000ec4 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffde 	bl	8000ec4 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetREVID+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	5c001000 	.word	0x5c001000

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	05fa0000 	.word	0x05fa0000

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff40 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff90 	bl	8001030 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff33 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa4 	bl	8001098 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <HAL_GPIO_Init+0x234>)
 800116c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800116e:	e194      	b.n	800149a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8186 	beq.w	8001494 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d00b      	beq.n	80011a8 <HAL_GPIO_Init+0x4c>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d007      	beq.n	80011a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800119c:	2b11      	cmp	r3, #17
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b12      	cmp	r3, #18
 80011a6:	d130      	bne.n	800120a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	2203      	movs	r2, #3
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011de:	2201      	movs	r2, #1
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	091b      	lsrs	r3, r3, #4
 80011f4:	f003 0201 	and.w	r2, r3, #1
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0xee>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b12      	cmp	r3, #18
 8001248:	d123      	bne.n	8001292 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	69b9      	ldr	r1, [r7, #24]
 800128e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0203 	and.w	r2, r3, #3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80e0 	beq.w	8001494 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d4:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_GPIO_Init+0x238>)
 80012d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012da:	4a2e      	ldr	r2, [pc, #184]	; (8001394 <HAL_GPIO_Init+0x238>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012e4:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_GPIO_Init+0x238>)
 80012e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f2:	4a29      	ldr	r2, [pc, #164]	; (8001398 <HAL_GPIO_Init+0x23c>)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	3302      	adds	r3, #2
 80012fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <HAL_GPIO_Init+0x240>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d052      	beq.n	80013c4 <HAL_GPIO_Init+0x268>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a1f      	ldr	r2, [pc, #124]	; (80013a0 <HAL_GPIO_Init+0x244>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d031      	beq.n	800138a <HAL_GPIO_Init+0x22e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_GPIO_Init+0x248>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d02b      	beq.n	8001386 <HAL_GPIO_Init+0x22a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_GPIO_Init+0x24c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d025      	beq.n	8001382 <HAL_GPIO_Init+0x226>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a1c      	ldr	r2, [pc, #112]	; (80013ac <HAL_GPIO_Init+0x250>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d01f      	beq.n	800137e <HAL_GPIO_Init+0x222>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <HAL_GPIO_Init+0x254>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x21e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x258>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x21a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_GPIO_Init+0x25c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x216>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_GPIO_Init+0x260>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x212>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_GPIO_Init+0x264>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x20e>
 8001366:	2309      	movs	r3, #9
 8001368:	e02d      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800136a:	230a      	movs	r3, #10
 800136c:	e02b      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800136e:	2308      	movs	r3, #8
 8001370:	e029      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 8001372:	2307      	movs	r3, #7
 8001374:	e027      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 8001376:	2306      	movs	r3, #6
 8001378:	e025      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800137a:	2305      	movs	r3, #5
 800137c:	e023      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800137e:	2304      	movs	r3, #4
 8001380:	e021      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 8001382:	2303      	movs	r3, #3
 8001384:	e01f      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 8001386:	2302      	movs	r3, #2
 8001388:	e01d      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800138a:	2301      	movs	r3, #1
 800138c:	e01b      	b.n	80013c6 <HAL_GPIO_Init+0x26a>
 800138e:	bf00      	nop
 8001390:	58000080 	.word	0x58000080
 8001394:	58024400 	.word	0x58024400
 8001398:	58000400 	.word	0x58000400
 800139c:	58020000 	.word	0x58020000
 80013a0:	58020400 	.word	0x58020400
 80013a4:	58020800 	.word	0x58020800
 80013a8:	58020c00 	.word	0x58020c00
 80013ac:	58021000 	.word	0x58021000
 80013b0:	58021400 	.word	0x58021400
 80013b4:	58021800 	.word	0x58021800
 80013b8:	58021c00 	.word	0x58021c00
 80013bc:	58022000 	.word	0x58022000
 80013c0:	58022400 	.word	0x58022400
 80013c4:	2300      	movs	r3, #0
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d6:	4938      	ldr	r1, [pc, #224]	; (80014b8 <HAL_GPIO_Init+0x35c>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800145e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800148c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	3301      	adds	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa22 f303 	lsr.w	r3, r2, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f47f ae63 	bne.w	8001170 <HAL_GPIO_Init+0x14>
  }
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3724      	adds	r7, #36	; 0x24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	58000400 	.word	0x58000400

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f0:	b08f      	sub	sp, #60	; 0x3c
 80014f2:	af0a      	add	r7, sp, #40	; 0x28
 80014f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e116      	b.n	800172e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f007 fcb4 	bl	8008e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fbb9 	bl	8005cb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	687e      	ldr	r6, [r7, #4]
 800154c:	466d      	mov	r5, sp
 800154e:	f106 0410 	add.w	r4, r6, #16
 8001552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800155a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800155e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001562:	1d33      	adds	r3, r6, #4
 8001564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001566:	6838      	ldr	r0, [r7, #0]
 8001568:	f004 fa84 	bl	8005a74 <USB_CoreInit>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2202      	movs	r2, #2
 8001576:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0d7      	b.n	800172e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f004 fba7 	bl	8005cd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e04a      	b.n	8001626 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	333d      	adds	r3, #61	; 0x3d
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	333c      	adds	r3, #60	; 0x3c
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	b298      	uxth	r0, r3
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	3342      	adds	r3, #66	; 0x42
 80015cc:	4602      	mov	r2, r0
 80015ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	333f      	adds	r3, #63	; 0x3f
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3344      	adds	r3, #68	; 0x44
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3348      	adds	r3, #72	; 0x48
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800160c:	7bfa      	ldrb	r2, [r7, #15]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3350      	adds	r3, #80	; 0x50
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3301      	adds	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3af      	bcc.n	8001590 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e044      	b.n	80016c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001636:	7bfa      	ldrb	r2, [r7, #15]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	1a9b      	subs	r3, r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	440b      	add	r3, r1
 8001644:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800168e:	7bfa      	ldrb	r2, [r7, #15]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	1a9b      	subs	r3, r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016a4:	7bfa      	ldrb	r2, [r7, #15]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	1a9b      	subs	r3, r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	3301      	adds	r3, #1
 80016be:	73fb      	strb	r3, [r7, #15]
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d3b5      	bcc.n	8001636 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	687e      	ldr	r6, [r7, #4]
 80016d2:	466d      	mov	r5, sp
 80016d4:	f106 0410 	add.w	r4, r6, #16
 80016d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80016e8:	1d33      	adds	r3, r6, #4
 80016ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ec:	6838      	ldr	r0, [r7, #0]
 80016ee:	f004 fb1d 	bl	8005d2c <USB_DevInit>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e014      	b.n	800172e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	2b01      	cmp	r3, #1
 800171a:	d102      	bne.n	8001722 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f001 f891 	bl	8002844 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fb9d 	bl	8006e66 <USB_DevDisconnect>

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001736 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_PCD_Start+0x1c>
 800174e:	2302      	movs	r3, #2
 8001750:	e020      	b.n	8001794 <HAL_PCD_Start+0x5e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	2b01      	cmp	r3, #1
 8001760:	d109      	bne.n	8001776 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001766:	2b01      	cmp	r3, #1
 8001768:	d005      	beq.n	8001776 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fa8a 	bl	8005c94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f005 fb4d 	bl	8006e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b08d      	sub	sp, #52	; 0x34
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f005 fc0b 	bl	8006fce <USB_GetMode>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f040 83ca 	bne.w	8001f54 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 fb6f 	bl	8006ea8 <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 83c0 	beq.w	8001f52 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f005 fb66 	bl	8006ea8 <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f002 0202 	and.w	r2, r2, #2
 80017f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f005 fb54 	bl	8006ea8 <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	2b10      	cmp	r3, #16
 8001808:	d161      	bne.n	80018ce <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699a      	ldr	r2, [r3, #24]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0210 	bic.w	r2, r2, #16
 8001818:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f003 020f 	and.w	r2, r3, #15
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	3304      	adds	r3, #4
 8001838:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	0c5b      	lsrs	r3, r3, #17
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	2b02      	cmp	r3, #2
 8001844:	d124      	bne.n	8001890 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d035      	beq.n	80018be <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800185c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001860:	b29b      	uxth	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	6a38      	ldr	r0, [r7, #32]
 8001866:	f005 f98b 	bl	8006b80 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001876:	441a      	add	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001888:	441a      	add	r2, r3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	619a      	str	r2, [r3, #24]
 800188e:	e016      	b.n	80018be <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	0c5b      	lsrs	r3, r3, #17
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	2b06      	cmp	r3, #6
 800189a:	d110      	bne.n	80018be <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80018a2:	2208      	movs	r2, #8
 80018a4:	4619      	mov	r1, r3
 80018a6:	6a38      	ldr	r0, [r7, #32]
 80018a8:	f005 f96a 	bl	8006b80 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018b8:	441a      	add	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0210 	orr.w	r2, r2, #16
 80018cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f005 fae8 	bl	8006ea8 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018e2:	d16e      	bne.n	80019c2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f005 faee 	bl	8006ece <USB_ReadDevAllOutEpInterrupt>
 80018f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80018f4:	e062      	b.n	80019bc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d057      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f005 fb13 	bl	8006f36 <USB_ReadDevOutEPInterrupt>
 8001910:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00c      	beq.n	8001936 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	015a      	lsls	r2, r3, #5
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	4413      	add	r3, r2
 8001924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001928:	461a      	mov	r2, r3
 800192a:	2301      	movs	r3, #1
 800192c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800192e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fddd 	bl	80024f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	015a      	lsls	r2, r3, #5
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	4413      	add	r3, r2
 8001948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800194c:	461a      	mov	r2, r3
 800194e:	2308      	movs	r3, #8
 8001950:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fed7 	bl	8002708 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001970:	461a      	mov	r2, r3
 8001972:	2310      	movs	r3, #16
 8001974:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800198c:	461a      	mov	r2, r3
 800198e:	2320      	movs	r3, #32
 8001990:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d009      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a8:	461a      	mov	r2, r3
 80019aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3301      	adds	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b8:	085b      	lsrs	r3, r3, #1
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d199      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f005 fa6e 	bl	8006ea8 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019d6:	f040 80c0 	bne.w	8001b5a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f005 fa8f 	bl	8006f02 <USB_ReadDevAllInEpInterrupt>
 80019e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80019ea:	e0b2      	b.n	8001b52 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80a7 	beq.w	8001b46 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f005 fab5 	bl	8006f72 <USB_ReadDevInEPInterrupt>
 8001a08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d057      	beq.n	8001ac4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69f9      	ldr	r1, [r7, #28]
 8001a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a34:	4013      	ands	r3, r2
 8001a36:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a44:	461a      	mov	r2, r3
 8001a46:	2301      	movs	r3, #1
 8001a48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d132      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3348      	adds	r3, #72	; 0x48
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4403      	add	r3, r0
 8001a72:	3344      	adds	r3, #68	; 0x44
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4419      	add	r1, r3
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	1a9b      	subs	r3, r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4403      	add	r3, r0
 8001a86:	3348      	adds	r3, #72	; 0x48
 8001a88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d113      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x31c>
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a94:	4613      	mov	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3350      	adds	r3, #80	; 0x50
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	f005 fabe 	bl	8007034 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	4619      	mov	r1, r3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f007 fa91 	bl	8008fe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d008      	beq.n	8001ae0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ada:	461a      	mov	r2, r3
 8001adc:	2308      	movs	r3, #8
 8001ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	015a      	lsls	r2, r3, #5
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	4413      	add	r3, r2
 8001af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001af6:	461a      	mov	r2, r3
 8001af8:	2310      	movs	r3, #16
 8001afa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b12:	461a      	mov	r2, r3
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	015a      	lsls	r2, r3, #5
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2302      	movs	r3, #2
 8001b32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fc48 	bl	80023d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	085b      	lsrs	r3, r3, #1
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f47f af49 	bne.w	80019ec <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f005 f9a2 	bl	8006ea8 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b6e:	d122      	bne.n	8001bb6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d108      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b96:	2100      	movs	r1, #0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fe77 	bl	800288c <HAL_PCDEx_LPM_Callback>
 8001b9e:	e002      	b.n	8001ba6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f007 fa97 	bl	80090d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695a      	ldr	r2, [r3, #20]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 f974 	bl	8006ea8 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bca:	d112      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f007 fa53 	bl	8009088 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f005 f956 	bl	8006ea8 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c06:	d121      	bne.n	8001c4c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001c16:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d111      	bne.n	8001c46 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	f003 020f 	and.w	r2, r3, #15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fe24 	bl	800288c <HAL_PCDEx_LPM_Callback>
 8001c44:	e002      	b.n	8001c4c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f007 fa1e 	bl	8009088 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 f929 	bl	8006ea8 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c60:	f040 80c7 	bne.w	8001df2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 f9b2 	bl	8005fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c88:	e056      	b.n	8001d38 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c96:	461a      	mov	r2, r3
 8001c98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	015a      	lsls	r2, r3, #5
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cae:	0151      	lsls	r1, r2, #5
 8001cb0:	69fa      	ldr	r2, [r7, #28]
 8001cb2:	440a      	add	r2, r1
 8001cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cbc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	015a      	lsls	r2, r3, #5
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cce:	0151      	lsls	r1, r2, #5
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	440a      	add	r2, r1
 8001cd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cea:	461a      	mov	r2, r3
 8001cec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cf0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d02:	0151      	lsls	r1, r2, #5
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	440a      	add	r2, r1
 8001d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d22:	0151      	lsls	r1, r2, #5
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	440a      	add	r2, r1
 8001d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d30:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	3301      	adds	r3, #1
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3a3      	bcc.n	8001c8a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d016      	beq.n	8001d8c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d6e:	f043 030b 	orr.w	r3, r3, #11
 8001d72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	69fa      	ldr	r2, [r7, #28]
 8001d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d84:	f043 030b 	orr.w	r3, r3, #11
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	e015      	b.n	8001db8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f242 032b 	movw	r3, #8235	; 0x202b
 8001da0:	4313      	orrs	r3, r2
 8001da2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db2:	f043 030b 	orr.w	r3, r3, #11
 8001db6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001dc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001dca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f005 f929 	bl	8007034 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f005 f856 	bl	8006ea8 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e06:	d124      	bne.n	8001e52 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f005 f8ed 	bl	8006fec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 f947 	bl	80060aa <USB_GetDevSpeed>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681c      	ldr	r4, [r3, #0]
 8001e28:	f001 fd30 	bl	800388c <HAL_RCC_GetHCLKFreq>
 8001e2c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	4620      	mov	r0, r4
 8001e38:	f003 fe8a 	bl	8005b50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f007 f8fa 	bl	8009036 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f005 f826 	bl	8006ea8 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d10a      	bne.n	8001e7c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f007 f8d7 	bl	800901a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f002 0208 	and.w	r2, r2, #8
 8001e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f005 f811 	bl	8006ea8 <USB_ReadInterrupts>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e90:	d10f      	bne.n	8001eb2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f007 f939 	bl	8009114 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 fff6 	bl	8006ea8 <USB_ReadInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ec6:	d10f      	bne.n	8001ee8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f007 f90c 	bl	80090f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 ffdb 	bl	8006ea8 <USB_ReadInterrupts>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d10a      	bne.n	8001f14 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f007 f91a 	bl	8009138 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f004 ffc5 	bl	8006ea8 <USB_ReadInterrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d115      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f007 f90a 	bl	8009154 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6859      	ldr	r1, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	e000      	b.n	8001f54 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001f52:	bf00      	nop
    }
  }
}
 8001f54:	3734      	adds	r7, #52	; 0x34
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}

08001f5a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_PCD_SetAddress+0x1a>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e013      	b.n	8001f9c <HAL_PCD_SetAddress+0x42>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 ff23 	bl	8006dd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	70fb      	strb	r3, [r7, #3]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	803b      	strh	r3, [r7, #0]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da0f      	bge.n	8001fea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
 8001fe8:	e00f      	b.n	800200a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 020f 	and.w	r2, r3, #15
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	3304      	adds	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002016:	883a      	ldrh	r2, [r7, #0]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	78ba      	ldrb	r2, [r7, #2]
 8002020:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d004      	beq.n	8002034 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002034:	78bb      	ldrb	r3, [r7, #2]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d102      	bne.n	8002040 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_PCD_EP_Open+0xaa>
 800204a:	2302      	movs	r3, #2
 800204c:	e00e      	b.n	800206c <HAL_PCD_EP_Open+0xc8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f004 f849 	bl	80060f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800206a:	7afb      	ldrb	r3, [r7, #11]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002084:	2b00      	cmp	r3, #0
 8002086:	da0f      	bge.n	80020a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	f003 020f 	and.w	r2, r3, #15
 800208e:	4613      	mov	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	3338      	adds	r3, #56	; 0x38
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	3304      	adds	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	705a      	strb	r2, [r3, #1]
 80020a6:	e00f      	b.n	80020c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	f003 020f 	and.w	r2, r3, #15
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	3304      	adds	r3, #4
 80020c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_PCD_EP_Close+0x6e>
 80020de:	2302      	movs	r3, #2
 80020e0:	e00e      	b.n	8002100 <HAL_PCD_EP_Close+0x8c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68f9      	ldr	r1, [r7, #12]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 f887 	bl	8006204 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	460b      	mov	r3, r1
 8002116:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	f003 020f 	and.w	r2, r3, #15
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4413      	add	r3, r2
 800212e:	3304      	adds	r3, #4
 8002130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2200      	movs	r2, #0
 8002148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	b2da      	uxtb	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	6979      	ldr	r1, [r7, #20]
 800217c:	f004 fb6a 	bl	8006854 <USB_EP0StartXfer>
 8002180:	e008      	b.n	8002194 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	6979      	ldr	r1, [r7, #20]
 8002190:	f004 f914 	bl	80063bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021c0:	681b      	ldr	r3, [r3, #0]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b086      	sub	sp, #24
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	607a      	str	r2, [r7, #4]
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	460b      	mov	r3, r1
 80021dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	3338      	adds	r3, #56	; 0x38
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2201      	movs	r2, #1
 800220c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	b2da      	uxtb	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d102      	bne.n	8002228 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002228:	7afb      	ldrb	r3, [r7, #11]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	f004 fb08 	bl	8006854 <USB_EP0StartXfer>
 8002244:	e008      	b.n	8002258 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	6979      	ldr	r1, [r7, #20]
 8002254:	f004 f8b2 	bl	80063bc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 020f 	and.w	r2, r3, #15
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d901      	bls.n	8002280 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e050      	b.n	8002322 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002280:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002284:	2b00      	cmp	r3, #0
 8002286:	da0f      	bge.n	80022a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 020f 	and.w	r2, r3, #15
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	3338      	adds	r3, #56	; 0x38
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	705a      	strb	r2, [r3, #1]
 80022a6:	e00d      	b.n	80022c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	3304      	adds	r3, #4
 80022bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_PCD_EP_SetStall+0x82>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e01e      	b.n	8002322 <HAL_PCD_EP_SetStall+0xc0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f004 fc9c 	bl	8006c30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	b2d9      	uxtb	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002312:	461a      	mov	r2, r3
 8002314:	f004 fe8e 	bl	8007034 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	f003 020f 	and.w	r2, r3, #15
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d901      	bls.n	8002348 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e042      	b.n	80023ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800234c:	2b00      	cmp	r3, #0
 800234e:	da0f      	bge.n	8002370 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 020f 	and.w	r2, r3, #15
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	3338      	adds	r3, #56	; 0x38
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	3304      	adds	r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	705a      	strb	r2, [r3, #1]
 800236e:	e00f      	b.n	8002390 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 020f 	and.w	r2, r3, #15
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	3304      	adds	r3, #4
 8002388:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_PCD_EP_ClrStall+0x86>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e00e      	b.n	80023ce <HAL_PCD_EP_ClrStall+0xa4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	4618      	mov	r0, r3
 80023c0:	f004 fca4 	bl	8006d0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b08a      	sub	sp, #40	; 0x28
 80023da:	af02      	add	r7, sp, #8
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	3338      	adds	r3, #56	; 0x38
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	3304      	adds	r3, #4
 80023fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699a      	ldr	r2, [r3, #24]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	429a      	cmp	r2, r3
 8002408:	d901      	bls.n	800240e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06c      	b.n	80024e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	d902      	bls.n	800242a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3303      	adds	r3, #3
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002432:	e02b      	b.n	800248c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	429a      	cmp	r2, r3
 8002448:	d902      	bls.n	8002450 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	3303      	adds	r3, #3
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68d9      	ldr	r1, [r3, #12]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	b2da      	uxtb	r2, r3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002468:	b2db      	uxtb	r3, r3
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4603      	mov	r3, r0
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	f004 fb48 	bl	8006b04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	441a      	add	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	441a      	add	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	b29b      	uxth	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d809      	bhi.n	80024b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d203      	bcs.n	80024b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1be      	bne.n	8002434 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d811      	bhi.n	80024e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	2201      	movs	r2, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	43db      	mvns	r3, r3
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024e2:	4013      	ands	r3, r2
 80024e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	333c      	adds	r3, #60	; 0x3c
 8002508:	3304      	adds	r3, #4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 80a0 	bne.w	8002668 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a72      	ldr	r2, [pc, #456]	; (8002700 <PCD_EP_OutXfrComplete_int+0x210>)
 8002536:	4293      	cmp	r3, r2
 8002538:	f240 80dd 	bls.w	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80d7 	beq.w	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002554:	461a      	mov	r2, r3
 8002556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800255a:	6093      	str	r3, [r2, #8]
 800255c:	e0cb      	b.n	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002574:	461a      	mov	r2, r3
 8002576:	2320      	movs	r3, #32
 8002578:	6093      	str	r3, [r2, #8]
 800257a:	e0bc      	b.n	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 80b7 	bne.w	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a5d      	ldr	r2, [pc, #372]	; (8002700 <PCD_EP_OutXfrComplete_int+0x210>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d90f      	bls.n	80025b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a6:	461a      	mov	r2, r3
 80025a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ac:	6093      	str	r3, [r2, #8]
 80025ae:	e0a2      	b.n	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	0159      	lsls	r1, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	440b      	add	r3, r1
 80025cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80025d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4403      	add	r3, r0
 80025e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025fe:	6819      	ldr	r1, [r3, #0]
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4403      	add	r3, r0
 800260e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4419      	add	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4403      	add	r3, r0
 8002624:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002628:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d114      	bne.n	800265a <PCD_EP_OutXfrComplete_int+0x16a>
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d108      	bne.n	800265a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002652:	461a      	mov	r2, r3
 8002654:	2101      	movs	r1, #1
 8002656:	f004 fced 	bl	8007034 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f006 fca5 	bl	8008fb0 <HAL_PCD_DataOutStageCallback>
 8002666:	e046      	b.n	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4a26      	ldr	r2, [pc, #152]	; (8002704 <PCD_EP_OutXfrComplete_int+0x214>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d124      	bne.n	80026ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002686:	461a      	mov	r2, r3
 8002688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268c:	6093      	str	r3, [r2, #8]
 800268e:	e032      	b.n	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a6:	461a      	mov	r2, r3
 80026a8:	2320      	movs	r3, #32
 80026aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	4619      	mov	r1, r3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f006 fc7c 	bl	8008fb0 <HAL_PCD_DataOutStageCallback>
 80026b8:	e01d      	b.n	80026f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d114      	bne.n	80026ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d108      	bne.n	80026ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026e2:	461a      	mov	r2, r3
 80026e4:	2100      	movs	r1, #0
 80026e6:	f004 fca5 	bl	8007034 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f006 fc5d 	bl	8008fb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	4f54300a 	.word	0x4f54300a
 8002704:	4f54310a 	.word	0x4f54310a

08002708 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	333c      	adds	r3, #60	; 0x3c
 8002720:	3304      	adds	r3, #4
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <PCD_EP_OutSetupPacket_int+0x88>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d90e      	bls.n	800275c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800275a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f006 fc15 	bl	8008f8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <PCD_EP_OutSetupPacket_int+0x88>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d90c      	bls.n	8002784 <PCD_EP_OutSetupPacket_int+0x7c>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d108      	bne.n	8002784 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800277c:	461a      	mov	r2, r3
 800277e:	2101      	movs	r1, #1
 8002780:	f004 fc58 	bl	8007034 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	4f54300a 	.word	0x4f54300a

08002794 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
 80027a0:	4613      	mov	r3, r2
 80027a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d107      	bne.n	80027c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027b2:	883b      	ldrh	r3, [r7, #0]
 80027b4:	0419      	lsls	r1, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	430a      	orrs	r2, r1
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
 80027c0:	e028      	b.n	8002814 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	4413      	add	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e00d      	b.n	80027f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	3340      	adds	r3, #64	; 0x40
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	4413      	add	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	3301      	adds	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3ec      	bcc.n	80027d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027fc:	883b      	ldrh	r3, [r7, #0]
 80027fe:	0418      	lsls	r0, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	3b01      	subs	r3, #1
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	4302      	orrs	r2, r0
 800280c:	3340      	adds	r3, #64	; 0x40
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_PCDEx_ActivateLPM+0x44>)
 8002874:	4313      	orrs	r3, r2
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	10000003 	.word	0x10000003

0800288c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d00a      	beq.n	80028ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e01f      	b.n	800290a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e01d      	b.n	800290a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 0207 	bic.w	r2, r3, #7
 80028d6:	490f      	ldr	r1, [pc, #60]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028de:	f7fe faf1 	bl	8000ec4 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028e4:	e009      	b.n	80028fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028e6:	f7fe faed 	bl	8000ec4 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f4:	d901      	bls.n	80028fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e007      	b.n	800290a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_PWREx_ConfigSupply+0x70>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002906:	d1ee      	bne.n	80028e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	58024800 	.word	0x58024800

08002918 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002926:	60d3      	str	r3, [r2, #12]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	58024800 	.word	0x58024800

08002938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e3ff      	b.n	800314a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8087 	beq.w	8002a66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002962:	4b97      	ldr	r3, [pc, #604]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296a:	2b10      	cmp	r3, #16
 800296c:	d007      	beq.n	800297e <HAL_RCC_OscConfig+0x46>
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	2b18      	cmp	r3, #24
 8002972:	d110      	bne.n	8002996 <HAL_RCC_OscConfig+0x5e>
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d10b      	bne.n	8002996 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	4b90      	ldr	r3, [pc, #576]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d06c      	beq.n	8002a64 <HAL_RCC_OscConfig+0x12c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d168      	bne.n	8002a64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e3d9      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x76>
 80029a0:	4b87      	ldr	r3, [pc, #540]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a86      	ldr	r2, [pc, #536]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x98>
 80029b6:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a81      	ldr	r2, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b7f      	ldr	r3, [pc, #508]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7e      	ldr	r2, [pc, #504]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xbc>
 80029da:	4b79      	ldr	r3, [pc, #484]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a78      	ldr	r2, [pc, #480]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b76      	ldr	r3, [pc, #472]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a75      	ldr	r2, [pc, #468]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xd4>
 80029f4:	4b72      	ldr	r3, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a71      	ldr	r2, [pc, #452]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fa56 	bl	8000ec4 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fa52 	bl	8000ec4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e38d      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a2e:	4b64      	ldr	r3, [pc, #400]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xe4>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fa42 	bl	8000ec4 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fa3e 	bl	8000ec4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e379      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a56:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x10c>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80ae 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a74:	4b52      	ldr	r3, [pc, #328]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a7e:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_RCC_OscConfig+0x162>
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2b18      	cmp	r3, #24
 8002a8e:	d13a      	bne.n	8002b06 <HAL_RCC_OscConfig+0x1ce>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d135      	bne.n	8002b06 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9a:	4b49      	ldr	r3, [pc, #292]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e34b      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	f7fe fa37 	bl	8000f24 <HAL_GetREVID>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d817      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x1b8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d108      	bne.n	8002ada <HAL_RCC_OscConfig+0x1a2>
 8002ac8:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ad0:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	e07a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	031b      	lsls	r3, r3, #12
 8002ae8:	4935      	ldr	r1, [pc, #212]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aee:	e06f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	4930      	ldr	r1, [pc, #192]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	e064      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d045      	beq.n	8002b9a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0219 	bic.w	r2, r3, #25
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4929      	ldr	r1, [pc, #164]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b20:	f7fe f9d0 	bl	8000ec4 <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b28:	f7fe f9cc 	bl	8000ec4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e307      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	f7fe f9ed 	bl	8000f24 <HAL_GetREVID>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d817      	bhi.n	8002b84 <HAL_RCC_OscConfig+0x24c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b40      	cmp	r3, #64	; 0x40
 8002b5a:	d108      	bne.n	8002b6e <HAL_RCC_OscConfig+0x236>
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b64:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6a:	6053      	str	r3, [r2, #4]
 8002b6c:	e030      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	031b      	lsls	r3, r3, #12
 8002b7c:	4910      	ldr	r1, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
 8002b82:	e025      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	490b      	ldr	r1, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	e01a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a08      	ldr	r2, [pc, #32]	; (8002bc0 <HAL_RCC_OscConfig+0x288>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe f98d 	bl	8000ec4 <HAL_GetTick>
 8002baa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe f989 	bl	8000ec4 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d903      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e2c4      	b.n	800314a <HAL_RCC_OscConfig+0x812>
 8002bc0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bc4:	4ba4      	ldr	r3, [pc, #656]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a9 	beq.w	8002d30 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bde:	4b9e      	ldr	r3, [pc, #632]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002be6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002be8:	4b9b      	ldr	r3, [pc, #620]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d007      	beq.n	8002c04 <HAL_RCC_OscConfig+0x2cc>
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	2b18      	cmp	r3, #24
 8002bf8:	d13a      	bne.n	8002c70 <HAL_RCC_OscConfig+0x338>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d135      	bne.n	8002c70 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c04:	4b94      	ldr	r3, [pc, #592]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2e4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	2b80      	cmp	r3, #128	; 0x80
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e296      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c1c:	f7fe f982 	bl	8000f24 <HAL_GetREVID>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d817      	bhi.n	8002c5a <HAL_RCC_OscConfig+0x322>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x30c>
 8002c32:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c3a:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c42:	e075      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c44:	4b84      	ldr	r3, [pc, #528]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	069b      	lsls	r3, r3, #26
 8002c52:	4981      	ldr	r1, [pc, #516]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c58:	e06a      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	497b      	ldr	r1, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c6e:	e05f      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d042      	beq.n	8002cfe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c78:	4b77      	ldr	r3, [pc, #476]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a76      	ldr	r2, [pc, #472]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe f91e 	bl	8000ec4 <HAL_GetTick>
 8002c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c8c:	f7fe f91a 	bl	8000ec4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e255      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c9e:	4b6e      	ldr	r3, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002caa:	f7fe f93b 	bl	8000f24 <HAL_GetREVID>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d817      	bhi.n	8002ce8 <HAL_RCC_OscConfig+0x3b0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d108      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x39a>
 8002cc0:	4b65      	ldr	r3, [pc, #404]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cc8:	4a63      	ldr	r2, [pc, #396]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cce:	6053      	str	r3, [r2, #4]
 8002cd0:	e02e      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	069b      	lsls	r3, r3, #26
 8002ce0:	495d      	ldr	r1, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
 8002ce6:	e023      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
 8002ce8:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	4958      	ldr	r1, [pc, #352]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
 8002cfc:	e018      	b.n	8002d30 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cfe:	4b56      	ldr	r3, [pc, #344]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a55      	ldr	r2, [pc, #340]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7fe f8db 	bl	8000ec4 <HAL_GetTick>
 8002d0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d12:	f7fe f8d7 	bl	8000ec4 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e212      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d24:	4b4c      	ldr	r3, [pc, #304]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d036      	beq.n	8002daa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d019      	beq.n	8002d78 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d44:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	4a43      	ldr	r2, [pc, #268]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d50:	f7fe f8b8 	bl	8000ec4 <HAL_GetTick>
 8002d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d58:	f7fe f8b4 	bl	8000ec4 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1ef      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x420>
 8002d76:	e018      	b.n	8002daa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7c:	4a36      	ldr	r2, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe f89e 	bl	8000ec4 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe f89a 	bl	8000ec4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1d5      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d036      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002dc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dca:	f7fe f87b 	bl	8000ec4 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dd2:	f7fe f877 	bl	8000ec4 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1b2      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002de4:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x49a>
 8002df0:	e018      	b.n	8002e24 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002df8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f861 	bl	8000ec4 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e06:	f7fe f85d 	bl	8000ec4 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e198      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <HAL_RCC_OscConfig+0x520>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f0      	bne.n	8002e06 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8085 	beq.w	8002f3c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_RCC_OscConfig+0x524>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x524>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3e:	f7fe f841 	bl	8000ec4 <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e44:	e00c      	b.n	8002e60 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e46:	f7fe f83d 	bl	8000ec4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b64      	cmp	r3, #100	; 0x64
 8002e52:	d905      	bls.n	8002e60 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e178      	b.n	800314a <HAL_RCC_OscConfig+0x812>
 8002e58:	58024400 	.word	0x58024400
 8002e5c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e60:	4b96      	ldr	r3, [pc, #600]	; (80030bc <HAL_RCC_OscConfig+0x784>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d0ec      	beq.n	8002e46 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_OscConfig+0x54a>
 8002e74:	4b92      	ldr	r3, [pc, #584]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	4a91      	ldr	r2, [pc, #580]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e80:	e02d      	b.n	8002ede <HAL_RCC_OscConfig+0x5a6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x56c>
 8002e8a:	4b8d      	ldr	r3, [pc, #564]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a8c      	ldr	r2, [pc, #560]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e90:	f023 0301 	bic.w	r3, r3, #1
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
 8002e96:	4b8a      	ldr	r3, [pc, #552]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	4a89      	ldr	r2, [pc, #548]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002e9c:	f023 0304 	bic.w	r3, r3, #4
 8002ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea2:	e01c      	b.n	8002ede <HAL_RCC_OscConfig+0x5a6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b05      	cmp	r3, #5
 8002eaa:	d10c      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x58e>
 8002eac:	4b84      	ldr	r3, [pc, #528]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a83      	ldr	r2, [pc, #524]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002eb2:	f043 0304 	orr.w	r3, r3, #4
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a80      	ldr	r2, [pc, #512]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	e00b      	b.n	8002ede <HAL_RCC_OscConfig+0x5a6>
 8002ec6:	4b7e      	ldr	r3, [pc, #504]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	4a7d      	ldr	r2, [pc, #500]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed2:	4b7b      	ldr	r3, [pc, #492]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a7a      	ldr	r2, [pc, #488]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d015      	beq.n	8002f12 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee6:	f7fd ffed 	bl	8000ec4 <HAL_GetTick>
 8002eea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fd ffe9 	bl	8000ec4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e122      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f04:	4b6e      	ldr	r3, [pc, #440]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCC_OscConfig+0x5b6>
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f12:	f7fd ffd7 	bl	8000ec4 <HAL_GetTick>
 8002f16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fd ffd3 	bl	8000ec4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e10c      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f30:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ee      	bne.n	8002f1a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 8101 	beq.w	8003148 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f46:	4b5e      	ldr	r3, [pc, #376]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	f000 80bc 	beq.w	80030cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	f040 8095 	bne.w	8003088 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fd ffab 	bl	8000ec4 <HAL_GetTick>
 8002f6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f72:	f7fd ffa7 	bl	8000ec4 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e0e2      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f84:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f0      	bne.n	8002f72 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f90:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f94:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <HAL_RCC_OscConfig+0x78c>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	4946      	ldr	r1, [pc, #280]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	628b      	str	r3, [r1, #40]	; 0x28
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	025b      	lsls	r3, r3, #9
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fda:	4939      	ldr	r1, [pc, #228]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fe0:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fec:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_RCC_OscConfig+0x790>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ff8:	00d2      	lsls	r2, r2, #3
 8002ffa:	4931      	ldr	r1, [pc, #196]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	f023 020c 	bic.w	r2, r3, #12
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	492c      	ldr	r1, [pc, #176]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800300e:	4313      	orrs	r3, r2
 8003010:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003012:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	f023 0202 	bic.w	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4928      	ldr	r1, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003020:	4313      	orrs	r3, r2
 8003022:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003024:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	4a25      	ldr	r2, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003042:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003046:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7fd ff30 	bl	8000ec4 <HAL_GetTick>
 8003064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fd ff2c 	bl	8000ec4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e067      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d0f0      	beq.n	8003068 <HAL_RCC_OscConfig+0x730>
 8003086:	e05f      	b.n	8003148 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003088:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fd ff16 	bl	8000ec4 <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309c:	f7fd ff12 	bl	8000ec4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e04d      	b.n	800314a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_RCC_OscConfig+0x788>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x764>
 80030ba:	e045      	b.n	8003148 <HAL_RCC_OscConfig+0x810>
 80030bc:	58024800 	.word	0x58024800
 80030c0:	58024400 	.word	0x58024400
 80030c4:	fffffc0c 	.word	0xfffffc0c
 80030c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_OscConfig+0x81c>)
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_OscConfig+0x81c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d031      	beq.n	8003144 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f003 0203 	and.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d12a      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d122      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d11a      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	0a5b      	lsrs	r3, r3, #9
 8003112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d111      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	0c1b      	lsrs	r3, r3, #16
 8003124:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0e1b      	lsrs	r3, r3, #24
 8003136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3730      	adds	r7, #48	; 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	58024400 	.word	0x58024400

08003158 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e19c      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b8a      	ldr	r3, [pc, #552]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d910      	bls.n	800319c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b87      	ldr	r3, [pc, #540]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 020f 	bic.w	r2, r3, #15
 8003182:	4985      	ldr	r1, [pc, #532]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d001      	beq.n	800319c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e184      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b7b      	ldr	r3, [pc, #492]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d908      	bls.n	80031ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b8:	4b78      	ldr	r3, [pc, #480]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4975      	ldr	r1, [pc, #468]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d908      	bls.n	80031f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e6:	4b6d      	ldr	r3, [pc, #436]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	496a      	ldr	r1, [pc, #424]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b64      	ldr	r3, [pc, #400]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003214:	4b61      	ldr	r3, [pc, #388]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	495e      	ldr	r1, [pc, #376]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003222:	4313      	orrs	r3, r2
 8003224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d908      	bls.n	8003254 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003242:	4b56      	ldr	r3, [pc, #344]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4953      	ldr	r1, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	4b4d      	ldr	r3, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	429a      	cmp	r2, r3
 800326e:	d908      	bls.n	8003282 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b4a      	ldr	r3, [pc, #296]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f023 020f 	bic.w	r2, r3, #15
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4947      	ldr	r1, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800327e:	4313      	orrs	r3, r2
 8003280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d055      	beq.n	800333a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800328e:	4b43      	ldr	r3, [pc, #268]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	4940      	ldr	r1, [pc, #256]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800329c:	4313      	orrs	r3, r2
 800329e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a8:	4b3c      	ldr	r3, [pc, #240]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d121      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0f6      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c0:	4b36      	ldr	r3, [pc, #216]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d115      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0ea      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032d8:	4b30      	ldr	r3, [pc, #192]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d109      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0de      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e8:	4b2c      	ldr	r3, [pc, #176]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0d6      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f023 0207 	bic.w	r2, r3, #7
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4925      	ldr	r1, [pc, #148]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003306:	4313      	orrs	r3, r2
 8003308:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fd fddb 	bl	8000ec4 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003310:	e00a      	b.n	8003328 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003312:	f7fd fdd7 	bl	8000ec4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0be      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003328:	4b1c      	ldr	r3, [pc, #112]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	429a      	cmp	r2, r3
 8003338:	d1eb      	bne.n	8003312 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	4b14      	ldr	r3, [pc, #80]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	429a      	cmp	r2, r3
 8003354:	d208      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f023 020f 	bic.w	r2, r3, #15
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x244>)
 8003364:	4313      	orrs	r3, r2
 8003366:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d214      	bcs.n	80033a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4906      	ldr	r1, [pc, #24]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_RCC_ClockConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e086      	b.n	80034a6 <HAL_RCC_ClockConfig+0x34e>
 8003398:	52002000 	.word	0x52002000
 800339c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d010      	beq.n	80033ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	4b3f      	ldr	r3, [pc, #252]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d208      	bcs.n	80033ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033bc:	4b3c      	ldr	r3, [pc, #240]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	4939      	ldr	r1, [pc, #228]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d010      	beq.n	80033fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d208      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033ea:	4b31      	ldr	r3, [pc, #196]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	492e      	ldr	r1, [pc, #184]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d010      	beq.n	800342a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	4b28      	ldr	r3, [pc, #160]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003414:	429a      	cmp	r2, r3
 8003416:	d208      	bcs.n	800342a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	4922      	ldr	r1, [pc, #136]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003426:	4313      	orrs	r3, r2
 8003428:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69da      	ldr	r2, [r3, #28]
 800343a:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003442:	429a      	cmp	r2, r3
 8003444:	d208      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003446:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4917      	ldr	r1, [pc, #92]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003454:	4313      	orrs	r3, r2
 8003456:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003458:	f000 f89e 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 800345c:	4602      	mov	r2, r0
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	0a1b      	lsrs	r3, r3, #8
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	4912      	ldr	r1, [pc, #72]	; (80034b4 <HAL_RCC_ClockConfig+0x35c>)
 800346a:	5ccb      	ldrb	r3, [r1, r3]
 800346c:	f003 031f 	and.w	r3, r3, #31
 8003470:	fa22 f303 	lsr.w	r3, r2, r3
 8003474:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <HAL_RCC_ClockConfig+0x358>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_RCC_ClockConfig+0x35c>)
 8003480:	5cd3      	ldrb	r3, [r2, r3]
 8003482:	f003 031f 	and.w	r3, r3, #31
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_RCC_ClockConfig+0x360>)
 800348e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_RCC_ClockConfig+0x364>)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_RCC_ClockConfig+0x368>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fcc8 	bl	8000e30 <HAL_InitTick>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	58024400 	.word	0x58024400
 80034b4:	080095cc 	.word	0x080095cc
 80034b8:	20000004 	.word	0x20000004
 80034bc:	20000000 	.word	0x20000000
 80034c0:	20000008 	.word	0x20000008

080034c4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d12a      	bne.n	800352c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 80034d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034dc:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e6:	4b29      	ldr	r3, [pc, #164]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 80034e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80034f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fe:	2303      	movs	r3, #3
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003506:	2300      	movs	r3, #0
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	4619      	mov	r1, r3
 8003510:	481f      	ldr	r0, [pc, #124]	; (8003590 <HAL_RCC_MCOConfig+0xcc>)
 8003512:	f7fd fe23 	bl	800115c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	430b      	orrs	r3, r1
 8003524:	4919      	ldr	r1, [pc, #100]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 8003526:	4313      	orrs	r3, r2
 8003528:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800352a:	e02a      	b.n	8003582 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 800352e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003532:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 8003534:	f043 0304 	orr.w	r3, r3, #4
 8003538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 800353e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003542:	f003 0304 	and.w	r3, r3, #4
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800354a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003550:	2302      	movs	r3, #2
 8003552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003554:	2303      	movs	r3, #3
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800355c:	2300      	movs	r3, #0
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003560:	f107 031c 	add.w	r3, r7, #28
 8003564:	4619      	mov	r1, r3
 8003566:	480b      	ldr	r0, [pc, #44]	; (8003594 <HAL_RCC_MCOConfig+0xd0>)
 8003568:	f7fd fdf8 	bl	800115c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800356c:	4b07      	ldr	r3, [pc, #28]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	01d9      	lsls	r1, r3, #7
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	430b      	orrs	r3, r1
 800357c:	4903      	ldr	r1, [pc, #12]	; (800358c <HAL_RCC_MCOConfig+0xc8>)
 800357e:	4313      	orrs	r3, r2
 8003580:	610b      	str	r3, [r1, #16]
}
 8003582:	bf00      	nop
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	58024400 	.word	0x58024400
 8003590:	58020000 	.word	0x58020000
 8003594:	58020800 	.word	0x58020800

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800359e:	4bb3      	ldr	r3, [pc, #716]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a6:	2b18      	cmp	r3, #24
 80035a8:	f200 8155 	bhi.w	8003856 <HAL_RCC_GetSysClockFreq+0x2be>
 80035ac:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b2:	bf00      	nop
 80035b4:	08003619 	.word	0x08003619
 80035b8:	08003857 	.word	0x08003857
 80035bc:	08003857 	.word	0x08003857
 80035c0:	08003857 	.word	0x08003857
 80035c4:	08003857 	.word	0x08003857
 80035c8:	08003857 	.word	0x08003857
 80035cc:	08003857 	.word	0x08003857
 80035d0:	08003857 	.word	0x08003857
 80035d4:	0800363f 	.word	0x0800363f
 80035d8:	08003857 	.word	0x08003857
 80035dc:	08003857 	.word	0x08003857
 80035e0:	08003857 	.word	0x08003857
 80035e4:	08003857 	.word	0x08003857
 80035e8:	08003857 	.word	0x08003857
 80035ec:	08003857 	.word	0x08003857
 80035f0:	08003857 	.word	0x08003857
 80035f4:	08003645 	.word	0x08003645
 80035f8:	08003857 	.word	0x08003857
 80035fc:	08003857 	.word	0x08003857
 8003600:	08003857 	.word	0x08003857
 8003604:	08003857 	.word	0x08003857
 8003608:	08003857 	.word	0x08003857
 800360c:	08003857 	.word	0x08003857
 8003610:	08003857 	.word	0x08003857
 8003614:	0800364b 	.word	0x0800364b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003618:	4b94      	ldr	r3, [pc, #592]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003624:	4b91      	ldr	r3, [pc, #580]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	08db      	lsrs	r3, r3, #3
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	4a90      	ldr	r2, [pc, #576]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
 8003634:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003636:	e111      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003638:	4b8d      	ldr	r3, [pc, #564]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800363a:	61bb      	str	r3, [r7, #24]
    break;
 800363c:	e10e      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800363e:	4b8d      	ldr	r3, [pc, #564]	; (8003874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003640:	61bb      	str	r3, [r7, #24]
    break;
 8003642:	e10b      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003644:	4b8c      	ldr	r3, [pc, #560]	; (8003878 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003646:	61bb      	str	r3, [r7, #24]
    break;
 8003648:	e108      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800364a:	4b88      	ldr	r3, [pc, #544]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003654:	4b85      	ldr	r3, [pc, #532]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003660:	4b82      	ldr	r3, [pc, #520]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800366a:	4b80      	ldr	r3, [pc, #512]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366e:	08db      	lsrs	r3, r3, #3
 8003670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80e1 	beq.w	8003850 <HAL_RCC_GetSysClockFreq+0x2b8>
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b02      	cmp	r3, #2
 8003692:	f000 8083 	beq.w	800379c <HAL_RCC_GetSysClockFreq+0x204>
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b02      	cmp	r3, #2
 800369a:	f200 80a1 	bhi.w	80037e0 <HAL_RCC_GetSysClockFreq+0x248>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x114>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d056      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036aa:	e099      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036ac:	4b6f      	ldr	r3, [pc, #444]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02d      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036b8:	4b6c      	ldr	r3, [pc, #432]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	08db      	lsrs	r3, r3, #3
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	4a6b      	ldr	r2, [pc, #428]	; (8003870 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e2:	4b62      	ldr	r3, [pc, #392]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800387c <HAL_RCC_GetSysClockFreq+0x2e4>
 80036fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003712:	e087      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003880 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003726:	4b51      	ldr	r3, [pc, #324]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003736:	ed97 6a02 	vldr	s12, [r7, #8]
 800373a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800387c <HAL_RCC_GetSysClockFreq+0x2e4>
 800373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003756:	e065      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003762:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003884 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376a:	4b40      	ldr	r3, [pc, #256]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	ed97 6a02 	vldr	s12, [r7, #8]
 800377e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800387c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800379a:	e043      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003888 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	4b2f      	ldr	r3, [pc, #188]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800387c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037de:	e021      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003884 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a02 	vldr	s12, [r7, #8]
 8003806:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800387c <HAL_RCC_GetSysClockFreq+0x2e4>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003822:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	0a5b      	lsrs	r3, r3, #9
 800382a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382e:	3301      	adds	r3, #1
 8003830:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800383c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003848:	ee17 3a90 	vmov	r3, s15
 800384c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800384e:	e005      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
    break;
 8003854:	e002      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003858:	61bb      	str	r3, [r7, #24]
    break;
 800385a:	bf00      	nop
  }

  return sysclockfreq;
 800385c:	69bb      	ldr	r3, [r7, #24]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	58024400 	.word	0x58024400
 8003870:	03d09000 	.word	0x03d09000
 8003874:	003d0900 	.word	0x003d0900
 8003878:	017d7840 	.word	0x017d7840
 800387c:	46000000 	.word	0x46000000
 8003880:	4c742400 	.word	0x4c742400
 8003884:	4a742400 	.word	0x4a742400
 8003888:	4bbebc20 	.word	0x4bbebc20

0800388c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003892:	f7ff fe81 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003896:	4602      	mov	r2, r0
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_RCC_GetHCLKFreq+0x50>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	490f      	ldr	r1, [pc, #60]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80038a4:	5ccb      	ldrb	r3, [r1, r3]
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	fa22 f303 	lsr.w	r3, r2, r3
 80038ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_RCC_GetHCLKFreq+0x50>)
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80038ba:	5cd3      	ldrb	r3, [r2, r3]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	fa22 f303 	lsr.w	r3, r2, r3
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80038c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038ca:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	58024400 	.word	0x58024400
 80038e0:	080095cc 	.word	0x080095cc
 80038e4:	20000004 	.word	0x20000004
 80038e8:	20000000 	.word	0x20000000

080038ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038f4:	2300      	movs	r3, #0
 80038f6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f8:	2300      	movs	r3, #0
 80038fa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03f      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800390c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003910:	d02a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003916:	d824      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800391c:	d018      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800391e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003922:	d81e      	bhi.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800392c:	d007      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800392e:	e018      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003930:	4bab      	ldr	r3, [pc, #684]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	4aaa      	ldr	r2, [pc, #680]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800393a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800393c:	e015      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3304      	adds	r3, #4
 8003942:	2102      	movs	r1, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f000 ff11 	bl	800476c <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800394e:	e00c      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3324      	adds	r3, #36	; 0x24
 8003954:	2102      	movs	r1, #2
 8003956:	4618      	mov	r0, r3
 8003958:	f000 ffba 	bl	80048d0 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003960:	e003      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
      break;
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003968:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003970:	4b9b      	ldr	r3, [pc, #620]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800397c:	4998      	ldr	r1, [pc, #608]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	650b      	str	r3, [r1, #80]	; 0x50
 8003982:	e001      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d03d      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	2b04      	cmp	r3, #4
 800399a:	d826      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039b9 	.word	0x080039b9
 80039a8:	080039c7 	.word	0x080039c7
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039f1 	.word	0x080039f1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b89      	ldr	r3, [pc, #548]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4a88      	ldr	r2, [pc, #544]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039c4:	e015      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fecd 	bl	800476c <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039d6:	e00c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 ff76 	bl	80048d0 <RCCEx_PLL3_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80039f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039f8:	4b79      	ldr	r3, [pc, #484]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	f023 0207 	bic.w	r2, r3, #7
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	4976      	ldr	r1, [pc, #472]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	650b      	str	r3, [r1, #80]	; 0x50
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d042      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a24:	d02b      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a2a:	d825      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a2c:	2bc0      	cmp	r3, #192	; 0xc0
 8003a2e:	d028      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a30:	2bc0      	cmp	r3, #192	; 0xc0
 8003a32:	d821      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d016      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d81d      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d007      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003a44:	e018      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a46:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	4a65      	ldr	r2, [pc, #404]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a52:	e017      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3304      	adds	r3, #4
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fe86 	bl	800476c <RCCEx_PLL2_Config>
 8003a60:	4603      	mov	r3, r0
 8003a62:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a64:	e00e      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3324      	adds	r3, #36	; 0x24
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 ff2f 	bl	80048d0 <RCCEx_PLL3_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a76:	e005      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7c:	e002      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e000      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a8a:	4b55      	ldr	r3, [pc, #340]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	4952      	ldr	r1, [pc, #328]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	650b      	str	r3, [r1, #80]	; 0x50
 8003a9c:	e001      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d049      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab8:	d030      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003abe:	d82a      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ac0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ac4:	d02c      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003ac6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003aca:	d824      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad0:	d018      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003ad2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad6:	d81e      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae0:	d007      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003ae2:	e018      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae4:	4b3e      	ldr	r3, [pc, #248]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	4a3d      	ldr	r2, [pc, #244]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003af0:	e017      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fe37 	bl	800476c <RCCEx_PLL2_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b02:	e00e      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fee0 	bl	80048d0 <RCCEx_PLL3_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1a:	e002      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b1c:	bf00      	nop
 8003b1e:	e000      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b36:	492a      	ldr	r1, [pc, #168]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003b3c:	e001      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
 8003b40:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d04c      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b58:	d030      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003b5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b5e:	d82a      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b64:	d02c      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003b66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b6a:	d824      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b70:	d018      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b76:	d81e      	bhi.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b80:	d007      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003b82:	e018      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b84:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b90:	e017      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fde7 	bl	800476c <RCCEx_PLL2_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ba2:	e00e      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3324      	adds	r3, #36	; 0x24
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fe90 	bl	80048d0 <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003bb4:	e005      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003bba:	e002      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10d      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bd6:	4902      	ldr	r1, [pc, #8]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	658b      	str	r3, [r1, #88]	; 0x58
 8003bdc:	e004      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003bde:	bf00      	nop
 8003be0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d032      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf8:	2b30      	cmp	r3, #48	; 0x30
 8003bfa:	d01c      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003bfc:	2b30      	cmp	r3, #48	; 0x30
 8003bfe:	d817      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003c00:	2b20      	cmp	r3, #32
 8003c02:	d00c      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d813      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d016      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d10f      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c10:	4baf      	ldr	r3, [pc, #700]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4aae      	ldr	r2, [pc, #696]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c1c:	e00e      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fda1 	bl	800476c <RCCEx_PLL2_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c2e:	e005      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
      break;
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c42:	4ba3      	ldr	r3, [pc, #652]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4e:	49a0      	ldr	r1, [pc, #640]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c54:	e001      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d047      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c6e:	d030      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003c70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c74:	d82a      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c7a:	d02c      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003c7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c80:	d824      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c86:	d018      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8c:	d81e      	bhi.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d007      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003c98:	e018      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9a:	4b8d      	ldr	r3, [pc, #564]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	4a8c      	ldr	r2, [pc, #560]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ca6:	e017      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fd5c 	bl	800476c <RCCEx_PLL2_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cb8:	e00e      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3324      	adds	r3, #36	; 0x24
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fe05 	bl	80048d0 <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cca:	e005      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd0:	e002      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cde:	4b7c      	ldr	r3, [pc, #496]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	4979      	ldr	r1, [pc, #484]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	650b      	str	r3, [r1, #80]	; 0x50
 8003cf0:	e001      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d049      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d0a:	d02e      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d10:	d828      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d16:	d02a      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d1c:	d822      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d22:	d026      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d28:	d81c      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d2e:	d010      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003d30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d34:	d816      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01d      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3e:	d111      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3304      	adds	r3, #4
 8003d44:	2101      	movs	r1, #1
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fd10 	bl	800476c <RCCEx_PLL2_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d50:	e012      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3324      	adds	r3, #36	; 0x24
 8003d56:	2101      	movs	r1, #1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fdb9 	bl	80048d0 <RCCEx_PLL3_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d62:	e009      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
      break;
 8003d68:	e006      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e004      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e002      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d7e:	4b54      	ldr	r3, [pc, #336]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8a:	4951      	ldr	r1, [pc, #324]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	650b      	str	r3, [r1, #80]	; 0x50
 8003d90:	e001      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d04b      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dac:	d02e      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db2:	d828      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d02a      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbe:	d822      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dc4:	d026      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dca:	d81c      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd0:	d010      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd6:	d816      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d01d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003de0:	d111      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fcbf 	bl	800476c <RCCEx_PLL2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003df2:	e012      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3324      	adds	r3, #36	; 0x24
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fd68 	bl	80048d0 <RCCEx_PLL3_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e04:	e009      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0a:	e006      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e0c:	bf00      	nop
 8003e0e:	e004      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e10:	bf00      	nop
 8003e12:	e002      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e20:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e2e:	4928      	ldr	r1, [pc, #160]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	658b      	str	r3, [r1, #88]	; 0x58
 8003e34:	e001      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
 8003e38:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d02f      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e4e:	d00e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e54:	d814      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d015      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e5e:	d10f      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	4a1a      	ldr	r2, [pc, #104]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e6c:	e00c      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3304      	adds	r3, #4
 8003e72:	2101      	movs	r1, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fc79 	bl	800476c <RCCEx_PLL2_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e7e:	e003      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	75fb      	strb	r3, [r7, #23]
      break;
 8003e84:	e000      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003e86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9a:	490d      	ldr	r1, [pc, #52]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	650b      	str	r3, [r1, #80]	; 0x50
 8003ea0:	e001      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d033      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d81c      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003eba:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003efb 	.word	0x08003efb
 8003ec4:	08003ed5 	.word	0x08003ed5
 8003ec8:	08003ee3 	.word	0x08003ee3
 8003ecc:	08003efb 	.word	0x08003efb
 8003ed0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed4:	4bb8      	ldr	r3, [pc, #736]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	4ab7      	ldr	r2, [pc, #732]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ee0:	e00c      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fc3f 	bl	800476c <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ef2:	e003      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f02:	4bad      	ldr	r3, [pc, #692]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	49aa      	ldr	r1, [pc, #680]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f14:	e001      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8086 	beq.w	8004034 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f28:	4ba4      	ldr	r3, [pc, #656]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4aa3      	ldr	r2, [pc, #652]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f34:	f7fc ffc6 	bl	8000ec4 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f3a:	e009      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3c:	f7fc ffc2 	bl	8000ec4 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	; 0x64
 8003f48:	d902      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	75fb      	strb	r3, [r7, #23]
        break;
 8003f4e:	e005      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f50:	4b9a      	ldr	r3, [pc, #616]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ef      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003f5c:	7dfb      	ldrb	r3, [r7, #23]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d166      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f62:	4b95      	ldr	r3, [pc, #596]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f6c:	4053      	eors	r3, r2
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d013      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f76:	4b90      	ldr	r3, [pc, #576]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f80:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f84:	4a8c      	ldr	r2, [pc, #560]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f8c:	4b8a      	ldr	r3, [pc, #552]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f90:	4a89      	ldr	r2, [pc, #548]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f96:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f98:	4a87      	ldr	r2, [pc, #540]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa8:	d115      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fc ff8b 	bl	8000ec4 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb0:	e00b      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fc ff87 	bl	8000ec4 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d902      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	75fb      	strb	r3, [r7, #23]
            break;
 8003fc8:	e005      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fca:	4b7b      	ldr	r3, [pc, #492]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ed      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d126      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fea:	d10d      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003fec:	4b72      	ldr	r3, [pc, #456]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ffa:	0919      	lsrs	r1, r3, #4
 8003ffc:	4b70      	ldr	r3, [pc, #448]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003ffe:	400b      	ands	r3, r1
 8004000:	496d      	ldr	r1, [pc, #436]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	610b      	str	r3, [r1, #16]
 8004006:	e005      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004008:	4b6b      	ldr	r3, [pc, #428]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	4a6a      	ldr	r2, [pc, #424]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800400e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004012:	6113      	str	r3, [r2, #16]
 8004014:	4b68      	ldr	r3, [pc, #416]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004016:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	4965      	ldr	r1, [pc, #404]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	670b      	str	r3, [r1, #112]	; 0x70
 8004028:	e004      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	75bb      	strb	r3, [r7, #22]
 800402e:	e001      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d07e      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004044:	2b28      	cmp	r3, #40	; 0x28
 8004046:	d867      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	0800411f 	.word	0x0800411f
 8004054:	08004119 	.word	0x08004119
 8004058:	08004119 	.word	0x08004119
 800405c:	08004119 	.word	0x08004119
 8004060:	08004119 	.word	0x08004119
 8004064:	08004119 	.word	0x08004119
 8004068:	08004119 	.word	0x08004119
 800406c:	08004119 	.word	0x08004119
 8004070:	080040f5 	.word	0x080040f5
 8004074:	08004119 	.word	0x08004119
 8004078:	08004119 	.word	0x08004119
 800407c:	08004119 	.word	0x08004119
 8004080:	08004119 	.word	0x08004119
 8004084:	08004119 	.word	0x08004119
 8004088:	08004119 	.word	0x08004119
 800408c:	08004119 	.word	0x08004119
 8004090:	08004107 	.word	0x08004107
 8004094:	08004119 	.word	0x08004119
 8004098:	08004119 	.word	0x08004119
 800409c:	08004119 	.word	0x08004119
 80040a0:	08004119 	.word	0x08004119
 80040a4:	08004119 	.word	0x08004119
 80040a8:	08004119 	.word	0x08004119
 80040ac:	08004119 	.word	0x08004119
 80040b0:	0800411f 	.word	0x0800411f
 80040b4:	08004119 	.word	0x08004119
 80040b8:	08004119 	.word	0x08004119
 80040bc:	08004119 	.word	0x08004119
 80040c0:	08004119 	.word	0x08004119
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004119 	.word	0x08004119
 80040cc:	08004119 	.word	0x08004119
 80040d0:	0800411f 	.word	0x0800411f
 80040d4:	08004119 	.word	0x08004119
 80040d8:	08004119 	.word	0x08004119
 80040dc:	08004119 	.word	0x08004119
 80040e0:	08004119 	.word	0x08004119
 80040e4:	08004119 	.word	0x08004119
 80040e8:	08004119 	.word	0x08004119
 80040ec:	08004119 	.word	0x08004119
 80040f0:	0800411f 	.word	0x0800411f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	2101      	movs	r1, #1
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fb36 	bl	800476c <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004104:	e00c      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3324      	adds	r3, #36	; 0x24
 800410a:	2101      	movs	r1, #1
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fbdf 	bl	80048d0 <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004116:	e003      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
      break;
 800411c:	e000      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800411e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004132:	4921      	ldr	r1, [pc, #132]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	654b      	str	r3, [r1, #84]	; 0x54
 8004138:	e001      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d03e      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414e:	2b05      	cmp	r3, #5
 8004150:	d820      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800419b 	.word	0x0800419b
 800415c:	08004171 	.word	0x08004171
 8004160:	08004183 	.word	0x08004183
 8004164:	0800419b 	.word	0x0800419b
 8004168:	0800419b 	.word	0x0800419b
 800416c:	0800419b 	.word	0x0800419b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2101      	movs	r1, #1
 8004176:	4618      	mov	r0, r3
 8004178:	f000 faf8 	bl	800476c <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004180:	e00c      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fba1 	bl	80048d0 <RCCEx_PLL3_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004192:	e003      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
      break;
 8004198:	e000      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800419a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d110      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a6:	f023 0207 	bic.w	r2, r3, #7
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	4902      	ldr	r1, [pc, #8]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	654b      	str	r3, [r1, #84]	; 0x54
 80041b4:	e008      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80041b6:	bf00      	nop
 80041b8:	58024400 	.word	0x58024400
 80041bc:	58024800 	.word	0x58024800
 80041c0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d039      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	2b05      	cmp	r3, #5
 80041dc:	d820      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80041de:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80041e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e4:	08004227 	.word	0x08004227
 80041e8:	080041fd 	.word	0x080041fd
 80041ec:	0800420f 	.word	0x0800420f
 80041f0:	08004227 	.word	0x08004227
 80041f4:	08004227 	.word	0x08004227
 80041f8:	08004227 	.word	0x08004227
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	2101      	movs	r1, #1
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fab2 	bl	800476c <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800420c:	e00c      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3324      	adds	r3, #36	; 0x24
 8004212:	2101      	movs	r1, #1
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fb5b 	bl	80048d0 <RCCEx_PLL3_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800421e:	e003      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
      break;
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800422e:	4bb7      	ldr	r3, [pc, #732]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f023 0207 	bic.w	r2, r3, #7
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423c:	49b3      	ldr	r1, [pc, #716]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800423e:	4313      	orrs	r3, r2
 8004240:	658b      	str	r3, [r1, #88]	; 0x58
 8004242:	e001      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	7dfb      	ldrb	r3, [r7, #23]
 8004246:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d04b      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800425a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800425e:	d02e      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004264:	d828      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426a:	d02a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004270:	d822      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004272:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004276:	d026      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004278:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800427c:	d81c      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800427e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004282:	d010      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004288:	d816      	bhi.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01d      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800428e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004292:	d111      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fa66 	bl	800476c <RCCEx_PLL2_Config>
 80042a0:	4603      	mov	r3, r0
 80042a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042a4:	e012      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3324      	adds	r3, #36	; 0x24
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fb0f 	bl	80048d0 <RCCEx_PLL3_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042b6:	e009      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
      break;
 80042bc:	e006      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042be:	bf00      	nop
 80042c0:	e004      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042c2:	bf00      	nop
 80042c4:	e002      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042d2:	4b8e      	ldr	r3, [pc, #568]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e0:	498a      	ldr	r1, [pc, #552]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	654b      	str	r3, [r1, #84]	; 0x54
 80042e6:	e001      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d04b      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004302:	d02e      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004304:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004308:	d828      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430e:	d02a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004314:	d822      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004316:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800431a:	d026      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800431c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004320:	d81c      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004326:	d010      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	d816      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01d      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004336:	d111      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	2100      	movs	r1, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fa14 	bl	800476c <RCCEx_PLL2_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004348:	e012      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3324      	adds	r3, #36	; 0x24
 800434e:	2102      	movs	r1, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fabd 	bl	80048d0 <RCCEx_PLL3_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800435a:	e009      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
      break;
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004362:	bf00      	nop
 8004364:	e004      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004366:	bf00      	nop
 8004368:	e002      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800436a:	bf00      	nop
 800436c:	e000      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800436e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004376:	4b65      	ldr	r3, [pc, #404]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004384:	4961      	ldr	r1, [pc, #388]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004386:	4313      	orrs	r3, r2
 8004388:	658b      	str	r3, [r1, #88]	; 0x58
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d04b      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043a6:	d02e      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80043a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043ac:	d828      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b2:	d02a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b8:	d822      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043be:	d026      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80043c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043c4:	d81c      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ca:	d010      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80043cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d0:	d816      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01d      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80043d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043da:	d111      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f9c2 	bl	800476c <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043ec:	e012      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3324      	adds	r3, #36	; 0x24
 80043f2:	2102      	movs	r1, #2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fa6b 	bl	80048d0 <RCCEx_PLL3_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043fe:	e009      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	75fb      	strb	r3, [r7, #23]
      break;
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800441a:	4b3c      	ldr	r3, [pc, #240]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004428:	4938      	ldr	r1, [pc, #224]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800442a:	4313      	orrs	r3, r2
 800442c:	658b      	str	r3, [r1, #88]	; 0x58
 800442e:	e001      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444a:	d10a      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3324      	adds	r3, #36	; 0x24
 8004450:	2102      	movs	r1, #2
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fa3c 	bl	80048d0 <RCCEx_PLL3_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004462:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004470:	4926      	ldr	r1, [pc, #152]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004472:	4313      	orrs	r3, r2
 8004474:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448c:	d10a      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	3324      	adds	r3, #36	; 0x24
 8004492:	2102      	movs	r1, #2
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fa1b 	bl	80048d0 <RCCEx_PLL3_Config>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044a4:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b2:	4916      	ldr	r1, [pc, #88]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d036      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ce:	d01f      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80044d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d4:	d817      	bhi.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80044da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044de:	d009      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80044e0:	e011      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3304      	adds	r3, #4
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 f93f 	bl	800476c <RCCEx_PLL2_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044f2:	e00e      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3324      	adds	r3, #36	; 0x24
 80044f8:	2102      	movs	r1, #2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f9e8 	bl	80048d0 <RCCEx_PLL3_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004504:	e005      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
      break;
 800450a:	e002      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800450c:	58024400 	.word	0x58024400
      break;
 8004510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10a      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004518:	4b93      	ldr	r3, [pc, #588]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004526:	4990      	ldr	r1, [pc, #576]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	658b      	str	r3, [r1, #88]	; 0x58
 800452c:	e001      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d033      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004544:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004548:	d01c      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800454a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800454e:	d816      	bhi.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004554:	d003      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004556:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800455a:	d007      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800455c:	e00f      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455e:	4b82      	ldr	r3, [pc, #520]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	4a81      	ldr	r2, [pc, #516]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004568:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800456a:	e00c      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3324      	adds	r3, #36	; 0x24
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f9ac 	bl	80048d0 <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800457c:	e003      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	75fb      	strb	r3, [r7, #23]
      break;
 8004582:	e000      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004586:	7dfb      	ldrb	r3, [r7, #23]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800458c:	4b76      	ldr	r3, [pc, #472]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800459a:	4973      	ldr	r1, [pc, #460]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800459c:	4313      	orrs	r3, r2
 800459e:	654b      	str	r3, [r1, #84]	; 0x54
 80045a0:	e001      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d029      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80045ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045be:	d007      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80045c0:	e00f      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c2:	4b69      	ldr	r3, [pc, #420]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	4a68      	ldr	r2, [pc, #416]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045ce:	e00b      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2102      	movs	r1, #2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f8c8 	bl	800476c <RCCEx_PLL2_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	75fb      	strb	r3, [r7, #23]
      break;
 80045e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d109      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045ee:	4b5e      	ldr	r3, [pc, #376]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	495b      	ldr	r1, [pc, #364]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004600:	e001      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3324      	adds	r3, #36	; 0x24
 8004616:	2102      	movs	r1, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f959 	bl	80048d0 <RCCEx_PLL3_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d030      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463c:	d017      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800463e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004642:	d811      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004648:	d013      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800464a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464e:	d80b      	bhi.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d010      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004658:	d106      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465a:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	4a42      	ldr	r2, [pc, #264]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004664:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004666:	e007      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	75fb      	strb	r3, [r7, #23]
      break;
 800466c:	e004      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004678:	7dfb      	ldrb	r3, [r7, #23]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d109      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800467e:	4b3a      	ldr	r3, [pc, #232]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004682:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468a:	4937      	ldr	r1, [pc, #220]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800468c:	4313      	orrs	r3, r2
 800468e:	654b      	str	r3, [r1, #84]	; 0x54
 8004690:	e001      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d008      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046a2:	4b31      	ldr	r3, [pc, #196]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	492e      	ldr	r1, [pc, #184]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046c0:	4b29      	ldr	r3, [pc, #164]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046ce:	4926      	ldr	r1, [pc, #152]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d008      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046e0:	4b21      	ldr	r3, [pc, #132]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ec:	491e      	ldr	r1, [pc, #120]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046fe:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004708:	6113      	str	r3, [r2, #16]
 800470a:	4b17      	ldr	r3, [pc, #92]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004714:	4914      	ldr	r1, [pc, #80]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	da08      	bge.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004722:	4b11      	ldr	r3, [pc, #68]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004726:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	490e      	ldr	r1, [pc, #56]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004740:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	4906      	ldr	r1, [pc, #24]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004750:	4313      	orrs	r3, r2
 8004752:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004754:	7dbb      	ldrb	r3, [r7, #22]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	58024400 	.word	0x58024400

0800476c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800477a:	4b53      	ldr	r3, [pc, #332]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b03      	cmp	r3, #3
 8004784:	d101      	bne.n	800478a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e099      	b.n	80048be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800478a:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a4e      	ldr	r2, [pc, #312]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004790:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004796:	f7fc fb95 	bl	8000ec4 <HAL_GetTick>
 800479a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800479c:	e008      	b.n	80047b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800479e:	f7fc fb91 	bl	8000ec4 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e086      	b.n	80048be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80047b0:	4b45      	ldr	r3, [pc, #276]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1f0      	bne.n	800479e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047bc:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	031b      	lsls	r3, r3, #12
 80047ca:	493f      	ldr	r1, [pc, #252]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	628b      	str	r3, [r1, #40]	; 0x28
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	3b01      	subs	r3, #1
 80047d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	3b01      	subs	r3, #1
 80047e0:	025b      	lsls	r3, r3, #9
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	061b      	lsls	r3, r3, #24
 80047fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004800:	4931      	ldr	r1, [pc, #196]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004802:	4313      	orrs	r3, r2
 8004804:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004806:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	492d      	ldr	r1, [pc, #180]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004814:	4313      	orrs	r3, r2
 8004816:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004818:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	f023 0220 	bic.w	r2, r3, #32
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4928      	ldr	r1, [pc, #160]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800482a:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004830:	f023 0310 	bic.w	r3, r3, #16
 8004834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004836:	4b24      	ldr	r3, [pc, #144]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <RCCEx_PLL2_Config+0x160>)
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	69d2      	ldr	r2, [r2, #28]
 8004842:	00d2      	lsls	r2, r2, #3
 8004844:	4920      	ldr	r1, [pc, #128]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800484a:	4b1f      	ldr	r3, [pc, #124]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	4a1e      	ldr	r2, [pc, #120]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004850:	f043 0310 	orr.w	r3, r3, #16
 8004854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800485c:	4b1a      	ldr	r3, [pc, #104]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a19      	ldr	r2, [pc, #100]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004862:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004868:	e00f      	b.n	800488a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d106      	bne.n	800487e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800487c:	e005      	b.n	800488a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004888:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 8004890:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004896:	f7fc fb15 	bl	8000ec4 <HAL_GetTick>
 800489a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800489c:	e008      	b.n	80048b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800489e:	f7fc fb11 	bl	8000ec4 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e006      	b.n	80048be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <RCCEx_PLL2_Config+0x15c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f0      	beq.n	800489e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
 80048cc:	ffff0007 	.word	0xffff0007

080048d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048de:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b03      	cmp	r3, #3
 80048e8:	d101      	bne.n	80048ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e099      	b.n	8004a22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048ee:	4b4f      	ldr	r3, [pc, #316]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a4e      	ldr	r2, [pc, #312]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80048f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fa:	f7fc fae3 	bl	8000ec4 <HAL_GetTick>
 80048fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004900:	e008      	b.n	8004914 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004902:	f7fc fadf 	bl	8000ec4 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e086      	b.n	8004a22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004914:	4b45      	ldr	r3, [pc, #276]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f0      	bne.n	8004902 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004920:	4b42      	ldr	r3, [pc, #264]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	051b      	lsls	r3, r3, #20
 800492e:	493f      	ldr	r1, [pc, #252]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	628b      	str	r3, [r1, #40]	; 0x28
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	3b01      	subs	r3, #1
 800493a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	3b01      	subs	r3, #1
 8004944:	025b      	lsls	r3, r3, #9
 8004946:	b29b      	uxth	r3, r3
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	3b01      	subs	r3, #1
 800495e:	061b      	lsls	r3, r3, #24
 8004960:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004964:	4931      	ldr	r1, [pc, #196]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800496a:	4b30      	ldr	r3, [pc, #192]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	492d      	ldr	r1, [pc, #180]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800497c:	4b2b      	ldr	r3, [pc, #172]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	4928      	ldr	r1, [pc, #160]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 800498a:	4313      	orrs	r3, r2
 800498c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800498e:	4b27      	ldr	r3, [pc, #156]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004992:	4a26      	ldr	r2, [pc, #152]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800499a:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 800499c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <RCCEx_PLL3_Config+0x160>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	69d2      	ldr	r2, [r2, #28]
 80049a6:	00d2      	lsls	r2, r2, #3
 80049a8:	4920      	ldr	r1, [pc, #128]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80049ae:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	4a1e      	ldr	r2, [pc, #120]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049c0:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4a19      	ldr	r2, [pc, #100]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049cc:	e00f      	b.n	80049ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d106      	bne.n	80049e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049d4:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	4a14      	ldr	r2, [pc, #80]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049e0:	e005      	b.n	80049ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e6:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fa:	f7fc fa63 	bl	8000ec4 <HAL_GetTick>
 80049fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a00:	e008      	b.n	8004a14 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004a02:	f7fc fa5f 	bl	8000ec4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e006      	b.n	8004a22 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <RCCEx_PLL3_Config+0x15c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	58024400 	.word	0x58024400
 8004a30:	ffff0007 	.word	0xffff0007

08004a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e049      	b.n	8004ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc f84a 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f000 fb52 	bl	800511c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e049      	b.n	8004b88 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d106      	bne.n	8004b0e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f841 	bl	8004b90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f000 fafb 	bl	800511c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0202 	mvn.w	r2, #2
 8004bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fa7a 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa6c 	bl	80050cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fa7d 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0204 	mvn.w	r2, #4
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2202      	movs	r2, #2
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa50 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa42 	bl	80050cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa53 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d122      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0308 	and.w	r3, r3, #8
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d11b      	bne.n	8004ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0208 	mvn.w	r2, #8
 8004c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fa26 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004c94:	e005      	b.n	8004ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa18 	bl	80050cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fa29 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d122      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d11b      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0210 	mvn.w	r2, #16
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f9fc 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9ee 	bl	80050cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f9ff 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d10e      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d107      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0201 	mvn.w	r2, #1
 8004d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f9c8 	bl	80050b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d10e      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b80      	cmp	r3, #128	; 0x80
 8004d42:	d107      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fe7c 	bl	8005a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d62:	d10e      	bne.n	8004d82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b80      	cmp	r3, #128	; 0x80
 8004d70:	d107      	bne.n	8004d82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fe6f 	bl	8005a60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d10e      	bne.n	8004dae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9a:	2b40      	cmp	r3, #64	; 0x40
 8004d9c:	d107      	bne.n	8004dae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f9ad 	bl	8005108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d10e      	bne.n	8004dda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d107      	bne.n	8004dda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f06f 0220 	mvn.w	r2, #32
 8004dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fe2f 	bl	8005a38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_OC_ConfigChannel+0x1a>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e064      	b.n	8004ec8 <HAL_TIM_OC_ConfigChannel+0xe4>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b14      	cmp	r3, #20
 8004e0a:	d857      	bhi.n	8004ebc <HAL_TIM_OC_ConfigChannel+0xd8>
 8004e0c:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e12:	bf00      	nop
 8004e14:	08004e69 	.word	0x08004e69
 8004e18:	08004ebd 	.word	0x08004ebd
 8004e1c:	08004ebd 	.word	0x08004ebd
 8004e20:	08004ebd 	.word	0x08004ebd
 8004e24:	08004e77 	.word	0x08004e77
 8004e28:	08004ebd 	.word	0x08004ebd
 8004e2c:	08004ebd 	.word	0x08004ebd
 8004e30:	08004ebd 	.word	0x08004ebd
 8004e34:	08004e85 	.word	0x08004e85
 8004e38:	08004ebd 	.word	0x08004ebd
 8004e3c:	08004ebd 	.word	0x08004ebd
 8004e40:	08004ebd 	.word	0x08004ebd
 8004e44:	08004e93 	.word	0x08004e93
 8004e48:	08004ebd 	.word	0x08004ebd
 8004e4c:	08004ebd 	.word	0x08004ebd
 8004e50:	08004ebd 	.word	0x08004ebd
 8004e54:	08004ea1 	.word	0x08004ea1
 8004e58:	08004ebd 	.word	0x08004ebd
 8004e5c:	08004ebd 	.word	0x08004ebd
 8004e60:	08004ebd 	.word	0x08004ebd
 8004e64:	08004eaf 	.word	0x08004eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f9ee 	bl	8005250 <TIM_OC1_SetConfig>
      break;
 8004e74:	e023      	b.n	8004ebe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fa77 	bl	8005370 <TIM_OC2_SetConfig>
      break;
 8004e82:	e01c      	b.n	8004ebe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fafa 	bl	8005484 <TIM_OC3_SetConfig>
      break;
 8004e90:	e015      	b.n	8004ebe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fb79 	bl	8005590 <TIM_OC4_SetConfig>
      break;
 8004e9e:	e00e      	b.n	8004ebe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fbda 	bl	8005660 <TIM_OC5_SetConfig>
      break;
 8004eac:	e007      	b.n	8004ebe <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fc35 	bl	8005724 <TIM_OC6_SetConfig>
      break;
 8004eba:	e000      	b.n	8004ebe <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0x18>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0db      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x1d0>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4b69      	ldr	r3, [pc, #420]	; (80050a8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a63      	ldr	r2, [pc, #396]	; (80050ac <HAL_TIM_ConfigClockSource+0x1dc>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	f000 80a9 	beq.w	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f24:	4a61      	ldr	r2, [pc, #388]	; (80050ac <HAL_TIM_ConfigClockSource+0x1dc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	f200 80ae 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f2c:	4a60      	ldr	r2, [pc, #384]	; (80050b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	f000 80a1 	beq.w	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f34:	4a5e      	ldr	r2, [pc, #376]	; (80050b0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	f200 80a6 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f3c:	4a5d      	ldr	r2, [pc, #372]	; (80050b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f000 8099 	beq.w	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f44:	4a5b      	ldr	r2, [pc, #364]	; (80050b4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	f200 809e 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f50:	f000 8091 	beq.w	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f58:	f200 8096 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f60:	f000 8089 	beq.w	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f68:	f200 808e 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f70:	d03e      	beq.n	8004ff0 <HAL_TIM_ConfigClockSource+0x120>
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f76:	f200 8087 	bhi.w	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7e:	f000 8085 	beq.w	800508c <HAL_TIM_ConfigClockSource+0x1bc>
 8004f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f86:	d87f      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f88:	2b70      	cmp	r3, #112	; 0x70
 8004f8a:	d01a      	beq.n	8004fc2 <HAL_TIM_ConfigClockSource+0xf2>
 8004f8c:	2b70      	cmp	r3, #112	; 0x70
 8004f8e:	d87b      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d050      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x166>
 8004f94:	2b60      	cmp	r3, #96	; 0x60
 8004f96:	d877      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d03c      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x146>
 8004f9c:	2b50      	cmp	r3, #80	; 0x50
 8004f9e:	d873      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d058      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x186>
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d86f      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d064      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
 8004fac:	2b30      	cmp	r3, #48	; 0x30
 8004fae:	d86b      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d060      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d867      	bhi.n	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d05c      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d05a      	beq.n	8005076 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fc0:	e062      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6899      	ldr	r1, [r3, #8]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f000 fc89 	bl	80058e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	609a      	str	r2, [r3, #8]
      break;
 8004fee:	e04e      	b.n	800508e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6899      	ldr	r1, [r3, #8]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f000 fc72 	bl	80058e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005012:	609a      	str	r2, [r3, #8]
      break;
 8005014:	e03b      	b.n	800508e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6859      	ldr	r1, [r3, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	461a      	mov	r2, r3
 8005024:	f000 fbe2 	bl	80057ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2150      	movs	r1, #80	; 0x50
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fc3c 	bl	80058ac <TIM_ITRx_SetConfig>
      break;
 8005034:	e02b      	b.n	800508e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	461a      	mov	r2, r3
 8005044:	f000 fc01 	bl	800584a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2160      	movs	r1, #96	; 0x60
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fc2c 	bl	80058ac <TIM_ITRx_SetConfig>
      break;
 8005054:	e01b      	b.n	800508e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6859      	ldr	r1, [r3, #4]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	461a      	mov	r2, r3
 8005064:	f000 fbc2 	bl	80057ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	4618      	mov	r0, r3
 8005070:	f000 fc1c 	bl	80058ac <TIM_ITRx_SetConfig>
      break;
 8005074:	e00b      	b.n	800508e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fc13 	bl	80058ac <TIM_ITRx_SetConfig>
        break;
 8005086:	e002      	b.n	800508e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8005088:	bf00      	nop
 800508a:	e000      	b.n	800508e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800508c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	ffceff88 	.word	0xffceff88
 80050ac:	00100040 	.word	0x00100040
 80050b0:	00100030 	.word	0x00100030
 80050b4:	00100020 	.word	0x00100020

080050b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a40      	ldr	r2, [pc, #256]	; (8005230 <TIM_Base_SetConfig+0x114>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d013      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513a:	d00f      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3d      	ldr	r2, [pc, #244]	; (8005234 <TIM_Base_SetConfig+0x118>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00b      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3c      	ldr	r2, [pc, #240]	; (8005238 <TIM_Base_SetConfig+0x11c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d007      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a3b      	ldr	r2, [pc, #236]	; (800523c <TIM_Base_SetConfig+0x120>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a3a      	ldr	r2, [pc, #232]	; (8005240 <TIM_Base_SetConfig+0x124>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d108      	bne.n	800516e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2f      	ldr	r2, [pc, #188]	; (8005230 <TIM_Base_SetConfig+0x114>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517c:	d01b      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a2c      	ldr	r2, [pc, #176]	; (8005234 <TIM_Base_SetConfig+0x118>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d017      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2b      	ldr	r2, [pc, #172]	; (8005238 <TIM_Base_SetConfig+0x11c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2a      	ldr	r2, [pc, #168]	; (800523c <TIM_Base_SetConfig+0x120>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a29      	ldr	r2, [pc, #164]	; (8005240 <TIM_Base_SetConfig+0x124>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a28      	ldr	r2, [pc, #160]	; (8005244 <TIM_Base_SetConfig+0x128>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a27      	ldr	r2, [pc, #156]	; (8005248 <TIM_Base_SetConfig+0x12c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a26      	ldr	r2, [pc, #152]	; (800524c <TIM_Base_SetConfig+0x130>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a10      	ldr	r2, [pc, #64]	; (8005230 <TIM_Base_SetConfig+0x114>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00f      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a12      	ldr	r2, [pc, #72]	; (8005240 <TIM_Base_SetConfig+0x124>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a11      	ldr	r2, [pc, #68]	; (8005244 <TIM_Base_SetConfig+0x128>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a10      	ldr	r2, [pc, #64]	; (8005248 <TIM_Base_SetConfig+0x12c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a0f      	ldr	r2, [pc, #60]	; (800524c <TIM_Base_SetConfig+0x130>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d103      	bne.n	800521c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	615a      	str	r2, [r3, #20]
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40010400 	.word	0x40010400
 8005244:	40014000 	.word	0x40014000
 8005248:	40014400 	.word	0x40014400
 800524c:	40014800 	.word	0x40014800

08005250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4b37      	ldr	r3, [pc, #220]	; (8005358 <TIM_OC1_SetConfig+0x108>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 0302 	bic.w	r3, r3, #2
 8005298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a2d      	ldr	r2, [pc, #180]	; (800535c <TIM_OC1_SetConfig+0x10c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00f      	beq.n	80052cc <TIM_OC1_SetConfig+0x7c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <TIM_OC1_SetConfig+0x110>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_OC1_SetConfig+0x7c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <TIM_OC1_SetConfig+0x114>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_OC1_SetConfig+0x7c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <TIM_OC1_SetConfig+0x118>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_OC1_SetConfig+0x7c>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a29      	ldr	r2, [pc, #164]	; (800536c <TIM_OC1_SetConfig+0x11c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d10c      	bne.n	80052e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0308 	bic.w	r3, r3, #8
 80052d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f023 0304 	bic.w	r3, r3, #4
 80052e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1c      	ldr	r2, [pc, #112]	; (800535c <TIM_OC1_SetConfig+0x10c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00f      	beq.n	800530e <TIM_OC1_SetConfig+0xbe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <TIM_OC1_SetConfig+0x110>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00b      	beq.n	800530e <TIM_OC1_SetConfig+0xbe>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a1a      	ldr	r2, [pc, #104]	; (8005364 <TIM_OC1_SetConfig+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d007      	beq.n	800530e <TIM_OC1_SetConfig+0xbe>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <TIM_OC1_SetConfig+0x118>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC1_SetConfig+0xbe>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <TIM_OC1_SetConfig+0x11c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d111      	bne.n	8005332 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	fffeff8f 	.word	0xfffeff8f
 800535c:	40010000 	.word	0x40010000
 8005360:	40010400 	.word	0x40010400
 8005364:	40014000 	.word	0x40014000
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800

08005370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f023 0210 	bic.w	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4b34      	ldr	r3, [pc, #208]	; (800546c <TIM_OC2_SetConfig+0xfc>)
 800539c:	4013      	ands	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 0320 	bic.w	r3, r3, #32
 80053ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a29      	ldr	r2, [pc, #164]	; (8005470 <TIM_OC2_SetConfig+0x100>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_OC2_SetConfig+0x68>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a28      	ldr	r2, [pc, #160]	; (8005474 <TIM_OC2_SetConfig+0x104>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d10d      	bne.n	80053f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <TIM_OC2_SetConfig+0x100>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00f      	beq.n	800541c <TIM_OC2_SetConfig+0xac>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <TIM_OC2_SetConfig+0x104>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d00b      	beq.n	800541c <TIM_OC2_SetConfig+0xac>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <TIM_OC2_SetConfig+0x108>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d007      	beq.n	800541c <TIM_OC2_SetConfig+0xac>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a1b      	ldr	r2, [pc, #108]	; (800547c <TIM_OC2_SetConfig+0x10c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d003      	beq.n	800541c <TIM_OC2_SetConfig+0xac>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a1a      	ldr	r2, [pc, #104]	; (8005480 <TIM_OC2_SetConfig+0x110>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d113      	bne.n	8005444 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800542a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	feff8fff 	.word	0xfeff8fff
 8005470:	40010000 	.word	0x40010000
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40014400 	.word	0x40014400
 8005480:	40014800 	.word	0x40014800

08005484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a27      	ldr	r2, [pc, #156]	; (800557c <TIM_OC3_SetConfig+0xf8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_OC3_SetConfig+0x66>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a26      	ldr	r2, [pc, #152]	; (8005580 <TIM_OC3_SetConfig+0xfc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d10d      	bne.n	8005506 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1c      	ldr	r2, [pc, #112]	; (800557c <TIM_OC3_SetConfig+0xf8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00f      	beq.n	800552e <TIM_OC3_SetConfig+0xaa>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <TIM_OC3_SetConfig+0xfc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00b      	beq.n	800552e <TIM_OC3_SetConfig+0xaa>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1a      	ldr	r2, [pc, #104]	; (8005584 <TIM_OC3_SetConfig+0x100>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d007      	beq.n	800552e <TIM_OC3_SetConfig+0xaa>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <TIM_OC3_SetConfig+0x104>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d003      	beq.n	800552e <TIM_OC3_SetConfig+0xaa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a18      	ldr	r2, [pc, #96]	; (800558c <TIM_OC3_SetConfig+0x108>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d113      	bne.n	8005556 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800553c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	621a      	str	r2, [r3, #32]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40010000 	.word	0x40010000
 8005580:	40010400 	.word	0x40010400
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	031b      	lsls	r3, r3, #12
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a18      	ldr	r2, [pc, #96]	; (800564c <TIM_OC4_SetConfig+0xbc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00f      	beq.n	8005610 <TIM_OC4_SetConfig+0x80>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a17      	ldr	r2, [pc, #92]	; (8005650 <TIM_OC4_SetConfig+0xc0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <TIM_OC4_SetConfig+0x80>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a16      	ldr	r2, [pc, #88]	; (8005654 <TIM_OC4_SetConfig+0xc4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_OC4_SetConfig+0x80>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a15      	ldr	r2, [pc, #84]	; (8005658 <TIM_OC4_SetConfig+0xc8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC4_SetConfig+0x80>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a14      	ldr	r2, [pc, #80]	; (800565c <TIM_OC4_SetConfig+0xcc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d109      	bne.n	8005624 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005616:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	019b      	lsls	r3, r3, #6
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40010400 	.word	0x40010400
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800

08005660 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80056a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a17      	ldr	r2, [pc, #92]	; (8005710 <TIM_OC5_SetConfig+0xb0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00f      	beq.n	80056d6 <TIM_OC5_SetConfig+0x76>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a16      	ldr	r2, [pc, #88]	; (8005714 <TIM_OC5_SetConfig+0xb4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_OC5_SetConfig+0x76>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a15      	ldr	r2, [pc, #84]	; (8005718 <TIM_OC5_SetConfig+0xb8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d007      	beq.n	80056d6 <TIM_OC5_SetConfig+0x76>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a14      	ldr	r2, [pc, #80]	; (800571c <TIM_OC5_SetConfig+0xbc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_OC5_SetConfig+0x76>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a13      	ldr	r2, [pc, #76]	; (8005720 <TIM_OC5_SetConfig+0xc0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d109      	bne.n	80056ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	40010000 	.word	0x40010000
 8005714:	40010400 	.word	0x40010400
 8005718:	40014000 	.word	0x40014000
 800571c:	40014400 	.word	0x40014400
 8005720:	40014800 	.word	0x40014800

08005724 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	051b      	lsls	r3, r3, #20
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a18      	ldr	r2, [pc, #96]	; (80057d8 <TIM_OC6_SetConfig+0xb4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <TIM_OC6_SetConfig+0x78>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a17      	ldr	r2, [pc, #92]	; (80057dc <TIM_OC6_SetConfig+0xb8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00b      	beq.n	800579c <TIM_OC6_SetConfig+0x78>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a16      	ldr	r2, [pc, #88]	; (80057e0 <TIM_OC6_SetConfig+0xbc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_OC6_SetConfig+0x78>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a15      	ldr	r2, [pc, #84]	; (80057e4 <TIM_OC6_SetConfig+0xc0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC6_SetConfig+0x78>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a14      	ldr	r2, [pc, #80]	; (80057e8 <TIM_OC6_SetConfig+0xc4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d109      	bne.n	80057b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	029b      	lsls	r3, r3, #10
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40010400 	.word	0x40010400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800

080057ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 030a 	bic.w	r3, r3, #10
 8005828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800584a:	b480      	push	{r7}
 800584c:	b087      	sub	sp, #28
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f023 0210 	bic.w	r2, r3, #16
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	4313      	orrs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4b09      	ldr	r3, [pc, #36]	; (80058e4 <TIM_ITRx_SetConfig+0x38>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f043 0307 	orr.w	r3, r3, #7
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	609a      	str	r2, [r3, #8]
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	ffcfff8f 	.word	0xffcfff8f

080058e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	021a      	lsls	r2, r3, #8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	431a      	orrs	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	609a      	str	r2, [r3, #8]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800593c:	2302      	movs	r3, #2
 800593e:	e068      	b.n	8005a12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a2e      	ldr	r2, [pc, #184]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a2d      	ldr	r2, [pc, #180]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d108      	bne.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800597a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01d      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b2:	d018      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1b      	ldr	r2, [pc, #108]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1a      	ldr	r2, [pc, #104]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a18      	ldr	r2, [pc, #96]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a14      	ldr	r2, [pc, #80]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d10c      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	40010000 	.word	0x40010000
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40001800 	.word	0x40001800

08005a38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a74:	b084      	sub	sp, #16
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	f107 001c 	add.w	r0, r7, #28
 8005a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d120      	bne.n	8005ace <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	4b2a      	ldr	r3, [pc, #168]	; (8005b48 <USB_CoreInit+0xd4>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d105      	bne.n	8005ac2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 fb14 	bl	80070f0 <USB_CoreReset>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
 8005acc:	e01a      	b.n	8005b04 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 fb08 	bl	80070f0 <USB_CoreReset>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38
 8005af6:	e005      	b.n	8005b04 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d116      	bne.n	8005b38 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b18:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <USB_CoreInit+0xd8>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f043 0206 	orr.w	r2, r3, #6
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f043 0220 	orr.w	r2, r3, #32
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b44:	b004      	add	sp, #16
 8005b46:	4770      	bx	lr
 8005b48:	ffbdffbf 	.word	0xffbdffbf
 8005b4c:	03ee0000 	.word	0x03ee0000

08005b50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d165      	bne.n	8005c30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4a41      	ldr	r2, [pc, #260]	; (8005c6c <USB_SetTurnaroundTime+0x11c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d906      	bls.n	8005b7a <USB_SetTurnaroundTime+0x2a>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4a40      	ldr	r2, [pc, #256]	; (8005c70 <USB_SetTurnaroundTime+0x120>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d202      	bcs.n	8005b7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b74:	230f      	movs	r3, #15
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e062      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	4a3c      	ldr	r2, [pc, #240]	; (8005c70 <USB_SetTurnaroundTime+0x120>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d306      	bcc.n	8005b90 <USB_SetTurnaroundTime+0x40>
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	4a3b      	ldr	r2, [pc, #236]	; (8005c74 <USB_SetTurnaroundTime+0x124>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d202      	bcs.n	8005b90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b8a:	230e      	movs	r3, #14
 8005b8c:	617b      	str	r3, [r7, #20]
 8005b8e:	e057      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4a38      	ldr	r2, [pc, #224]	; (8005c74 <USB_SetTurnaroundTime+0x124>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d306      	bcc.n	8005ba6 <USB_SetTurnaroundTime+0x56>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4a37      	ldr	r2, [pc, #220]	; (8005c78 <USB_SetTurnaroundTime+0x128>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d202      	bcs.n	8005ba6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ba0:	230d      	movs	r3, #13
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	e04c      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	4a33      	ldr	r2, [pc, #204]	; (8005c78 <USB_SetTurnaroundTime+0x128>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d306      	bcc.n	8005bbc <USB_SetTurnaroundTime+0x6c>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	4a32      	ldr	r2, [pc, #200]	; (8005c7c <USB_SetTurnaroundTime+0x12c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d802      	bhi.n	8005bbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e041      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <USB_SetTurnaroundTime+0x12c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d906      	bls.n	8005bd2 <USB_SetTurnaroundTime+0x82>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4a2e      	ldr	r2, [pc, #184]	; (8005c80 <USB_SetTurnaroundTime+0x130>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d802      	bhi.n	8005bd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005bcc:	230b      	movs	r3, #11
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e036      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <USB_SetTurnaroundTime+0x130>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d906      	bls.n	8005be8 <USB_SetTurnaroundTime+0x98>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4a29      	ldr	r2, [pc, #164]	; (8005c84 <USB_SetTurnaroundTime+0x134>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d802      	bhi.n	8005be8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005be2:	230a      	movs	r3, #10
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e02b      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4a26      	ldr	r2, [pc, #152]	; (8005c84 <USB_SetTurnaroundTime+0x134>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d906      	bls.n	8005bfe <USB_SetTurnaroundTime+0xae>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <USB_SetTurnaroundTime+0x138>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d202      	bcs.n	8005bfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005bf8:	2309      	movs	r3, #9
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e020      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4a21      	ldr	r2, [pc, #132]	; (8005c88 <USB_SetTurnaroundTime+0x138>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d306      	bcc.n	8005c14 <USB_SetTurnaroundTime+0xc4>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <USB_SetTurnaroundTime+0x13c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d802      	bhi.n	8005c14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c0e:	2308      	movs	r3, #8
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e015      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <USB_SetTurnaroundTime+0x13c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d906      	bls.n	8005c2a <USB_SetTurnaroundTime+0xda>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <USB_SetTurnaroundTime+0x140>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d202      	bcs.n	8005c2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c24:	2307      	movs	r3, #7
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e00a      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c2a:	2306      	movs	r3, #6
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	e007      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c36:	2309      	movs	r3, #9
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e001      	b.n	8005c40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c3c:	2309      	movs	r3, #9
 8005c3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	029b      	lsls	r3, r3, #10
 8005c54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	00d8acbf 	.word	0x00d8acbf
 8005c70:	00e4e1c0 	.word	0x00e4e1c0
 8005c74:	00f42400 	.word	0x00f42400
 8005c78:	01067380 	.word	0x01067380
 8005c7c:	011a499f 	.word	0x011a499f
 8005c80:	01312cff 	.word	0x01312cff
 8005c84:	014ca43f 	.word	0x014ca43f
 8005c88:	016e3600 	.word	0x016e3600
 8005c8c:	01a6ab1f 	.word	0x01a6ab1f
 8005c90:	01e84800 	.word	0x01e84800

08005c94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f043 0201 	orr.w	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f023 0201 	bic.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d106      	bne.n	8005d04 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	e00b      	b.n	8005d1c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	e001      	b.n	8005d1c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e003      	b.n	8005d24 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d1c:	2032      	movs	r0, #50	; 0x32
 8005d1e:	f7fb f8dd 	bl	8000edc <HAL_Delay>

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b086      	sub	sp, #24
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	e009      	b.n	8005d60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	3340      	adds	r3, #64	; 0x40
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	613b      	str	r3, [r7, #16]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b0e      	cmp	r3, #14
 8005d64:	d9f2      	bls.n	8005d4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11c      	bne.n	8005da6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d7a:	f043 0302 	orr.w	r3, r3, #2
 8005d7e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e005      	b.n	8005db2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005db8:	461a      	mov	r2, r3
 8005dba:	2300      	movs	r3, #0
 8005dbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dcc:	461a      	mov	r2, r3
 8005dce:	680b      	ldr	r3, [r1, #0]
 8005dd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d10c      	bne.n	8005df2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d104      	bne.n	8005de8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dde:	2100      	movs	r1, #0
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f949 	bl	8006078 <USB_SetDevSpeed>
 8005de6:	e008      	b.n	8005dfa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005de8:	2101      	movs	r1, #1
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f944 	bl	8006078 <USB_SetDevSpeed>
 8005df0:	e003      	b.n	8005dfa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005df2:	2103      	movs	r1, #3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f93f 	bl	8006078 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dfa:	2110      	movs	r1, #16
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f8f3 	bl	8005fe8 <USB_FlushTxFifo>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f911 	bl	8006034 <USB_FlushRxFifo>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e22:	461a      	mov	r2, r3
 8005e24:	2300      	movs	r3, #0
 8005e26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	e043      	b.n	8005ece <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e5c:	d118      	bne.n	8005e90 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	461a      	mov	r2, r3
 8005e72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e013      	b.n	8005ea2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	461a      	mov	r2, r3
 8005e88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	e008      	b.n	8005ea2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	461a      	mov	r2, r3
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	613b      	str	r3, [r7, #16]
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d3b7      	bcc.n	8005e46 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	e043      	b.n	8005f64 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ef2:	d118      	bne.n	8005f26 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	461a      	mov	r2, r3
 8005f08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e013      	b.n	8005f38 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	e008      	b.n	8005f38 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f32:	461a      	mov	r2, r3
 8005f34:	2300      	movs	r3, #0
 8005f36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	461a      	mov	r2, r3
 8005f46:	2300      	movs	r3, #0
 8005f48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f56:	461a      	mov	r2, r3
 8005f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	3301      	adds	r3, #1
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3b7      	bcc.n	8005edc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f043 0210 	orr.w	r2, r3, #16
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699a      	ldr	r2, [r3, #24]
 8005fa4:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <USB_DevInit+0x2b4>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f043 0208 	orr.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d105      	bne.n	8005fd0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <USB_DevInit+0x2b8>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fdc:	b004      	add	sp, #16
 8005fde:	4770      	bx	lr
 8005fe0:	803c3800 	.word	0x803c3800
 8005fe4:	40000004 	.word	0x40000004

08005fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	019b      	lsls	r3, r3, #6
 8005ffa:	f043 0220 	orr.w	r2, r3, #32
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3301      	adds	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a09      	ldr	r2, [pc, #36]	; (8006030 <USB_FlushTxFifo+0x48>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d901      	bls.n	8006014 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e006      	b.n	8006022 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b20      	cmp	r3, #32
 800601e:	d0f0      	beq.n	8006002 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	00030d40 	.word	0x00030d40

08006034 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2210      	movs	r2, #16
 8006044:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3301      	adds	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <USB_FlushRxFifo+0x40>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d901      	bls.n	8006058 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e006      	b.n	8006066 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b10      	cmp	r3, #16
 8006062:	d0f0      	beq.n	8006046 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	00030d40 	.word	0x00030d40

08006078 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	78fb      	ldrb	r3, [r7, #3]
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006098:	4313      	orrs	r3, r2
 800609a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0306 	and.w	r3, r3, #6
 80060c2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d102      	bne.n	80060d0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80060ca:	2300      	movs	r3, #0
 80060cc:	75fb      	strb	r3, [r7, #23]
 80060ce:	e00a      	b.n	80060e6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d002      	beq.n	80060dc <USB_GetDevSpeed+0x32>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b06      	cmp	r3, #6
 80060da:	d102      	bne.n	80060e2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80060dc:	2302      	movs	r3, #2
 80060de:	75fb      	strb	r3, [r7, #23]
 80060e0:	e001      	b.n	80060e6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80060e2:	230f      	movs	r3, #15
 80060e4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d139      	bne.n	8006184 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	2101      	movs	r1, #1
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	b29b      	uxth	r3, r3
 8006128:	68f9      	ldr	r1, [r7, #12]
 800612a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800612e:	4313      	orrs	r3, r2
 8006130:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d153      	bne.n	80061f0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	78db      	ldrb	r3, [r3, #3]
 8006162:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006164:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	059b      	lsls	r3, r3, #22
 800616a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800616c:	431a      	orrs	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	0159      	lsls	r1, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	440b      	add	r3, r1
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	4619      	mov	r1, r3
 800617c:	4b20      	ldr	r3, [pc, #128]	; (8006200 <USB_ActivateEndpoint+0x10c>)
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]
 8006182:	e035      	b.n	80061f0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	68f9      	ldr	r1, [r7, #12]
 800619e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a2:	4313      	orrs	r3, r2
 80061a4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d119      	bne.n	80061f0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	78db      	ldrb	r3, [r3, #3]
 80061d6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061d8:	430b      	orrs	r3, r1
 80061da:	431a      	orrs	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	0159      	lsls	r1, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	440b      	add	r3, r1
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	4619      	mov	r1, r3
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <USB_ActivateEndpoint+0x10c>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	10008000 	.word	0x10008000

08006204 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d161      	bne.n	80062e4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006236:	d11f      	bne.n	8006278 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006256:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	440a      	add	r2, r1
 800626e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006272:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	2101      	movs	r1, #1
 800628a:	fa01 f303 	lsl.w	r3, r1, r3
 800628e:	b29b      	uxth	r3, r3
 8006290:	43db      	mvns	r3, r3
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006298:	4013      	ands	r3, r2
 800629a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	2101      	movs	r1, #1
 80062ae:	fa01 f303 	lsl.w	r3, r1, r3
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	43db      	mvns	r3, r3
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062bc:	4013      	ands	r3, r2
 80062be:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	0159      	lsls	r1, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	440b      	add	r3, r1
 80062d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062da:	4619      	mov	r1, r3
 80062dc:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <USB_DeactivateEndpoint+0x1b0>)
 80062de:	4013      	ands	r3, r2
 80062e0:	600b      	str	r3, [r1, #0]
 80062e2:	e060      	b.n	80063a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062fa:	d11f      	bne.n	800633c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800631a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800633a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	2101      	movs	r1, #1
 800634e:	fa01 f303 	lsl.w	r3, r1, r3
 8006352:	041b      	lsls	r3, r3, #16
 8006354:	43db      	mvns	r3, r3
 8006356:	68f9      	ldr	r1, [r7, #12]
 8006358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800635c:	4013      	ands	r3, r2
 800635e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	f003 030f 	and.w	r3, r3, #15
 8006370:	2101      	movs	r1, #1
 8006372:	fa01 f303 	lsl.w	r3, r1, r3
 8006376:	041b      	lsls	r3, r3, #16
 8006378:	43db      	mvns	r3, r3
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006380:	4013      	ands	r3, r2
 8006382:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	0159      	lsls	r1, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	440b      	add	r3, r1
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	4619      	mov	r1, r3
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <USB_DeactivateEndpoint+0x1b4>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	ec337800 	.word	0xec337800
 80063b8:	eff37800 	.word	0xeff37800

080063bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	4613      	mov	r3, r2
 80063c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 8163 	bne.w	80066a4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d132      	bne.n	800644c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	0159      	lsls	r1, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	440b      	add	r3, r1
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	4619      	mov	r1, r3
 8006402:	4ba5      	ldr	r3, [pc, #660]	; (8006698 <USB_EPStartXfer+0x2dc>)
 8006404:	4013      	ands	r3, r2
 8006406:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006426:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	691a      	ldr	r2, [r3, #16]
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	0159      	lsls	r1, r3, #5
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	440b      	add	r3, r1
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	4619      	mov	r1, r3
 8006444:	4b95      	ldr	r3, [pc, #596]	; (800669c <USB_EPStartXfer+0x2e0>)
 8006446:	4013      	ands	r3, r2
 8006448:	610b      	str	r3, [r1, #16]
 800644a:	e074      	b.n	8006536 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	0159      	lsls	r1, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	440b      	add	r3, r1
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	4619      	mov	r1, r3
 8006468:	4b8c      	ldr	r3, [pc, #560]	; (800669c <USB_EPStartXfer+0x2e0>)
 800646a:	4013      	ands	r3, r2
 800646c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	0159      	lsls	r1, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	440b      	add	r3, r1
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	4619      	mov	r1, r3
 800648a:	4b83      	ldr	r3, [pc, #524]	; (8006698 <USB_EPStartXfer+0x2dc>)
 800648c:	4013      	ands	r3, r2
 800648e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6959      	ldr	r1, [r3, #20]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	440b      	add	r3, r1
 80064a8:	1e59      	subs	r1, r3, #1
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80064b2:	04d9      	lsls	r1, r3, #19
 80064b4:	4b7a      	ldr	r3, [pc, #488]	; (80066a0 <USB_EPStartXfer+0x2e4>)
 80064b6:	400b      	ands	r3, r1
 80064b8:	69b9      	ldr	r1, [r7, #24]
 80064ba:	0148      	lsls	r0, r1, #5
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	4401      	add	r1, r0
 80064c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064c4:	4313      	orrs	r3, r2
 80064c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	691a      	ldr	r2, [r3, #16]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064de:	69b9      	ldr	r1, [r7, #24]
 80064e0:	0148      	lsls	r0, r1, #5
 80064e2:	69f9      	ldr	r1, [r7, #28]
 80064e4:	4401      	add	r1, r0
 80064e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064ea:	4313      	orrs	r3, r2
 80064ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	78db      	ldrb	r3, [r3, #3]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d11f      	bne.n	8006536 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006514:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006530:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006534:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d14b      	bne.n	80065d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d009      	beq.n	8006558 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	78db      	ldrb	r3, [r3, #3]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d128      	bne.n	80065b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d110      	bne.n	8006592 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800658a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e00f      	b.n	80065b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	e133      	b.n	800683c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	78db      	ldrb	r3, [r3, #3]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d015      	beq.n	8006628 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 811b 	beq.w	800683c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	2101      	movs	r1, #1
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	69f9      	ldr	r1, [r7, #28]
 800661e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006622:	4313      	orrs	r3, r2
 8006624:	634b      	str	r3, [r1, #52]	; 0x34
 8006626:	e109      	b.n	800683c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d110      	bne.n	800665a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e00f      	b.n	800667a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	0151      	lsls	r1, r2, #5
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	440a      	add	r2, r1
 8006670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006678:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	68d9      	ldr	r1, [r3, #12]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	781a      	ldrb	r2, [r3, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	b298      	uxth	r0, r3
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	4603      	mov	r3, r0
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 fa38 	bl	8006b04 <USB_WritePacket>
 8006694:	e0d2      	b.n	800683c <USB_EPStartXfer+0x480>
 8006696:	bf00      	nop
 8006698:	e007ffff 	.word	0xe007ffff
 800669c:	fff80000 	.word	0xfff80000
 80066a0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	0159      	lsls	r1, r3, #5
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	440b      	add	r3, r1
 80066ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066be:	4619      	mov	r1, r3
 80066c0:	4b61      	ldr	r3, [pc, #388]	; (8006848 <USB_EPStartXfer+0x48c>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	691a      	ldr	r2, [r3, #16]
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	0159      	lsls	r1, r3, #5
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	440b      	add	r3, r1
 80066dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e0:	4619      	mov	r1, r3
 80066e2:	4b5a      	ldr	r3, [pc, #360]	; (800684c <USB_EPStartXfer+0x490>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d123      	bne.n	8006738 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006706:	69b9      	ldr	r1, [r7, #24]
 8006708:	0148      	lsls	r0, r1, #5
 800670a:	69f9      	ldr	r1, [r7, #28]
 800670c:	4401      	add	r1, r0
 800670e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006712:	4313      	orrs	r3, r2
 8006714:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	0151      	lsls	r1, r2, #5
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	440a      	add	r2, r1
 800672c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006734:	6113      	str	r3, [r2, #16]
 8006736:	e033      	b.n	80067a0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	695a      	ldr	r2, [r3, #20]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4413      	add	r3, r2
 8006742:	1e5a      	subs	r2, r3, #1
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	fbb2 f3f3 	udiv	r3, r2, r3
 800674c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	8afb      	ldrh	r3, [r7, #22]
 800675e:	04d9      	lsls	r1, r3, #19
 8006760:	4b3b      	ldr	r3, [pc, #236]	; (8006850 <USB_EPStartXfer+0x494>)
 8006762:	400b      	ands	r3, r1
 8006764:	69b9      	ldr	r1, [r7, #24]
 8006766:	0148      	lsls	r0, r1, #5
 8006768:	69f9      	ldr	r1, [r7, #28]
 800676a:	4401      	add	r1, r0
 800676c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006770:	4313      	orrs	r3, r2
 8006772:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	8af9      	ldrh	r1, [r7, #22]
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006790:	69b9      	ldr	r1, [r7, #24]
 8006792:	0148      	lsls	r0, r1, #5
 8006794:	69f9      	ldr	r1, [r7, #28]
 8006796:	4401      	add	r1, r0
 8006798:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800679c:	4313      	orrs	r3, r2
 800679e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d10d      	bne.n	80067c2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	68d9      	ldr	r1, [r3, #12]
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	460a      	mov	r2, r1
 80067c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	78db      	ldrb	r3, [r3, #3]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d128      	bne.n	800681c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d110      	bne.n	80067fc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e00f      	b.n	800681c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	440a      	add	r2, r1
 8006832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800683a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	fff80000 	.word	0xfff80000
 800684c:	e007ffff 	.word	0xe007ffff
 8006850:	1ff80000 	.word	0x1ff80000

08006854 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	785b      	ldrb	r3, [r3, #1]
 8006870:	2b01      	cmp	r3, #1
 8006872:	f040 80cd 	bne.w	8006a10 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d132      	bne.n	80068e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	0159      	lsls	r1, r3, #5
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	440b      	add	r3, r1
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	4619      	mov	r1, r3
 800689a:	4b98      	ldr	r3, [pc, #608]	; (8006afc <USB_EP0StartXfer+0x2a8>)
 800689c:	4013      	ands	r3, r2
 800689e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	0151      	lsls	r1, r2, #5
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	440a      	add	r2, r1
 80068b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068cc:	691a      	ldr	r2, [r3, #16]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	0159      	lsls	r1, r3, #5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	440b      	add	r3, r1
 80068d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068da:	4619      	mov	r1, r3
 80068dc:	4b88      	ldr	r3, [pc, #544]	; (8006b00 <USB_EP0StartXfer+0x2ac>)
 80068de:	4013      	ands	r3, r2
 80068e0:	610b      	str	r3, [r1, #16]
 80068e2:	e04e      	b.n	8006982 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f0:	691a      	ldr	r2, [r3, #16]
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	0159      	lsls	r1, r3, #5
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	440b      	add	r3, r1
 80068fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fe:	4619      	mov	r1, r3
 8006900:	4b7f      	ldr	r3, [pc, #508]	; (8006b00 <USB_EP0StartXfer+0x2ac>)
 8006902:	4013      	ands	r3, r2
 8006904:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	691a      	ldr	r2, [r3, #16]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	0159      	lsls	r1, r3, #5
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	440b      	add	r3, r1
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	4619      	mov	r1, r3
 8006922:	4b76      	ldr	r3, [pc, #472]	; (8006afc <USB_EP0StartXfer+0x2a8>)
 8006924:	4013      	ands	r3, r2
 8006926:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	d903      	bls.n	800693c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	689a      	ldr	r2, [r3, #8]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800695a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	691a      	ldr	r2, [r3, #16]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006972:	6939      	ldr	r1, [r7, #16]
 8006974:	0148      	lsls	r0, r1, #5
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	4401      	add	r1, r0
 800697a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800697e:	4313      	orrs	r3, r2
 8006980:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d11e      	bne.n	80069c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d009      	beq.n	80069a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699c:	461a      	mov	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	e092      	b.n	8006aec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d07e      	beq.n	8006aec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	2101      	movs	r1, #1
 8006a00:	fa01 f303 	lsl.w	r3, r1, r3
 8006a04:	6979      	ldr	r1, [r7, #20]
 8006a06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	634b      	str	r3, [r1, #52]	; 0x34
 8006a0e:	e06d      	b.n	8006aec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	0159      	lsls	r1, r3, #5
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	440b      	add	r3, r1
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <USB_EP0StartXfer+0x2ac>)
 8006a2e:	4013      	ands	r3, r2
 8006a30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	0159      	lsls	r1, r3, #5
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	440b      	add	r3, r1
 8006a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <USB_EP0StartXfer+0x2a8>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a9a:	6939      	ldr	r1, [r7, #16]
 8006a9c:	0148      	lsls	r0, r1, #5
 8006a9e:	6979      	ldr	r1, [r7, #20]
 8006aa0:	4401      	add	r1, r0
 8006aa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d10d      	bne.n	8006acc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d009      	beq.n	8006acc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	68d9      	ldr	r1, [r3, #12]
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	460a      	mov	r2, r1
 8006aca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	e007ffff 	.word	0xe007ffff
 8006b00:	fff80000 	.word	0xfff80000

08006b04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b089      	sub	sp, #36	; 0x24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	4611      	mov	r1, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	460b      	mov	r3, r1
 8006b14:	71fb      	strb	r3, [r7, #7]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006b22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d123      	bne.n	8006b72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b2a:	88bb      	ldrh	r3, [r7, #4]
 8006b2c:	3303      	adds	r3, #3
 8006b2e:	089b      	lsrs	r3, r3, #2
 8006b30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b32:	2300      	movs	r3, #0
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	e018      	b.n	8006b6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	031a      	lsls	r2, r3, #12
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b44:	461a      	mov	r2, r3
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	3301      	adds	r3, #1
 8006b56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	3301      	adds	r3, #1
 8006b62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	3301      	adds	r3, #1
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d3e2      	bcc.n	8006b38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3724      	adds	r7, #36	; 0x24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b08b      	sub	sp, #44	; 0x2c
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b96:	88fb      	ldrh	r3, [r7, #6]
 8006b98:	089b      	lsrs	r3, r3, #2
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b9e:	88fb      	ldrh	r3, [r7, #6]
 8006ba0:	f003 0303 	and.w	r3, r3, #3
 8006ba4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	623b      	str	r3, [r7, #32]
 8006baa:	e014      	b.n	8006bd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	3301      	adds	r3, #1
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	3301      	adds	r3, #1
 8006bce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	623b      	str	r3, [r7, #32]
 8006bd6:	6a3a      	ldr	r2, [r7, #32]
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d3e6      	bcc.n	8006bac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bde:	8bfb      	ldrh	r3, [r7, #30]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01e      	beq.n	8006c22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f107 0310 	add.w	r3, r7, #16
 8006bf4:	6812      	ldr	r2, [r2, #0]
 8006bf6:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	fa22 f303 	lsr.w	r3, r2, r3
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	701a      	strb	r2, [r3, #0]
      i++;
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	3301      	adds	r3, #1
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c16:	8bfb      	ldrh	r3, [r7, #30]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c1c:	8bfb      	ldrh	r3, [r7, #30]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1ea      	bne.n	8006bf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	372c      	adds	r7, #44	; 0x2c
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	785b      	ldrb	r3, [r3, #1]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d12c      	bne.n	8006ca6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	db12      	blt.n	8006c84 <USB_EPSetStall+0x54>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00f      	beq.n	8006c84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	e02b      	b.n	8006cfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	db12      	blt.n	8006cde <USB_EPSetStall+0xae>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00f      	beq.n	8006cde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cdc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	0151      	lsls	r1, r2, #5
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	785b      	ldrb	r3, [r3, #1]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d128      	bne.n	8006d7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	78db      	ldrb	r3, [r3, #3]
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d003      	beq.n	8006d58 <USB_EPClearStall+0x4c>
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	78db      	ldrb	r3, [r3, #3]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d138      	bne.n	8006dca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	e027      	b.n	8006dca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	78db      	ldrb	r3, [r3, #3]
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d003      	beq.n	8006daa <USB_EPClearStall+0x9e>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	78db      	ldrb	r3, [r3, #3]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d10f      	bne.n	8006dca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006dfa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e0c:	68f9      	ldr	r1, [r7, #12]
 8006e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e12:	4313      	orrs	r3, r2
 8006e14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e52:	f023 0302 	bic.w	r3, r3, #2
 8006e56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e94:	f043 0302 	orr.w	r3, r3, #2
 8006e98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	0c1b      	lsrs	r3, r3, #16
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	b29b      	uxth	r3, r3
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	4013      	ands	r3, r2
 8006f62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f64:	68bb      	ldr	r3, [r7, #8]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa2:	01db      	lsls	r3, r3, #7
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	f003 0301 	and.w	r3, r3, #1
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	370c      	adds	r7, #12
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	4619      	mov	r1, r3
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <USB_ActivateSetup+0x44>)
 800700a:	4013      	ands	r3, r2
 800700c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800701c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007020:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	fffff800 	.word	0xfffff800

08007034 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	460b      	mov	r3, r1
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	333c      	adds	r3, #60	; 0x3c
 800704a:	3304      	adds	r3, #4
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	4a26      	ldr	r2, [pc, #152]	; (80070ec <USB_EP0_OutStart+0xb8>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d90a      	bls.n	800706e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007068:	d101      	bne.n	800706e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	e037      	b.n	80070de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007074:	461a      	mov	r2, r3
 8007076:	2300      	movs	r3, #0
 8007078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800708c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709c:	f043 0318 	orr.w	r3, r3, #24
 80070a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d10f      	bne.n	80070dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80070da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	371c      	adds	r7, #28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	4f54300a 	.word	0x4f54300a

080070f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4a13      	ldr	r2, [pc, #76]	; (8007154 <USB_CoreReset+0x64>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d901      	bls.n	800710e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e01b      	b.n	8007146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	daf2      	bge.n	80070fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f043 0201 	orr.w	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4a09      	ldr	r2, [pc, #36]	; (8007154 <USB_CoreReset+0x64>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d901      	bls.n	8007138 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e006      	b.n	8007146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b01      	cmp	r3, #1
 8007142:	d0f0      	beq.n	8007126 <USB_CoreReset+0x36>

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	00030d40 	.word	0x00030d40

08007158 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007164:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007168:	f002 f990 	bl	800948c <USBD_static_malloc>
 800716c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d105      	bne.n	8007180 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800717c:	2302      	movs	r3, #2
 800717e:	e066      	b.n	800724e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7c1b      	ldrb	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d119      	bne.n	80071c4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007194:	2202      	movs	r2, #2
 8007196:	2181      	movs	r1, #129	; 0x81
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f002 f854 	bl	8009246 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071a8:	2202      	movs	r2, #2
 80071aa:	2101      	movs	r1, #1
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f002 f84a 	bl	8009246 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2210      	movs	r2, #16
 80071be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80071c2:	e016      	b.n	80071f2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071c4:	2340      	movs	r3, #64	; 0x40
 80071c6:	2202      	movs	r2, #2
 80071c8:	2181      	movs	r1, #129	; 0x81
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f002 f83b 	bl	8009246 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071d6:	2340      	movs	r3, #64	; 0x40
 80071d8:	2202      	movs	r2, #2
 80071da:	2101      	movs	r1, #1
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f002 f832 	bl	8009246 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2210      	movs	r2, #16
 80071ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071f2:	2308      	movs	r3, #8
 80071f4:	2203      	movs	r2, #3
 80071f6:	2182      	movs	r1, #130	; 0x82
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f002 f824 	bl	8009246 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	7c1b      	ldrb	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d109      	bne.n	800723c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800722e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007232:	2101      	movs	r1, #1
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f002 f8f5 	bl	8009424 <USBD_LL_PrepareReceive>
 800723a:	e007      	b.n	800724c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007242:	2340      	movs	r3, #64	; 0x40
 8007244:	2101      	movs	r1, #1
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f002 f8ec 	bl	8009424 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007262:	2181      	movs	r1, #129	; 0x81
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f002 f814 	bl	8009292 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007270:	2101      	movs	r1, #1
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f002 f80d 	bl	8009292 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007280:	2182      	movs	r1, #130	; 0x82
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f002 f805 	bl	8009292 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00e      	beq.n	80072c0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072b2:	4618      	mov	r0, r3
 80072b4:	f002 f8f8 	bl	80094a8 <USBD_static_free>
    pdev->pClassData = NULL;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e0af      	b.n	8007454 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d03f      	beq.n	8007380 <USBD_CDC_Setup+0xb4>
 8007300:	2b20      	cmp	r3, #32
 8007302:	f040 809f 	bne.w	8007444 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	88db      	ldrh	r3, [r3, #6]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d02e      	beq.n	800736c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b25b      	sxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	da16      	bge.n	8007346 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007324:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	88d2      	ldrh	r2, [r2, #6]
 800732a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	88db      	ldrh	r3, [r3, #6]
 8007330:	2b07      	cmp	r3, #7
 8007332:	bf28      	it	cs
 8007334:	2307      	movcs	r3, #7
 8007336:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	89fa      	ldrh	r2, [r7, #14]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fb19 	bl	8008976 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007344:	e085      	b.n	8007452 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785a      	ldrb	r2, [r3, #1]
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	88db      	ldrh	r3, [r3, #6]
 8007354:	b2da      	uxtb	r2, r3
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800735c:	6939      	ldr	r1, [r7, #16]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	88db      	ldrh	r3, [r3, #6]
 8007362:	461a      	mov	r2, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fb32 	bl	80089ce <USBD_CtlPrepareRx>
      break;
 800736a:	e072      	b.n	8007452 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	7850      	ldrb	r0, [r2, #1]
 8007378:	2200      	movs	r2, #0
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	4798      	blx	r3
      break;
 800737e:	e068      	b.n	8007452 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b0b      	cmp	r3, #11
 8007386:	d852      	bhi.n	800742e <USBD_CDC_Setup+0x162>
 8007388:	a201      	add	r2, pc, #4	; (adr r2, 8007390 <USBD_CDC_Setup+0xc4>)
 800738a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738e:	bf00      	nop
 8007390:	080073c1 	.word	0x080073c1
 8007394:	0800743d 	.word	0x0800743d
 8007398:	0800742f 	.word	0x0800742f
 800739c:	0800742f 	.word	0x0800742f
 80073a0:	0800742f 	.word	0x0800742f
 80073a4:	0800742f 	.word	0x0800742f
 80073a8:	0800742f 	.word	0x0800742f
 80073ac:	0800742f 	.word	0x0800742f
 80073b0:	0800742f 	.word	0x0800742f
 80073b4:	0800742f 	.word	0x0800742f
 80073b8:	080073eb 	.word	0x080073eb
 80073bc:	08007415 	.word	0x08007415
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d107      	bne.n	80073dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073cc:	f107 030a 	add.w	r3, r7, #10
 80073d0:	2202      	movs	r2, #2
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 face 	bl	8008976 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073da:	e032      	b.n	8007442 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f001 fa58 	bl	8008894 <USBD_CtlError>
            ret = USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	75fb      	strb	r3, [r7, #23]
          break;
 80073e8:	e02b      	b.n	8007442 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d107      	bne.n	8007406 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073f6:	f107 030d 	add.w	r3, r7, #13
 80073fa:	2201      	movs	r2, #1
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 fab9 	bl	8008976 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007404:	e01d      	b.n	8007442 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 fa43 	bl	8008894 <USBD_CtlError>
            ret = USBD_FAIL;
 800740e:	2303      	movs	r3, #3
 8007410:	75fb      	strb	r3, [r7, #23]
          break;
 8007412:	e016      	b.n	8007442 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b03      	cmp	r3, #3
 800741e:	d00f      	beq.n	8007440 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fa36 	bl	8008894 <USBD_CtlError>
            ret = USBD_FAIL;
 8007428:	2303      	movs	r3, #3
 800742a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800742c:	e008      	b.n	8007440 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f001 fa2f 	bl	8008894 <USBD_CtlError>
          ret = USBD_FAIL;
 8007436:	2303      	movs	r3, #3
 8007438:	75fb      	strb	r3, [r7, #23]
          break;
 800743a:	e002      	b.n	8007442 <USBD_CDC_Setup+0x176>
          break;
 800743c:	bf00      	nop
 800743e:	e008      	b.n	8007452 <USBD_CDC_Setup+0x186>
          break;
 8007440:	bf00      	nop
      }
      break;
 8007442:	e006      	b.n	8007452 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 fa24 	bl	8008894 <USBD_CtlError>
      ret = USBD_FAIL;
 800744c:	2303      	movs	r3, #3
 800744e:	75fb      	strb	r3, [r7, #23]
      break;
 8007450:	bf00      	nop
  }

  return (uint8_t)ret;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800746e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800747a:	2303      	movs	r3, #3
 800747c:	e04f      	b.n	800751e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007484:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	3318      	adds	r3, #24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d029      	beq.n	80074f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	3318      	adds	r3, #24
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	78f9      	ldrb	r1, [r7, #3]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	460b      	mov	r3, r1
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	1a5b      	subs	r3, r3, r1
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4403      	add	r3, r0
 80074bc:	3344      	adds	r3, #68	; 0x44
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80074c4:	fb03 f301 	mul.w	r3, r3, r1
 80074c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d110      	bne.n	80074f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80074ce:	78fa      	ldrb	r2, [r7, #3]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	3318      	adds	r3, #24
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074e2:	78f9      	ldrb	r1, [r7, #3]
 80074e4:	2300      	movs	r3, #0
 80074e6:	2200      	movs	r2, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 ff7a 	bl	80093e2 <USBD_LL_Transmit>
 80074ee:	e015      	b.n	800751c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007518:	78fa      	ldrb	r2, [r7, #3]
 800751a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	460b      	mov	r3, r1
 8007530:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007538:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	e015      	b.n	8007574 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 ff8a 	bl	8009466 <USBD_LL_GetRxDataSize>
 8007552:	4602      	mov	r2, r0
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800756e:	4611      	mov	r1, r2
 8007570:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800758a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	e01b      	b.n	80075ce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d015      	beq.n	80075cc <USBD_CDC_EP0_RxReady+0x50>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80075a6:	2bff      	cmp	r3, #255	; 0xff
 80075a8:	d010      	beq.n	80075cc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80075b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075c0:	b292      	uxth	r2, r2
 80075c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	22ff      	movs	r2, #255	; 0xff
 80075c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2243      	movs	r2, #67	; 0x43
 80075e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80075e6:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	20000098 	.word	0x20000098

080075f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2243      	movs	r2, #67	; 0x43
 8007604:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007606:	4b03      	ldr	r3, [pc, #12]	; (8007614 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr
 8007614:	20000054 	.word	0x20000054

08007618 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2243      	movs	r2, #67	; 0x43
 8007624:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007626:	4b03      	ldr	r3, [pc, #12]	; (8007634 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	200000dc 	.word	0x200000dc

08007638 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	220a      	movs	r2, #10
 8007644:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007646:	4b03      	ldr	r3, [pc, #12]	; (8007654 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20000010 	.word	0x20000010

08007658 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	e004      	b.n	8007676 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	60f8      	str	r0, [r7, #12]
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007694:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800769c:	2303      	movs	r3, #3
 800769e:	e008      	b.n	80076b2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e004      	b.n	80076e4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800770e:	2303      	movs	r3, #3
 8007710:	e01a      	b.n	8007748 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007718:	2b00      	cmp	r3, #0
 800771a:	d114      	bne.n	8007746 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2201      	movs	r2, #1
 8007720:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800773a:	2181      	movs	r1, #129	; 0x81
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f001 fe50 	bl	80093e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800775e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800776a:	2303      	movs	r3, #3
 800776c:	e016      	b.n	800779c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7c1b      	ldrb	r3, [r3, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800777c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007780:	2101      	movs	r1, #1
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 fe4e 	bl	8009424 <USBD_LL_PrepareReceive>
 8007788:	e007      	b.n	800779a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	2101      	movs	r1, #1
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 fe45 	bl	8009424 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e01f      	b.n	80077fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	79fa      	ldrb	r2, [r7, #7]
 80077ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f001 fcbd 	bl	8009170 <USBD_LL_Init>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3718      	adds	r7, #24
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007818:	2303      	movs	r3, #3
 800781a:	e016      	b.n	800784a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	f107 020e 	add.w	r2, r7, #14
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
 8007840:	4602      	mov	r2, r0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fcd8 	bl	8009210 <USBD_LL_Start>
 8007860:	4603      	mov	r3, r0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800788c:	2303      	movs	r3, #3
 800788e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	78fa      	ldrb	r2, [r7, #3]
 80078a4:	4611      	mov	r1, r2
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	78fa      	ldrb	r2, [r7, #3]
 80078d8:	4611      	mov	r1, r2
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
  }

  return USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 ff90 	bl	8008820 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800790e:	461a      	mov	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	2b02      	cmp	r3, #2
 8007922:	d01a      	beq.n	800795a <USBD_LL_SetupStage+0x72>
 8007924:	2b02      	cmp	r3, #2
 8007926:	d822      	bhi.n	800796e <USBD_LL_SetupStage+0x86>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <USBD_LL_SetupStage+0x4a>
 800792c:	2b01      	cmp	r3, #1
 800792e:	d00a      	beq.n	8007946 <USBD_LL_SetupStage+0x5e>
 8007930:	e01d      	b.n	800796e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa62 	bl	8007e04 <USBD_StdDevReq>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
      break;
 8007944:	e020      	b.n	8007988 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fac6 	bl	8007ee0 <USBD_StdItfReq>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
      break;
 8007958:	e016      	b.n	8007988 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fb05 	bl	8007f72 <USBD_StdEPReq>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
      break;
 800796c:	e00c      	b.n	8007988 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007974:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007978:	b2db      	uxtb	r3, r3
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 fca7 	bl	80092d0 <USBD_LL_StallEP>
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]
      break;
 8007986:	bf00      	nop
  }

  return ret;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b086      	sub	sp, #24
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	460b      	mov	r3, r1
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80079a0:	7afb      	ldrb	r3, [r7, #11]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d138      	bne.n	8007a18 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d14a      	bne.n	8007a4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d913      	bls.n	80079ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	1ad2      	subs	r2, r2, r3
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	4293      	cmp	r3, r2
 80079dc:	bf28      	it	cs
 80079de:	4613      	movcs	r3, r2
 80079e0:	461a      	mov	r2, r3
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f001 f80f 	bl	8008a08 <USBD_CtlContinueRx>
 80079ea:	e030      	b.n	8007a4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d10b      	bne.n	8007a10 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f001 f80a 	bl	8008a2a <USBD_CtlSendStatus>
 8007a16:	e01a      	b.n	8007a4e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d114      	bne.n	8007a4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00e      	beq.n	8007a4e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	7afa      	ldrb	r2, [r7, #11]
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	4798      	blx	r3
 8007a40:	4603      	mov	r3, r0
 8007a42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	e000      	b.n	8007a50 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	460b      	mov	r3, r1
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a66:	7afb      	ldrb	r3, [r7, #11]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d16b      	bne.n	8007b44 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3314      	adds	r3, #20
 8007a70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d156      	bne.n	8007b2a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	689a      	ldr	r2, [r3, #8]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d914      	bls.n	8007ab2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	1ad2      	subs	r2, r2, r3
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f000 ff84 	bl	80089ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f001 fcba 	bl	8009424 <USBD_LL_PrepareReceive>
 8007ab0:	e03b      	b.n	8007b2a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d11c      	bne.n	8007af8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d316      	bcc.n	8007af8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d20f      	bcs.n	8007af8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2100      	movs	r1, #0
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 ff65 	bl	80089ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aea:	2300      	movs	r3, #0
 8007aec:	2200      	movs	r2, #0
 8007aee:	2100      	movs	r1, #0
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f001 fc97 	bl	8009424 <USBD_LL_PrepareReceive>
 8007af6:	e018      	b.n	8007b2a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d10b      	bne.n	8007b1c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f001 fbd6 	bl	80092d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f000 ff93 	bl	8008a50 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d122      	bne.n	8007b7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff fe98 	bl	800786a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b42:	e01a      	b.n	8007b7a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d114      	bne.n	8007b7a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00e      	beq.n	8007b7a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	7afa      	ldrb	r2, [r7, #11]
 8007b66:	4611      	mov	r1, r2
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	4798      	blx	r3
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	e000      	b.n	8007b7c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d101      	bne.n	8007bb8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e02f      	b.n	8007c18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00f      	beq.n	8007be2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6852      	ldr	r2, [r2, #4]
 8007bda:	b2d2      	uxtb	r2, r2
 8007bdc:	4611      	mov	r1, r2
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007be2:	2340      	movs	r3, #64	; 0x40
 8007be4:	2200      	movs	r2, #0
 8007be6:	2100      	movs	r1, #0
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 fb2c 	bl	8009246 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2240      	movs	r2, #64	; 0x40
 8007bfa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bfe:	2340      	movs	r3, #64	; 0x40
 8007c00:	2200      	movs	r2, #0
 8007c02:	2180      	movs	r1, #128	; 0x80
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fb1e 	bl	8009246 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2240      	movs	r2, #64	; 0x40
 8007c14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2204      	movs	r2, #4
 8007c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b04      	cmp	r3, #4
 8007c7e:	d106      	bne.n	8007c8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e012      	b.n	8007cd8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d10b      	bne.n	8007cd6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e014      	b.n	8007d24 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d10d      	bne.n	8007d22 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	78fa      	ldrb	r2, [r7, #3]
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e014      	b.n	8007d70 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d10d      	bne.n	8007d6e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	78fa      	ldrb	r2, [r7, #3]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b082      	sub	sp, #8
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d009      	beq.n	8007dbc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6852      	ldr	r2, [r2, #4]
 8007db4:	b2d2      	uxtb	r2, r2
 8007db6:	4611      	mov	r1, r2
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
  }

  return USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b087      	sub	sp, #28
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007de4:	8a3b      	ldrh	r3, [r7, #16]
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	b21a      	sxth	r2, r3
 8007dea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	b21b      	sxth	r3, r3
 8007df2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007df4:	89fb      	ldrh	r3, [r7, #14]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
	...

08007e04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d005      	beq.n	8007e2a <USBD_StdDevReq+0x26>
 8007e1e:	2b40      	cmp	r3, #64	; 0x40
 8007e20:	d853      	bhi.n	8007eca <USBD_StdDevReq+0xc6>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <USBD_StdDevReq+0x3a>
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d14f      	bne.n	8007eca <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e3c:	e04a      	b.n	8007ed4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	d83b      	bhi.n	8007ebe <USBD_StdDevReq+0xba>
 8007e46:	a201      	add	r2, pc, #4	; (adr r2, 8007e4c <USBD_StdDevReq+0x48>)
 8007e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007eb5 	.word	0x08007eb5
 8007e54:	08007ebf 	.word	0x08007ebf
 8007e58:	08007eab 	.word	0x08007eab
 8007e5c:	08007ebf 	.word	0x08007ebf
 8007e60:	08007e7f 	.word	0x08007e7f
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007ebf 	.word	0x08007ebf
 8007e6c:	08007e97 	.word	0x08007e97
 8007e70:	08007e89 	.word	0x08007e89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9de 	bl	8008238 <USBD_GetDescriptor>
          break;
 8007e7c:	e024      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fb43 	bl	800850c <USBD_SetAddress>
          break;
 8007e86:	e01f      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fb82 	bl	8008594 <USBD_SetConfig>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]
          break;
 8007e94:	e018      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fc21 	bl	80086e0 <USBD_GetConfig>
          break;
 8007e9e:	e013      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fc52 	bl	800874c <USBD_GetStatus>
          break;
 8007ea8:	e00e      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fc81 	bl	80087b4 <USBD_SetFeature>
          break;
 8007eb2:	e009      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fc90 	bl	80087dc <USBD_ClrFeature>
          break;
 8007ebc:	e004      	b.n	8007ec8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fce7 	bl	8008894 <USBD_CtlError>
          break;
 8007ec6:	bf00      	nop
      }
      break;
 8007ec8:	e004      	b.n	8007ed4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fce1 	bl	8008894 <USBD_CtlError>
      break;
 8007ed2:	bf00      	nop
  }

  return ret;
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop

08007ee0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ef6:	2b40      	cmp	r3, #64	; 0x40
 8007ef8:	d005      	beq.n	8007f06 <USBD_StdItfReq+0x26>
 8007efa:	2b40      	cmp	r3, #64	; 0x40
 8007efc:	d82f      	bhi.n	8007f5e <USBD_StdItfReq+0x7e>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <USBD_StdItfReq+0x26>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d12b      	bne.n	8007f5e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d81d      	bhi.n	8007f50 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	889b      	ldrh	r3, [r3, #4]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d813      	bhi.n	8007f46 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	4798      	blx	r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	88db      	ldrh	r3, [r3, #6]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d110      	bne.n	8007f5a <USBD_StdItfReq+0x7a>
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10d      	bne.n	8007f5a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fd73 	bl	8008a2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f44:	e009      	b.n	8007f5a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fca3 	bl	8008894 <USBD_CtlError>
          break;
 8007f4e:	e004      	b.n	8007f5a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fc9e 	bl	8008894 <USBD_CtlError>
          break;
 8007f58:	e000      	b.n	8007f5c <USBD_StdItfReq+0x7c>
          break;
 8007f5a:	bf00      	nop
      }
      break;
 8007f5c:	e004      	b.n	8007f68 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fc97 	bl	8008894 <USBD_CtlError>
      break;
 8007f66:	bf00      	nop
  }

  return ret;
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	889b      	ldrh	r3, [r3, #4]
 8007f84:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d007      	beq.n	8007fa2 <USBD_StdEPReq+0x30>
 8007f92:	2b40      	cmp	r3, #64	; 0x40
 8007f94:	f200 8145 	bhi.w	8008222 <USBD_StdEPReq+0x2b0>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00c      	beq.n	8007fb6 <USBD_StdEPReq+0x44>
 8007f9c:	2b20      	cmp	r3, #32
 8007f9e:	f040 8140 	bne.w	8008222 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	4798      	blx	r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb4:	e13a      	b.n	800822c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d007      	beq.n	8007fce <USBD_StdEPReq+0x5c>
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	f300 8129 	bgt.w	8008216 <USBD_StdEPReq+0x2a4>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d07f      	beq.n	80080c8 <USBD_StdEPReq+0x156>
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d03c      	beq.n	8008046 <USBD_StdEPReq+0xd4>
 8007fcc:	e123      	b.n	8008216 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d002      	beq.n	8007fe0 <USBD_StdEPReq+0x6e>
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d016      	beq.n	800800c <USBD_StdEPReq+0x9a>
 8007fde:	e02c      	b.n	800803a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00d      	beq.n	8008002 <USBD_StdEPReq+0x90>
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b80      	cmp	r3, #128	; 0x80
 8007fea:	d00a      	beq.n	8008002 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 f96d 	bl	80092d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ff6:	2180      	movs	r1, #128	; 0x80
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f969 	bl	80092d0 <USBD_LL_StallEP>
 8007ffe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008000:	e020      	b.n	8008044 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fc45 	bl	8008894 <USBD_CtlError>
              break;
 800800a:	e01b      	b.n	8008044 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	885b      	ldrh	r3, [r3, #2]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10e      	bne.n	8008032 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <USBD_StdEPReq+0xc0>
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b80      	cmp	r3, #128	; 0x80
 800801e:	d008      	beq.n	8008032 <USBD_StdEPReq+0xc0>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	88db      	ldrh	r3, [r3, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d104      	bne.n	8008032 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008028:	7bbb      	ldrb	r3, [r7, #14]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f94f 	bl	80092d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fcf9 	bl	8008a2a <USBD_CtlSendStatus>

              break;
 8008038:	e004      	b.n	8008044 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fc29 	bl	8008894 <USBD_CtlError>
              break;
 8008042:	bf00      	nop
          }
          break;
 8008044:	e0ec      	b.n	8008220 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d002      	beq.n	8008058 <USBD_StdEPReq+0xe6>
 8008052:	2b03      	cmp	r3, #3
 8008054:	d016      	beq.n	8008084 <USBD_StdEPReq+0x112>
 8008056:	e030      	b.n	80080ba <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00d      	beq.n	800807a <USBD_StdEPReq+0x108>
 800805e:	7bbb      	ldrb	r3, [r7, #14]
 8008060:	2b80      	cmp	r3, #128	; 0x80
 8008062:	d00a      	beq.n	800807a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 f931 	bl	80092d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800806e:	2180      	movs	r1, #128	; 0x80
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f001 f92d 	bl	80092d0 <USBD_LL_StallEP>
 8008076:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008078:	e025      	b.n	80080c6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fc09 	bl	8008894 <USBD_CtlError>
              break;
 8008082:	e020      	b.n	80080c6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	885b      	ldrh	r3, [r3, #2]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11b      	bne.n	80080c4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008092:	2b00      	cmp	r3, #0
 8008094:	d004      	beq.n	80080a0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 f937 	bl	800930e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fcc2 	bl	8008a2a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4798      	blx	r3
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80080b8:	e004      	b.n	80080c4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fbe9 	bl	8008894 <USBD_CtlError>
              break;
 80080c2:	e000      	b.n	80080c6 <USBD_StdEPReq+0x154>
              break;
 80080c4:	bf00      	nop
          }
          break;
 80080c6:	e0ab      	b.n	8008220 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d002      	beq.n	80080da <USBD_StdEPReq+0x168>
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d032      	beq.n	800813e <USBD_StdEPReq+0x1cc>
 80080d8:	e097      	b.n	800820a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d007      	beq.n	80080f0 <USBD_StdEPReq+0x17e>
 80080e0:	7bbb      	ldrb	r3, [r7, #14]
 80080e2:	2b80      	cmp	r3, #128	; 0x80
 80080e4:	d004      	beq.n	80080f0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fbd3 	bl	8008894 <USBD_CtlError>
                break;
 80080ee:	e091      	b.n	8008214 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	da0b      	bge.n	8008110 <USBD_StdEPReq+0x19e>
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	3310      	adds	r3, #16
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	4413      	add	r3, r2
 800810c:	3304      	adds	r3, #4
 800810e:	e00b      	b.n	8008128 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008110:	7bbb      	ldrb	r3, [r7, #14]
 8008112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	4413      	add	r3, r2
 8008126:	3304      	adds	r3, #4
 8008128:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2202      	movs	r2, #2
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fc1d 	bl	8008976 <USBD_CtlSendData>
              break;
 800813c:	e06a      	b.n	8008214 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800813e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008142:	2b00      	cmp	r3, #0
 8008144:	da11      	bge.n	800816a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008146:	7bbb      	ldrb	r3, [r7, #14]
 8008148:	f003 020f 	and.w	r2, r3, #15
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	440b      	add	r3, r1
 8008158:	3324      	adds	r3, #36	; 0x24
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d117      	bne.n	8008190 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fb96 	bl	8008894 <USBD_CtlError>
                  break;
 8008168:	e054      	b.n	8008214 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	f003 020f 	and.w	r2, r3, #15
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	4613      	mov	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	440b      	add	r3, r1
 800817c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fb83 	bl	8008894 <USBD_CtlError>
                  break;
 800818e:	e041      	b.n	8008214 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008194:	2b00      	cmp	r3, #0
 8008196:	da0b      	bge.n	80081b0 <USBD_StdEPReq+0x23e>
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	3310      	adds	r3, #16
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	4413      	add	r3, r2
 80081ac:	3304      	adds	r3, #4
 80081ae:	e00b      	b.n	80081c8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	3304      	adds	r3, #4
 80081c8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d002      	beq.n	80081d6 <USBD_StdEPReq+0x264>
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b80      	cmp	r3, #128	; 0x80
 80081d4:	d103      	bne.n	80081de <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e00e      	b.n	80081fc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081de:	7bbb      	ldrb	r3, [r7, #14]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 f8b2 	bl	800934c <USBD_LL_IsStallEP>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2201      	movs	r2, #1
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e002      	b.n	80081fc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2202      	movs	r2, #2
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fbb7 	bl	8008976 <USBD_CtlSendData>
              break;
 8008208:	e004      	b.n	8008214 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 fb41 	bl	8008894 <USBD_CtlError>
              break;
 8008212:	bf00      	nop
          }
          break;
 8008214:	e004      	b.n	8008220 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008216:	6839      	ldr	r1, [r7, #0]
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fb3b 	bl	8008894 <USBD_CtlError>
          break;
 800821e:	bf00      	nop
      }
      break;
 8008220:	e004      	b.n	800822c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008222:	6839      	ldr	r1, [r7, #0]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 fb35 	bl	8008894 <USBD_CtlError>
      break;
 800822a:	bf00      	nop
  }

  return ret;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800824a:	2300      	movs	r3, #0
 800824c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	885b      	ldrh	r3, [r3, #2]
 8008252:	0a1b      	lsrs	r3, r3, #8
 8008254:	b29b      	uxth	r3, r3
 8008256:	3b01      	subs	r3, #1
 8008258:	2b06      	cmp	r3, #6
 800825a:	f200 8128 	bhi.w	80084ae <USBD_GetDescriptor+0x276>
 800825e:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <USBD_GetDescriptor+0x2c>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	08008281 	.word	0x08008281
 8008268:	08008299 	.word	0x08008299
 800826c:	080082d9 	.word	0x080082d9
 8008270:	080084af 	.word	0x080084af
 8008274:	080084af 	.word	0x080084af
 8008278:	0800844f 	.word	0x0800844f
 800827c:	0800847b 	.word	0x0800847b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	7c12      	ldrb	r2, [r2, #16]
 800828c:	f107 0108 	add.w	r1, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
 8008294:	60f8      	str	r0, [r7, #12]
      break;
 8008296:	e112      	b.n	80084be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	7c1b      	ldrb	r3, [r3, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10d      	bne.n	80082bc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	f107 0208 	add.w	r2, r7, #8
 80082ac:	4610      	mov	r0, r2
 80082ae:	4798      	blx	r3
 80082b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	3301      	adds	r3, #1
 80082b6:	2202      	movs	r2, #2
 80082b8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082ba:	e100      	b.n	80084be <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	f107 0208 	add.w	r2, r7, #8
 80082c8:	4610      	mov	r0, r2
 80082ca:	4798      	blx	r3
 80082cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3301      	adds	r3, #1
 80082d2:	2202      	movs	r2, #2
 80082d4:	701a      	strb	r2, [r3, #0]
      break;
 80082d6:	e0f2      	b.n	80084be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	885b      	ldrh	r3, [r3, #2]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b05      	cmp	r3, #5
 80082e0:	f200 80ac 	bhi.w	800843c <USBD_GetDescriptor+0x204>
 80082e4:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <USBD_GetDescriptor+0xb4>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	08008305 	.word	0x08008305
 80082f0:	08008339 	.word	0x08008339
 80082f4:	0800836d 	.word	0x0800836d
 80082f8:	080083a1 	.word	0x080083a1
 80082fc:	080083d5 	.word	0x080083d5
 8008300:	08008409 	.word	0x08008409
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	7c12      	ldrb	r2, [r2, #16]
 800831c:	f107 0108 	add.w	r1, r7, #8
 8008320:	4610      	mov	r0, r2
 8008322:	4798      	blx	r3
 8008324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008326:	e091      	b.n	800844c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fab2 	bl	8008894 <USBD_CtlError>
            err++;
 8008330:	7afb      	ldrb	r3, [r7, #11]
 8008332:	3301      	adds	r3, #1
 8008334:	72fb      	strb	r3, [r7, #11]
          break;
 8008336:	e089      	b.n	800844c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	7c12      	ldrb	r2, [r2, #16]
 8008350:	f107 0108 	add.w	r1, r7, #8
 8008354:	4610      	mov	r0, r2
 8008356:	4798      	blx	r3
 8008358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800835a:	e077      	b.n	800844c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa98 	bl	8008894 <USBD_CtlError>
            err++;
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	3301      	adds	r3, #1
 8008368:	72fb      	strb	r3, [r7, #11]
          break;
 800836a:	e06f      	b.n	800844c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	7c12      	ldrb	r2, [r2, #16]
 8008384:	f107 0108 	add.w	r1, r7, #8
 8008388:	4610      	mov	r0, r2
 800838a:	4798      	blx	r3
 800838c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800838e:	e05d      	b.n	800844c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fa7e 	bl	8008894 <USBD_CtlError>
            err++;
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	3301      	adds	r3, #1
 800839c:	72fb      	strb	r3, [r7, #11]
          break;
 800839e:	e055      	b.n	800844c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	7c12      	ldrb	r2, [r2, #16]
 80083b8:	f107 0108 	add.w	r1, r7, #8
 80083bc:	4610      	mov	r0, r2
 80083be:	4798      	blx	r3
 80083c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083c2:	e043      	b.n	800844c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa64 	bl	8008894 <USBD_CtlError>
            err++;
 80083cc:	7afb      	ldrb	r3, [r7, #11]
 80083ce:	3301      	adds	r3, #1
 80083d0:	72fb      	strb	r3, [r7, #11]
          break;
 80083d2:	e03b      	b.n	800844c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	7c12      	ldrb	r2, [r2, #16]
 80083ec:	f107 0108 	add.w	r1, r7, #8
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
 80083f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083f6:	e029      	b.n	800844c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fa4a 	bl	8008894 <USBD_CtlError>
            err++;
 8008400:	7afb      	ldrb	r3, [r7, #11]
 8008402:	3301      	adds	r3, #1
 8008404:	72fb      	strb	r3, [r7, #11]
          break;
 8008406:	e021      	b.n	800844c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00b      	beq.n	800842c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	7c12      	ldrb	r2, [r2, #16]
 8008420:	f107 0108 	add.w	r1, r7, #8
 8008424:	4610      	mov	r0, r2
 8008426:	4798      	blx	r3
 8008428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800842a:	e00f      	b.n	800844c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa30 	bl	8008894 <USBD_CtlError>
            err++;
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	3301      	adds	r3, #1
 8008438:	72fb      	strb	r3, [r7, #11]
          break;
 800843a:	e007      	b.n	800844c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fa28 	bl	8008894 <USBD_CtlError>
          err++;
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	3301      	adds	r3, #1
 8008448:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800844a:	bf00      	nop
      }
      break;
 800844c:	e037      	b.n	80084be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	7c1b      	ldrb	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d109      	bne.n	800846a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800845c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845e:	f107 0208 	add.w	r2, r7, #8
 8008462:	4610      	mov	r0, r2
 8008464:	4798      	blx	r3
 8008466:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008468:	e029      	b.n	80084be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fa11 	bl	8008894 <USBD_CtlError>
        err++;
 8008472:	7afb      	ldrb	r3, [r7, #11]
 8008474:	3301      	adds	r3, #1
 8008476:	72fb      	strb	r3, [r7, #11]
      break;
 8008478:	e021      	b.n	80084be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7c1b      	ldrb	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10d      	bne.n	800849e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	f107 0208 	add.w	r2, r7, #8
 800848e:	4610      	mov	r0, r2
 8008490:	4798      	blx	r3
 8008492:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	3301      	adds	r3, #1
 8008498:	2207      	movs	r2, #7
 800849a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800849c:	e00f      	b.n	80084be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f9f7 	bl	8008894 <USBD_CtlError>
        err++;
 80084a6:	7afb      	ldrb	r3, [r7, #11]
 80084a8:	3301      	adds	r3, #1
 80084aa:	72fb      	strb	r3, [r7, #11]
      break;
 80084ac:	e007      	b.n	80084be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f9ef 	bl	8008894 <USBD_CtlError>
      err++;
 80084b6:	7afb      	ldrb	r3, [r7, #11]
 80084b8:	3301      	adds	r3, #1
 80084ba:	72fb      	strb	r3, [r7, #11]
      break;
 80084bc:	bf00      	nop
  }

  if (err != 0U)
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d11e      	bne.n	8008502 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	88db      	ldrh	r3, [r3, #6]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d016      	beq.n	80084fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084cc:	893b      	ldrh	r3, [r7, #8]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00e      	beq.n	80084f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	88da      	ldrh	r2, [r3, #6]
 80084d6:	893b      	ldrh	r3, [r7, #8]
 80084d8:	4293      	cmp	r3, r2
 80084da:	bf28      	it	cs
 80084dc:	4613      	movcs	r3, r2
 80084de:	b29b      	uxth	r3, r3
 80084e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084e2:	893b      	ldrh	r3, [r7, #8]
 80084e4:	461a      	mov	r2, r3
 80084e6:	68f9      	ldr	r1, [r7, #12]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fa44 	bl	8008976 <USBD_CtlSendData>
 80084ee:	e009      	b.n	8008504 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f9ce 	bl	8008894 <USBD_CtlError>
 80084f8:	e004      	b.n	8008504 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fa95 	bl	8008a2a <USBD_CtlSendStatus>
 8008500:	e000      	b.n	8008504 <USBD_GetDescriptor+0x2cc>
    return;
 8008502:	bf00      	nop
  }
}
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop

0800850c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	889b      	ldrh	r3, [r3, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d131      	bne.n	8008582 <USBD_SetAddress+0x76>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	88db      	ldrh	r3, [r3, #6]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d12d      	bne.n	8008582 <USBD_SetAddress+0x76>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	885b      	ldrh	r3, [r3, #2]
 800852a:	2b7f      	cmp	r3, #127	; 0x7f
 800852c:	d829      	bhi.n	8008582 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	885b      	ldrh	r3, [r3, #2]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008538:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b03      	cmp	r3, #3
 8008544:	d104      	bne.n	8008550 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f9a3 	bl	8008894 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800854e:	e01d      	b.n	800858c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	7bfa      	ldrb	r2, [r7, #15]
 8008554:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 ff21 	bl	80093a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa61 	bl	8008a2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2202      	movs	r2, #2
 8008572:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008576:	e009      	b.n	800858c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008580:	e004      	b.n	800858c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f985 	bl	8008894 <USBD_CtlError>
  }
}
 800858a:	bf00      	nop
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	885b      	ldrh	r3, [r3, #2]
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	4b4c      	ldr	r3, [pc, #304]	; (80086dc <USBD_SetConfig+0x148>)
 80085aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80085ac:	4b4b      	ldr	r3, [pc, #300]	; (80086dc <USBD_SetConfig+0x148>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d905      	bls.n	80085c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f96c 	bl	8008894 <USBD_CtlError>
    return USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	e088      	b.n	80086d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d002      	beq.n	80085d2 <USBD_SetConfig+0x3e>
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d025      	beq.n	800861c <USBD_SetConfig+0x88>
 80085d0:	e071      	b.n	80086b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085d2:	4b42      	ldr	r3, [pc, #264]	; (80086dc <USBD_SetConfig+0x148>)
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d01c      	beq.n	8008614 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80085da:	4b40      	ldr	r3, [pc, #256]	; (80086dc <USBD_SetConfig+0x148>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085e4:	4b3d      	ldr	r3, [pc, #244]	; (80086dc <USBD_SetConfig+0x148>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff f948 	bl	8007880 <USBD_SetClassConfig>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d004      	beq.n	8008604 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f949 	bl	8008894 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008602:	e065      	b.n	80086d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa10 	bl	8008a2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2203      	movs	r2, #3
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008612:	e05d      	b.n	80086d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fa08 	bl	8008a2a <USBD_CtlSendStatus>
      break;
 800861a:	e059      	b.n	80086d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800861c:	4b2f      	ldr	r3, [pc, #188]	; (80086dc <USBD_SetConfig+0x148>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d112      	bne.n	800864a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800862c:	4b2b      	ldr	r3, [pc, #172]	; (80086dc <USBD_SetConfig+0x148>)
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008636:	4b29      	ldr	r3, [pc, #164]	; (80086dc <USBD_SetConfig+0x148>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff f93b 	bl	80078b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f9f1 	bl	8008a2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008648:	e042      	b.n	80086d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800864a:	4b24      	ldr	r3, [pc, #144]	; (80086dc <USBD_SetConfig+0x148>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	429a      	cmp	r2, r3
 8008656:	d02a      	beq.n	80086ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7ff f929 	bl	80078b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008666:	4b1d      	ldr	r3, [pc, #116]	; (80086dc <USBD_SetConfig+0x148>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008670:	4b1a      	ldr	r3, [pc, #104]	; (80086dc <USBD_SetConfig+0x148>)
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	4619      	mov	r1, r3
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f7ff f902 	bl	8007880 <USBD_SetClassConfig>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00f      	beq.n	80086a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f903 	bl	8008894 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff f90e 	bl	80078b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2202      	movs	r2, #2
 80086a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80086a4:	e014      	b.n	80086d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9bf 	bl	8008a2a <USBD_CtlSendStatus>
      break;
 80086ac:	e010      	b.n	80086d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f9bb 	bl	8008a2a <USBD_CtlSendStatus>
      break;
 80086b4:	e00c      	b.n	80086d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f8eb 	bl	8008894 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <USBD_SetConfig+0x148>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff f8f7 	bl	80078b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086ca:	2303      	movs	r3, #3
 80086cc:	73fb      	strb	r3, [r7, #15]
      break;
 80086ce:	bf00      	nop
  }

  return ret;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3710      	adds	r7, #16
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	200001a0 	.word	0x200001a0

080086e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88db      	ldrh	r3, [r3, #6]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d004      	beq.n	80086fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f8cd 	bl	8008894 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086fa:	e023      	b.n	8008744 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	dc02      	bgt.n	800870e <USBD_GetConfig+0x2e>
 8008708:	2b00      	cmp	r3, #0
 800870a:	dc03      	bgt.n	8008714 <USBD_GetConfig+0x34>
 800870c:	e015      	b.n	800873a <USBD_GetConfig+0x5a>
 800870e:	2b03      	cmp	r3, #3
 8008710:	d00b      	beq.n	800872a <USBD_GetConfig+0x4a>
 8008712:	e012      	b.n	800873a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3308      	adds	r3, #8
 800871e:	2201      	movs	r2, #1
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f927 	bl	8008976 <USBD_CtlSendData>
        break;
 8008728:	e00c      	b.n	8008744 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3304      	adds	r3, #4
 800872e:	2201      	movs	r2, #1
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f91f 	bl	8008976 <USBD_CtlSendData>
        break;
 8008738:	e004      	b.n	8008744 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f8a9 	bl	8008894 <USBD_CtlError>
        break;
 8008742:	bf00      	nop
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800875c:	b2db      	uxtb	r3, r3
 800875e:	3b01      	subs	r3, #1
 8008760:	2b02      	cmp	r3, #2
 8008762:	d81e      	bhi.n	80087a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	88db      	ldrh	r3, [r3, #6]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d004      	beq.n	8008776 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f890 	bl	8008894 <USBD_CtlError>
        break;
 8008774:	e01a      	b.n	80087ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f043 0202 	orr.w	r2, r3, #2
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	330c      	adds	r3, #12
 8008796:	2202      	movs	r2, #2
 8008798:	4619      	mov	r1, r3
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f8eb 	bl	8008976 <USBD_CtlSendData>
      break;
 80087a0:	e004      	b.n	80087ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f875 	bl	8008894 <USBD_CtlError>
      break;
 80087aa:	bf00      	nop
  }
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	885b      	ldrh	r3, [r3, #2]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d106      	bne.n	80087d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f92b 	bl	8008a2a <USBD_CtlSendStatus>
  }
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d80b      	bhi.n	800880c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	885b      	ldrh	r3, [r3, #2]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d10c      	bne.n	8008816 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f910 	bl	8008a2a <USBD_CtlSendStatus>
      }
      break;
 800880a:	e004      	b.n	8008816 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f840 	bl	8008894 <USBD_CtlError>
      break;
 8008814:	e000      	b.n	8008818 <USBD_ClrFeature+0x3c>
      break;
 8008816:	bf00      	nop
  }
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	781a      	ldrb	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3301      	adds	r3, #1
 8008848:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff fabb 	bl	8007dc6 <SWAPBYTE>
 8008850:	4603      	mov	r3, r0
 8008852:	461a      	mov	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7ff faae 	bl	8007dc6 <SWAPBYTE>
 800886a:	4603      	mov	r3, r0
 800886c:	461a      	mov	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3301      	adds	r3, #1
 8008876:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f7ff faa1 	bl	8007dc6 <SWAPBYTE>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	80da      	strh	r2, [r3, #6]
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800889e:	2180      	movs	r1, #128	; 0x80
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fd15 	bl	80092d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088a6:	2100      	movs	r1, #0
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fd11 	bl	80092d0 <USBD_LL_StallEP>
}
 80088ae:	bf00      	nop
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b086      	sub	sp, #24
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d036      	beq.n	800893a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088d0:	6938      	ldr	r0, [r7, #16]
 80088d2:	f000 f836 	bl	8008942 <USBD_GetLen>
 80088d6:	4603      	mov	r3, r0
 80088d8:	3301      	adds	r3, #1
 80088da:	b29b      	uxth	r3, r3
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	7812      	ldrb	r2, [r2, #0]
 80088ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	3301      	adds	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	4413      	add	r3, r2
 80088fc:	2203      	movs	r2, #3
 80088fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	3301      	adds	r3, #1
 8008904:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008906:	e013      	b.n	8008930 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4413      	add	r3, r2
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	7812      	ldrb	r2, [r2, #0]
 8008912:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	3301      	adds	r3, #1
 8008918:	613b      	str	r3, [r7, #16]
    idx++;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	3301      	adds	r3, #1
 800891e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	4413      	add	r3, r2
 8008926:	2200      	movs	r2, #0
 8008928:	701a      	strb	r2, [r3, #0]
    idx++;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	3301      	adds	r3, #1
 800892e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e7      	bne.n	8008908 <USBD_GetString+0x52>
 8008938:	e000      	b.n	800893c <USBD_GetString+0x86>
    return;
 800893a:	bf00      	nop
  }
}
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008942:	b480      	push	{r7}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008952:	e005      	b.n	8008960 <USBD_GetLen+0x1e>
  {
    len++;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	3301      	adds	r3, #1
 8008958:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	3301      	adds	r3, #1
 800895e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f5      	bne.n	8008954 <USBD_GetLen+0x12>
  }

  return len;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	60f8      	str	r0, [r7, #12]
 800897e:	60b9      	str	r1, [r7, #8]
 8008980:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2202      	movs	r2, #2
 8008986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	2100      	movs	r1, #0
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 fd20 	bl	80093e2 <USBD_LL_Transmit>

  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	2100      	movs	r1, #0
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fd0f 	bl	80093e2 <USBD_LL_Transmit>

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2203      	movs	r2, #3
 80089de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	2100      	movs	r1, #0
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fd13 	bl	8009424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fd02 	bl	8009424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2204      	movs	r2, #4
 8008a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2100      	movs	r1, #0
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fcce 	bl	80093e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2205      	movs	r2, #5
 8008a5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a60:	2300      	movs	r3, #0
 8008a62:	2200      	movs	r2, #0
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fcdc 	bl	8009424 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
	...

08008a78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	4913      	ldr	r1, [pc, #76]	; (8008acc <MX_USB_DEVICE_Init+0x54>)
 8008a80:	4813      	ldr	r0, [pc, #76]	; (8008ad0 <MX_USB_DEVICE_Init+0x58>)
 8008a82:	f7fe fe8f 	bl	80077a4 <USBD_Init>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a8c:	f7f8 f812 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a90:	4910      	ldr	r1, [pc, #64]	; (8008ad4 <MX_USB_DEVICE_Init+0x5c>)
 8008a92:	480f      	ldr	r0, [pc, #60]	; (8008ad0 <MX_USB_DEVICE_Init+0x58>)
 8008a94:	f7fe feb6 	bl	8007804 <USBD_RegisterClass>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a9e:	f7f8 f809 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008aa2:	490d      	ldr	r1, [pc, #52]	; (8008ad8 <MX_USB_DEVICE_Init+0x60>)
 8008aa4:	480a      	ldr	r0, [pc, #40]	; (8008ad0 <MX_USB_DEVICE_Init+0x58>)
 8008aa6:	f7fe fdd7 	bl	8007658 <USBD_CDC_RegisterInterface>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ab0:	f7f8 f800 	bl	8000ab4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ab4:	4806      	ldr	r0, [pc, #24]	; (8008ad0 <MX_USB_DEVICE_Init+0x58>)
 8008ab6:	f7fe fecc 	bl	8007852 <USBD_Start>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ac0:	f7f7 fff8 	bl	8000ab4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008ac4:	f7f9 ff28 	bl	8002918 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000134 	.word	0x20000134
 8008ad0:	20000480 	.word	0x20000480
 8008ad4:	2000001c 	.word	0x2000001c
 8008ad8:	20000120 	.word	0x20000120

08008adc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4905      	ldr	r1, [pc, #20]	; (8008af8 <CDC_Init_FS+0x1c>)
 8008ae4:	4805      	ldr	r0, [pc, #20]	; (8008afc <CDC_Init_FS+0x20>)
 8008ae6:	f7fe fdcc 	bl	8007682 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008aea:	4905      	ldr	r1, [pc, #20]	; (8008b00 <CDC_Init_FS+0x24>)
 8008aec:	4803      	ldr	r0, [pc, #12]	; (8008afc <CDC_Init_FS+0x20>)
 8008aee:	f7fe fde6 	bl	80076be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008af2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000f50 	.word	0x20000f50
 8008afc:	20000480 	.word	0x20000480
 8008b00:	20000750 	.word	0x20000750

08008b04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	6039      	str	r1, [r7, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
 8008b20:	4613      	mov	r3, r2
 8008b22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	2b23      	cmp	r3, #35	; 0x23
 8008b28:	d84a      	bhi.n	8008bc0 <CDC_Control_FS+0xac>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <CDC_Control_FS+0x1c>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008bc1 	.word	0x08008bc1
 8008b34:	08008bc1 	.word	0x08008bc1
 8008b38:	08008bc1 	.word	0x08008bc1
 8008b3c:	08008bc1 	.word	0x08008bc1
 8008b40:	08008bc1 	.word	0x08008bc1
 8008b44:	08008bc1 	.word	0x08008bc1
 8008b48:	08008bc1 	.word	0x08008bc1
 8008b4c:	08008bc1 	.word	0x08008bc1
 8008b50:	08008bc1 	.word	0x08008bc1
 8008b54:	08008bc1 	.word	0x08008bc1
 8008b58:	08008bc1 	.word	0x08008bc1
 8008b5c:	08008bc1 	.word	0x08008bc1
 8008b60:	08008bc1 	.word	0x08008bc1
 8008b64:	08008bc1 	.word	0x08008bc1
 8008b68:	08008bc1 	.word	0x08008bc1
 8008b6c:	08008bc1 	.word	0x08008bc1
 8008b70:	08008bc1 	.word	0x08008bc1
 8008b74:	08008bc1 	.word	0x08008bc1
 8008b78:	08008bc1 	.word	0x08008bc1
 8008b7c:	08008bc1 	.word	0x08008bc1
 8008b80:	08008bc1 	.word	0x08008bc1
 8008b84:	08008bc1 	.word	0x08008bc1
 8008b88:	08008bc1 	.word	0x08008bc1
 8008b8c:	08008bc1 	.word	0x08008bc1
 8008b90:	08008bc1 	.word	0x08008bc1
 8008b94:	08008bc1 	.word	0x08008bc1
 8008b98:	08008bc1 	.word	0x08008bc1
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc1 	.word	0x08008bc1
 8008ba4:	08008bc1 	.word	0x08008bc1
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bc1 	.word	0x08008bc1
 8008bb0:	08008bc1 	.word	0x08008bc1
 8008bb4:	08008bc1 	.word	0x08008bc1
 8008bb8:	08008bc1 	.word	0x08008bc1
 8008bbc:	08008bc1 	.word	0x08008bc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bc0:	bf00      	nop
  }

  return (USBD_OK);
 8008bc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	4805      	ldr	r0, [pc, #20]	; (8008bf4 <CDC_Receive_FS+0x24>)
 8008bde:	f7fe fd6e 	bl	80076be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008be2:	4804      	ldr	r0, [pc, #16]	; (8008bf4 <CDC_Receive_FS+0x24>)
 8008be4:	f7fe fdb4 	bl	8007750 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008be8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000480 	.word	0x20000480

08008bf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e00b      	b.n	8008c36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	4806      	ldr	r0, [pc, #24]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c26:	f7fe fd2c 	bl	8007682 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c2a:	4805      	ldr	r0, [pc, #20]	; (8008c40 <CDC_Transmit_FS+0x48>)
 8008c2c:	f7fe fd60 	bl	80076f0 <USBD_CDC_TransmitPacket>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000480 	.word	0x20000480

08008c44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
	...

08008c68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2212      	movs	r2, #18
 8008c78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c7a:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20000150 	.word	0x20000150

08008c8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c9e:	4b03      	ldr	r3, [pc, #12]	; (8008cac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	20000164 	.word	0x20000164

08008cb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d105      	bne.n	8008cce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cc2:	683a      	ldr	r2, [r7, #0]
 8008cc4:	4907      	ldr	r1, [pc, #28]	; (8008ce4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cc6:	4808      	ldr	r0, [pc, #32]	; (8008ce8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cc8:	f7ff fdf5 	bl	80088b6 <USBD_GetString>
 8008ccc:	e004      	b.n	8008cd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	4904      	ldr	r1, [pc, #16]	; (8008ce4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cd2:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cd4:	f7ff fdef 	bl	80088b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cd8:	4b02      	ldr	r3, [pc, #8]	; (8008ce4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20001750 	.word	0x20001750
 8008ce8:	08009584 	.word	0x08009584

08008cec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	4904      	ldr	r1, [pc, #16]	; (8008d0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008cfc:	4804      	ldr	r0, [pc, #16]	; (8008d10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cfe:	f7ff fdda 	bl	80088b6 <USBD_GetString>
  return USBD_StrDesc;
 8008d02:	4b02      	ldr	r3, [pc, #8]	; (8008d0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20001750 	.word	0x20001750
 8008d10:	0800959c 	.word	0x0800959c

08008d14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	6039      	str	r1, [r7, #0]
 8008d1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	221a      	movs	r2, #26
 8008d24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d26:	f000 f843 	bl	8008db0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d2a:	4b02      	ldr	r3, [pc, #8]	; (8008d34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}
 8008d34:	20000168 	.word	0x20000168

08008d38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d4a:	683a      	ldr	r2, [r7, #0]
 8008d4c:	4907      	ldr	r1, [pc, #28]	; (8008d6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d4e:	4808      	ldr	r0, [pc, #32]	; (8008d70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d50:	f7ff fdb1 	bl	80088b6 <USBD_GetString>
 8008d54:	e004      	b.n	8008d60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	4904      	ldr	r1, [pc, #16]	; (8008d6c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d5a:	4805      	ldr	r0, [pc, #20]	; (8008d70 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d5c:	f7ff fdab 	bl	80088b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20001750 	.word	0x20001750
 8008d70:	080095b0 	.word	0x080095b0

08008d74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	6039      	str	r1, [r7, #0]
 8008d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d105      	bne.n	8008d92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	4907      	ldr	r1, [pc, #28]	; (8008da8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d8a:	4808      	ldr	r0, [pc, #32]	; (8008dac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d8c:	f7ff fd93 	bl	80088b6 <USBD_GetString>
 8008d90:	e004      	b.n	8008d9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4904      	ldr	r1, [pc, #16]	; (8008da8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d96:	4805      	ldr	r0, [pc, #20]	; (8008dac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d98:	f7ff fd8d 	bl	80088b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d9c:	4b02      	ldr	r3, [pc, #8]	; (8008da8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20001750 	.word	0x20001750
 8008dac:	080095bc 	.word	0x080095bc

08008db0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <Get_SerialNum+0x44>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <Get_SerialNum+0x48>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dc2:	4b0e      	ldr	r3, [pc, #56]	; (8008dfc <Get_SerialNum+0x4c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4413      	add	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	4909      	ldr	r1, [pc, #36]	; (8008e00 <Get_SerialNum+0x50>)
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 f814 	bl	8008e08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008de0:	2204      	movs	r2, #4
 8008de2:	4908      	ldr	r1, [pc, #32]	; (8008e04 <Get_SerialNum+0x54>)
 8008de4:	68b8      	ldr	r0, [r7, #8]
 8008de6:	f000 f80f 	bl	8008e08 <IntToUnicode>
  }
}
 8008dea:	bf00      	nop
 8008dec:	3710      	adds	r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	1ff1e800 	.word	0x1ff1e800
 8008df8:	1ff1e804 	.word	0x1ff1e804
 8008dfc:	1ff1e808 	.word	0x1ff1e808
 8008e00:	2000016a 	.word	0x2000016a
 8008e04:	2000017a 	.word	0x2000017a

08008e08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b087      	sub	sp, #28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4613      	mov	r3, r2
 8008e14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]
 8008e1e:	e027      	b.n	8008e70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	0f1b      	lsrs	r3, r3, #28
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	d80b      	bhi.n	8008e40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	0f1b      	lsrs	r3, r3, #28
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4619      	mov	r1, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	440b      	add	r3, r1
 8008e38:	3230      	adds	r2, #48	; 0x30
 8008e3a:	b2d2      	uxtb	r2, r2
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e00a      	b.n	8008e56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	0f1b      	lsrs	r3, r3, #28
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	440b      	add	r3, r1
 8008e50:	3237      	adds	r2, #55	; 0x37
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	3301      	adds	r3, #1
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	4413      	add	r3, r2
 8008e66:	2200      	movs	r2, #0
 8008e68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	75fb      	strb	r3, [r7, #23]
 8008e70:	7dfa      	ldrb	r2, [r7, #23]
 8008e72:	79fb      	ldrb	r3, [r7, #7]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d3d3      	bcc.n	8008e20 <IntToUnicode+0x18>
  }
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
	...

08008e88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b0b8      	sub	sp, #224	; 0xe0
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	609a      	str	r2, [r3, #8]
 8008e9c:	60da      	str	r2, [r3, #12]
 8008e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ea0:	f107 0310 	add.w	r3, r7, #16
 8008ea4:	22bc      	movs	r2, #188	; 0xbc
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fb57 	bl	800955c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a33      	ldr	r2, [pc, #204]	; (8008f80 <HAL_PCD_MspInit+0xf8>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d15e      	bne.n	8008f76 <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008eb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ebc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008ebe:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8008ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ec6:	f107 0310 	add.w	r3, r7, #16
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fa fd0e 	bl	80038ec <HAL_RCCEx_PeriphCLKConfig>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8008ed6:	f7f7 fded 	bl	8000ab4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008eda:	f7f9 fd1d 	bl	8002918 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ede:	4b29      	ldr	r3, [pc, #164]	; (8008f84 <HAL_PCD_MspInit+0xfc>)
 8008ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ee4:	4a27      	ldr	r2, [pc, #156]	; (8008f84 <HAL_PCD_MspInit+0xfc>)
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008eee:	4b25      	ldr	r3, [pc, #148]	; (8008f84 <HAL_PCD_MspInit+0xfc>)
 8008ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ef4:	f003 0301 	and.w	r3, r3, #1
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8008efc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f04:	2302      	movs	r3, #2
 8008f06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f10:	2300      	movs	r3, #0
 8008f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008f16:	230a      	movs	r3, #10
 8008f18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008f20:	4619      	mov	r1, r3
 8008f22:	4819      	ldr	r0, [pc, #100]	; (8008f88 <HAL_PCD_MspInit+0x100>)
 8008f24:	f7f8 f91a 	bl	800115c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f30:	2300      	movs	r3, #0
 8008f32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008f40:	4619      	mov	r1, r3
 8008f42:	4811      	ldr	r0, [pc, #68]	; (8008f88 <HAL_PCD_MspInit+0x100>)
 8008f44:	f7f8 f90a 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f48:	4b0e      	ldr	r3, [pc, #56]	; (8008f84 <HAL_PCD_MspInit+0xfc>)
 8008f4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f4e:	4a0d      	ldr	r2, [pc, #52]	; (8008f84 <HAL_PCD_MspInit+0xfc>)
 8008f50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <HAL_PCD_MspInit+0xfc>)
 8008f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f62:	60bb      	str	r3, [r7, #8]
 8008f64:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f66:	2200      	movs	r2, #0
 8008f68:	2100      	movs	r1, #0
 8008f6a:	2065      	movs	r0, #101	; 0x65
 8008f6c:	f7f8 f8c1 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f70:	2065      	movs	r0, #101	; 0x65
 8008f72:	f7f8 f8d8 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f76:	bf00      	nop
 8008f78:	37e0      	adds	r7, #224	; 0xe0
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	40080000 	.word	0x40080000
 8008f84:	58024400 	.word	0x58024400
 8008f88:	58020000 	.word	0x58020000

08008f8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	f7fe fca0 	bl	80078e8 <USBD_LL_SetupStage>
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008fc2:	78fa      	ldrb	r2, [r7, #3]
 8008fc4:	6879      	ldr	r1, [r7, #4]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	00db      	lsls	r3, r3, #3
 8008fca:	1a9b      	subs	r3, r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	440b      	add	r3, r1
 8008fd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	78fb      	ldrb	r3, [r7, #3]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	f7fe fcda 	bl	8007992 <USBD_LL_DataOutStage>
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b082      	sub	sp, #8
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ff8:	78fa      	ldrb	r2, [r7, #3]
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	00db      	lsls	r3, r3, #3
 8009000:	1a9b      	subs	r3, r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	440b      	add	r3, r1
 8009006:	3348      	adds	r3, #72	; 0x48
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	4619      	mov	r1, r3
 800900e:	f7fe fd23 	bl	8007a58 <USBD_LL_DataInStage>
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe fe37 	bl	8007c9c <USBD_LL_SOF>
}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800903e:	2301      	movs	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800904a:	2300      	movs	r3, #0
 800904c:	73fb      	strb	r3, [r7, #15]
 800904e:	e008      	b.n	8009062 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d102      	bne.n	800905e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009058:	2301      	movs	r3, #1
 800905a:	73fb      	strb	r3, [r7, #15]
 800905c:	e001      	b.n	8009062 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800905e:	f7f7 fd29 	bl	8000ab4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009068:	7bfa      	ldrb	r2, [r7, #15]
 800906a:	4611      	mov	r1, r2
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe fdd7 	bl	8007c20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009078:	4618      	mov	r0, r3
 800907a:	f7fe fd83 	bl	8007b84 <USBD_LL_Reset>
}
 800907e:	bf00      	nop
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe fdd2 	bl	8007c40 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	6812      	ldr	r2, [r2, #0]
 80090aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090ae:	f043 0301 	orr.w	r3, r3, #1
 80090b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090bc:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <HAL_PCD_SuspendCallback+0x48>)
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	4a03      	ldr	r2, [pc, #12]	; (80090d0 <HAL_PCD_SuspendCallback+0x48>)
 80090c2:	f043 0306 	orr.w	r3, r3, #6
 80090c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	e000ed00 	.word	0xe000ed00

080090d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fdc2 	bl	8007c6c <USBD_LL_Resume>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fe10 	bl	8007d2c <USBD_LL_IsoOUTIncomplete>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fdd8 	bl	8007ce0 <USBD_LL_IsoINIncomplete>
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009146:	4618      	mov	r0, r3
 8009148:	f7fe fe16 	bl	8007d78 <USBD_LL_DevConnected>
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe fe13 	bl	8007d8e <USBD_LL_DevDisconnected>
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d13e      	bne.n	80091fe <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009180:	4a21      	ldr	r2, [pc, #132]	; (8009208 <USBD_LL_Init+0x98>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a1f      	ldr	r2, [pc, #124]	; (8009208 <USBD_LL_Init+0x98>)
 800918c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009190:	4b1d      	ldr	r3, [pc, #116]	; (8009208 <USBD_LL_Init+0x98>)
 8009192:	4a1e      	ldr	r2, [pc, #120]	; (800920c <USBD_LL_Init+0x9c>)
 8009194:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009196:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <USBD_LL_Init+0x98>)
 8009198:	2209      	movs	r2, #9
 800919a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800919c:	4b1a      	ldr	r3, [pc, #104]	; (8009208 <USBD_LL_Init+0x98>)
 800919e:	2202      	movs	r2, #2
 80091a0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091a2:	4b19      	ldr	r3, [pc, #100]	; (8009208 <USBD_LL_Init+0x98>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091a8:	4b17      	ldr	r3, [pc, #92]	; (8009208 <USBD_LL_Init+0x98>)
 80091aa:	2202      	movs	r2, #2
 80091ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091ae:	4b16      	ldr	r3, [pc, #88]	; (8009208 <USBD_LL_Init+0x98>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091b4:	4b14      	ldr	r3, [pc, #80]	; (8009208 <USBD_LL_Init+0x98>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091ba:	4b13      	ldr	r3, [pc, #76]	; (8009208 <USBD_LL_Init+0x98>)
 80091bc:	2200      	movs	r2, #0
 80091be:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80091c0:	4b11      	ldr	r3, [pc, #68]	; (8009208 <USBD_LL_Init+0x98>)
 80091c2:	2201      	movs	r2, #1
 80091c4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80091c6:	4b10      	ldr	r3, [pc, #64]	; (8009208 <USBD_LL_Init+0x98>)
 80091c8:	2201      	movs	r2, #1
 80091ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091cc:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <USBD_LL_Init+0x98>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091d2:	480d      	ldr	r0, [pc, #52]	; (8009208 <USBD_LL_Init+0x98>)
 80091d4:	f7f8 f98b 	bl	80014ee <HAL_PCD_Init>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80091de:	f7f7 fc69 	bl	8000ab4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091e2:	2180      	movs	r1, #128	; 0x80
 80091e4:	4808      	ldr	r0, [pc, #32]	; (8009208 <USBD_LL_Init+0x98>)
 80091e6:	f7f9 fb1c 	bl	8002822 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091ea:	2240      	movs	r2, #64	; 0x40
 80091ec:	2100      	movs	r1, #0
 80091ee:	4806      	ldr	r0, [pc, #24]	; (8009208 <USBD_LL_Init+0x98>)
 80091f0:	f7f9 fad0 	bl	8002794 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091f4:	2280      	movs	r2, #128	; 0x80
 80091f6:	2101      	movs	r1, #1
 80091f8:	4803      	ldr	r0, [pc, #12]	; (8009208 <USBD_LL_Init+0x98>)
 80091fa:	f7f9 facb 	bl	8002794 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20001950 	.word	0x20001950
 800920c:	40080000 	.word	0x40080000

08009210 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800921c:	2300      	movs	r3, #0
 800921e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009226:	4618      	mov	r0, r3
 8009228:	f7f8 fa85 	bl	8001736 <HAL_PCD_Start>
 800922c:	4603      	mov	r3, r0
 800922e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009230:	7bfb      	ldrb	r3, [r7, #15]
 8009232:	4618      	mov	r0, r3
 8009234:	f000 f942 	bl	80094bc <USBD_Get_USB_Status>
 8009238:	4603      	mov	r3, r0
 800923a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800923c:	7bbb      	ldrb	r3, [r7, #14]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b084      	sub	sp, #16
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	4608      	mov	r0, r1
 8009250:	4611      	mov	r1, r2
 8009252:	461a      	mov	r2, r3
 8009254:	4603      	mov	r3, r0
 8009256:	70fb      	strb	r3, [r7, #3]
 8009258:	460b      	mov	r3, r1
 800925a:	70bb      	strb	r3, [r7, #2]
 800925c:	4613      	mov	r3, r2
 800925e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800926e:	78bb      	ldrb	r3, [r7, #2]
 8009270:	883a      	ldrh	r2, [r7, #0]
 8009272:	78f9      	ldrb	r1, [r7, #3]
 8009274:	f7f8 fe96 	bl	8001fa4 <HAL_PCD_EP_Open>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f91c 	bl	80094bc <USBD_Get_USB_Status>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009288:	7bbb      	ldrb	r3, [r7, #14]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ac:	78fa      	ldrb	r2, [r7, #3]
 80092ae:	4611      	mov	r1, r2
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7f8 fedf 	bl	8002074 <HAL_PCD_EP_Close>
 80092b6:	4603      	mov	r3, r0
 80092b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 f8fd 	bl	80094bc <USBD_Get_USB_Status>
 80092c2:	4603      	mov	r3, r0
 80092c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	460b      	mov	r3, r1
 80092da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092dc:	2300      	movs	r3, #0
 80092de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ea:	78fa      	ldrb	r2, [r7, #3]
 80092ec:	4611      	mov	r1, r2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7f8 ffb7 	bl	8002262 <HAL_PCD_EP_SetStall>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f8de 	bl	80094bc <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009304:	7bbb      	ldrb	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009328:	78fa      	ldrb	r2, [r7, #3]
 800932a:	4611      	mov	r1, r2
 800932c:	4618      	mov	r0, r3
 800932e:	f7f8 fffc 	bl	800232a <HAL_PCD_EP_ClrStall>
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 f8bf 	bl	80094bc <USBD_Get_USB_Status>
 800933e:	4603      	mov	r3, r0
 8009340:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009342:	7bbb      	ldrb	r3, [r7, #14]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800935e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009364:	2b00      	cmp	r3, #0
 8009366:	da0b      	bge.n	8009380 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	4613      	mov	r3, r2
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	1a9b      	subs	r3, r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	333e      	adds	r3, #62	; 0x3e
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	e00b      	b.n	8009398 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009386:	68f9      	ldr	r1, [r7, #12]
 8009388:	4613      	mov	r3, r2
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	440b      	add	r3, r1
 8009392:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009396:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b0:	2300      	movs	r3, #0
 80093b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	4611      	mov	r1, r2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7f8 fdc9 	bl	8001f5a <HAL_PCD_SetAddress>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f874 	bl	80094bc <USBD_Get_USB_Status>
 80093d4:	4603      	mov	r3, r0
 80093d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	460b      	mov	r3, r1
 80093f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009400:	7af9      	ldrb	r1, [r7, #11]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	f7f8 fee2 	bl	80021ce <HAL_PCD_EP_Transmit>
 800940a:	4603      	mov	r3, r0
 800940c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	4618      	mov	r0, r3
 8009412:	f000 f853 	bl	80094bc <USBD_Get_USB_Status>
 8009416:	4603      	mov	r3, r0
 8009418:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800941a:	7dbb      	ldrb	r3, [r7, #22]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	607a      	str	r2, [r7, #4]
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	460b      	mov	r3, r1
 8009432:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009442:	7af9      	ldrb	r1, [r7, #11]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	f7f8 fe5e 	bl	8002108 <HAL_PCD_EP_Receive>
 800944c:	4603      	mov	r3, r0
 800944e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	4618      	mov	r0, r3
 8009454:	f000 f832 	bl	80094bc <USBD_Get_USB_Status>
 8009458:	4603      	mov	r3, r0
 800945a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800945c:	7dbb      	ldrb	r3, [r7, #22]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009478:	78fa      	ldrb	r2, [r7, #3]
 800947a:	4611      	mov	r1, r2
 800947c:	4618      	mov	r0, r3
 800947e:	f7f8 fe8e 	bl	800219e <HAL_PCD_EP_GetRxCount>
 8009482:	4603      	mov	r3, r0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009494:	4b03      	ldr	r3, [pc, #12]	; (80094a4 <USBD_static_malloc+0x18>)
}
 8009496:	4618      	mov	r0, r3
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	200001a4 	.word	0x200001a4

080094a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]

}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	d817      	bhi.n	8009500 <USBD_Get_USB_Status+0x44>
 80094d0:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <USBD_Get_USB_Status+0x1c>)
 80094d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d6:	bf00      	nop
 80094d8:	080094e9 	.word	0x080094e9
 80094dc:	080094ef 	.word	0x080094ef
 80094e0:	080094f5 	.word	0x080094f5
 80094e4:	080094fb 	.word	0x080094fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]
    break;
 80094ec:	e00b      	b.n	8009506 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094ee:	2303      	movs	r3, #3
 80094f0:	73fb      	strb	r3, [r7, #15]
    break;
 80094f2:	e008      	b.n	8009506 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094f4:	2301      	movs	r3, #1
 80094f6:	73fb      	strb	r3, [r7, #15]
    break;
 80094f8:	e005      	b.n	8009506 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094fa:	2303      	movs	r3, #3
 80094fc:	73fb      	strb	r3, [r7, #15]
    break;
 80094fe:	e002      	b.n	8009506 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009500:	2303      	movs	r3, #3
 8009502:	73fb      	strb	r3, [r7, #15]
    break;
 8009504:	bf00      	nop
  }
  return usb_status;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <__libc_init_array>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	4d0d      	ldr	r5, [pc, #52]	; (800954c <__libc_init_array+0x38>)
 8009518:	4c0d      	ldr	r4, [pc, #52]	; (8009550 <__libc_init_array+0x3c>)
 800951a:	1b64      	subs	r4, r4, r5
 800951c:	10a4      	asrs	r4, r4, #2
 800951e:	2600      	movs	r6, #0
 8009520:	42a6      	cmp	r6, r4
 8009522:	d109      	bne.n	8009538 <__libc_init_array+0x24>
 8009524:	4d0b      	ldr	r5, [pc, #44]	; (8009554 <__libc_init_array+0x40>)
 8009526:	4c0c      	ldr	r4, [pc, #48]	; (8009558 <__libc_init_array+0x44>)
 8009528:	f000 f820 	bl	800956c <_init>
 800952c:	1b64      	subs	r4, r4, r5
 800952e:	10a4      	asrs	r4, r4, #2
 8009530:	2600      	movs	r6, #0
 8009532:	42a6      	cmp	r6, r4
 8009534:	d105      	bne.n	8009542 <__libc_init_array+0x2e>
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	f855 3b04 	ldr.w	r3, [r5], #4
 800953c:	4798      	blx	r3
 800953e:	3601      	adds	r6, #1
 8009540:	e7ee      	b.n	8009520 <__libc_init_array+0xc>
 8009542:	f855 3b04 	ldr.w	r3, [r5], #4
 8009546:	4798      	blx	r3
 8009548:	3601      	adds	r6, #1
 800954a:	e7f2      	b.n	8009532 <__libc_init_array+0x1e>
 800954c:	080095dc 	.word	0x080095dc
 8009550:	080095dc 	.word	0x080095dc
 8009554:	080095dc 	.word	0x080095dc
 8009558:	080095e0 	.word	0x080095e0

0800955c <memset>:
 800955c:	4402      	add	r2, r0
 800955e:	4603      	mov	r3, r0
 8009560:	4293      	cmp	r3, r2
 8009562:	d100      	bne.n	8009566 <memset+0xa>
 8009564:	4770      	bx	lr
 8009566:	f803 1b01 	strb.w	r1, [r3], #1
 800956a:	e7f9      	b.n	8009560 <memset+0x4>

0800956c <_init>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr

08009578 <_fini>:
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	bf00      	nop
 800957c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957e:	bc08      	pop	{r3}
 8009580:	469e      	mov	lr, r3
 8009582:	4770      	bx	lr
