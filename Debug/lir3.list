
lir3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092d8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080095cc  080095cc  000195cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000184  20000000  080095d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001bd4  20000184  08009754  00020184  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001d58  08009754  00021d58  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  9 .debug_info   000296d2  00000000  00000000  000201b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000046d8  00000000  00000000  00049884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000013f0  00000000  00000000  0004df60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001268  00000000  00000000  0004f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039684  00000000  00000000  000505b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00019acd  00000000  00000000  00089c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015d6ea  00000000  00000000  000a3709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00200df3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000052b4  00000000  00000000  00200e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000184 	.word	0x20000184
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009558 	.word	0x08009558

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000188 	.word	0x20000188
 80002d4:	08009558 	.word	0x08009558

080002d8 <lirPulse>:
#include "lirh743zi.h"

void lirPulse(TIM_HandleTypeDef *htim, GPIO_TypeDef* GPIO_Data, uint16_t GPIO_Data_Pin, GPIO_TypeDef* GPIO_Clck, uint16_t GPIO_Clck_Pin){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	4613      	mov	r3, r2
 80002e6:	80fb      	strh	r3, [r7, #6]
	if (PULSE_COUNT<MAX_PULSE_COUNT){
 80002e8:	4b4b      	ldr	r3, [pc, #300]	; (8000418 <lirPulse+0x140>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b4b      	ldr	r3, [pc, #300]	; (800041c <lirPulse+0x144>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d233      	bcs.n	800035e <lirPulse+0x86>
//		генерация клоков
		 GPIO_Clck->ODR ^= (0x1UL << (GPIO_Clck_Pin)); // PG2(CLCK)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	695a      	ldr	r2, [r3, #20]
 80002fa:	8b3b      	ldrh	r3, [r7, #24]
 80002fc:	2101      	movs	r1, #1
 80002fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000302:	405a      	eors	r2, r3
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	615a      	str	r2, [r3, #20]
		 PULSE_COUNT++;
 8000308:	4b43      	ldr	r3, [pc, #268]	; (8000418 <lirPulse+0x140>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	3301      	adds	r3, #1
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4b41      	ldr	r3, [pc, #260]	; (8000418 <lirPulse+0x140>)
 8000314:	701a      	strb	r2, [r3, #0]
//		 чтение бита в data по каждому нечетному клоку,пропуская первый
		 if ((PULSE_COUNT&0x1UL)&(PULSE_COUNT>2UL)){
 8000316:	4b40      	ldr	r3, [pc, #256]	; (8000418 <lirPulse+0x140>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b3d      	ldr	r3, [pc, #244]	; (8000418 <lirPulse+0x140>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b02      	cmp	r3, #2
 800032a:	bf8c      	ite	hi
 800032c:	2301      	movhi	r3, #1
 800032e:	2300      	movls	r3, #0
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4013      	ands	r3, r2
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d06a      	beq.n	8000410 <lirPulse+0x138>
		 		  data<<=0x1UL;
 800033a:	4b39      	ldr	r3, [pc, #228]	; (8000420 <lirPulse+0x148>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	4a37      	ldr	r2, [pc, #220]	; (8000420 <lirPulse+0x148>)
 8000342:	6013      	str	r3, [r2, #0]
		 		  data |= (GPIO_Data->IDR >> GPIO_Data_Pin)&0x01; //read bit pG3
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	691a      	ldr	r2, [r3, #16]
 8000348:	88fb      	ldrh	r3, [r7, #6]
 800034a:	fa22 f303 	lsr.w	r3, r2, r3
 800034e:	f003 0201 	and.w	r2, r3, #1
 8000352:	4b33      	ldr	r3, [pc, #204]	; (8000420 <lirPulse+0x148>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4313      	orrs	r3, r2
 8000358:	4a31      	ldr	r2, [pc, #196]	; (8000420 <lirPulse+0x148>)
 800035a:	6013      	str	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)tosend, 12);
//				обнуление
				data = 0;
				PULSE_COUNT = 0;
			}
}
 800035c:	e058      	b.n	8000410 <lirPulse+0x138>
				htim->Instance->CR1 &= ~(TIM_CR1_CEN);
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f022 0201 	bic.w	r2, r2, #1
 800036c:	601a      	str	r2, [r3, #0]
				htim->Instance->CNT = 0;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
				tbuf = DWT->CYCCNT;
 8000376:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <lirPulse+0x14c>)
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	4a2b      	ldr	r2, [pc, #172]	; (8000428 <lirPulse+0x150>)
 800037c:	6013      	str	r3, [r2, #0]
				DWT->CYCCNT = 0UL;
 800037e:	4b29      	ldr	r3, [pc, #164]	; (8000424 <lirPulse+0x14c>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
				tosend[0]= data&0x3FFFUL;
 8000384:	4b26      	ldr	r3, [pc, #152]	; (8000420 <lirPulse+0x148>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800038c:	4a27      	ldr	r2, [pc, #156]	; (800042c <lirPulse+0x154>)
 800038e:	6013      	str	r3, [r2, #0]
				tosend[0]<<=16;
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <lirPulse+0x154>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	041b      	lsls	r3, r3, #16
 8000396:	4a25      	ldr	r2, [pc, #148]	; (800042c <lirPulse+0x154>)
 8000398:	6013      	str	r3, [r2, #0]
				tosend[0]|= ++count;
 800039a:	4b25      	ldr	r3, [pc, #148]	; (8000430 <lirPulse+0x158>)
 800039c:	881b      	ldrh	r3, [r3, #0]
 800039e:	b29b      	uxth	r3, r3
 80003a0:	3301      	adds	r3, #1
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b22      	ldr	r3, [pc, #136]	; (8000430 <lirPulse+0x158>)
 80003a6:	4611      	mov	r1, r2
 80003a8:	8019      	strh	r1, [r3, #0]
 80003aa:	4b20      	ldr	r3, [pc, #128]	; (800042c <lirPulse+0x154>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4313      	orrs	r3, r2
 80003b0:	4a1e      	ldr	r2, [pc, #120]	; (800042c <lirPulse+0x154>)
 80003b2:	6013      	str	r3, [r2, #0]
				timestamp += DWTtoUS(tbuf);
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <lirPulse+0x150>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	ee07 3a90 	vmov	s15, r3
 80003bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000434 <lirPulse+0x15c>
 80003c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <lirPulse+0x160>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	ee07 3a90 	vmov	s15, r3
 80003d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <lirPulse+0x164>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	ee07 3a90 	vmov	s15, r3
 80003e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003ec:	ee17 2a90 	vmov	r2, s15
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <lirPulse+0x164>)
 80003f2:	601a      	str	r2, [r3, #0]
				tosend[1]= timestamp; //переменной этой хватит на час с чем-то, если хранить микросекунды
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <lirPulse+0x164>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0c      	ldr	r2, [pc, #48]	; (800042c <lirPulse+0x154>)
 80003fa:	6053      	str	r3, [r2, #4]
				CDC_Transmit_FS((uint8_t*)tosend, 12);
 80003fc:	210c      	movs	r1, #12
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <lirPulse+0x154>)
 8000400:	f008 fbf0 	bl	8008be4 <CDC_Transmit_FS>
				data = 0;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <lirPulse+0x148>)
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
				PULSE_COUNT = 0;
 800040a:	4b03      	ldr	r3, [pc, #12]	; (8000418 <lirPulse+0x140>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
}
 8000410:	bf00      	nop
 8000412:	3710      	adds	r7, #16
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200003e0 	.word	0x200003e0
 800041c:	200003da 	.word	0x200003da
 8000420:	200003d4 	.word	0x200003d4
 8000424:	e0001000 	.word	0xe0001000
 8000428:	200003dc 	.word	0x200003dc
 800042c:	200003c8 	.word	0x200003c8
 8000430:	200003d8 	.word	0x200003d8
 8000434:	49742400 	.word	0x49742400
 8000438:	20000000 	.word	0x20000000
 800043c:	200003c4 	.word	0x200003c4

08000440 <lirCycle>:

void lirCycle(TIM_HandleTypeDef *htim, uint32_t IRQN){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]
	htim->Instance->CR1 |= TIM_CR1_CEN;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f042 0201 	orr.w	r2, r2, #1
 8000458:	601a      	str	r2, [r3, #0]
	htim->Instance->DIER|= IRQN;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68d9      	ldr	r1, [r3, #12]
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	683a      	ldr	r2, [r7, #0]
 8000466:	430a      	orrs	r2, r1
 8000468:	60da      	str	r2, [r3, #12]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <lirInit>:

void lirInit(){
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
	PULSE_COUNT = 0;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <lirInit+0x38>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
	MAX_PULSE_COUNT = (BITNESS + 1) * 2;
 8000482:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <lirInit+0x3c>)
 8000484:	221e      	movs	r2, #30
 8000486:	701a      	strb	r2, [r3, #0]
	data = 0;
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <lirInit+0x40>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
	tbuf = 0;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <lirInit+0x44>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
	timestamp = 0;
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <lirInit+0x48>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
	count = 0;
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <lirInit+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	801a      	strh	r2, [r3, #0]
//	стоп слово для определения конца посылки
	tosend[2]=0xFAFBFCFD;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <lirInit+0x50>)
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <lirInit+0x54>)
 80004a4:	609a      	str	r2, [r3, #8]
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	200003e0 	.word	0x200003e0
 80004b4:	200003da 	.word	0x200003da
 80004b8:	200003d4 	.word	0x200003d4
 80004bc:	200003dc 	.word	0x200003dc
 80004c0:	200003c4 	.word	0x200003c4
 80004c4:	200003d8 	.word	0x200003d8
 80004c8:	200003c8 	.word	0x200003c8
 80004cc:	fafbfcfd 	.word	0xfafbfcfd

080004d0 <DWTinit>:

void DWTinit(){
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <DWTinit+0x2c>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a08      	ldr	r2, [pc, #32]	; (80004fc <DWTinit+0x2c>)
 80004da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004de:	60d3      	str	r3, [r2, #12]
//	DWT->LAR = 0xC5ACCE55; //софтверный анлок??
	DWT->CYCCNT = 0U;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <DWTinit+0x30>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <DWTinit+0x30>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a05      	ldr	r2, [pc, #20]	; (8000500 <DWTinit+0x30>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	e000edf0 	.word	0xe000edf0
 8000500:	e0001000 	.word	0xe0001000

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fc4c 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f81e 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f964 	bl	80007dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000514:	f000 f89e 	bl	8000654 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000518:	f000 f8ee 	bl	80006f8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800051c:	f008 faa2 	bl	8008a64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  DWTinit();
 8000520:	f7ff ffd6 	bl	80004d0 <DWTinit>
  lirInit();
 8000524:	f7ff ffa8 	bl	8000478 <lirInit>

//  TIM1->CCER|=TIM_CCER_CC1E; //map to pins (pin PE9)
//  TIM1->BDTR|=TIM_BDTR_MOE; //main output enable


  TIM2->CR1|= TIM_CR1_CEN;
 8000528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6013      	str	r3, [r2, #0]
  TIM2->DIER|= TIM2_IRQn;
 8000538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000542:	f043 031c 	orr.w	r3, r3, #28
 8000546:	60d3      	str	r3, [r2, #12]
//  TIM1->DIER|= TIM1_CC_IRQn;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x44>
	...

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b09c      	sub	sp, #112	; 0x70
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000556:	224c      	movs	r2, #76	; 0x4c
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f008 fff4 	bl	8009548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2220      	movs	r2, #32
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f008 ffee 	bl	8009548 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800056c:	2002      	movs	r0, #2
 800056e:	f002 f98f 	bl	8002890 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000572:	2300      	movs	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	4b35      	ldr	r3, [pc, #212]	; (800064c <SystemClock_Config+0x100>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a34      	ldr	r2, [pc, #208]	; (800064c <SystemClock_Config+0x100>)
 800057c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000580:	6193      	str	r3, [r2, #24]
 8000582:	4b32      	ldr	r3, [pc, #200]	; (800064c <SystemClock_Config+0x100>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4b30      	ldr	r3, [pc, #192]	; (8000650 <SystemClock_Config+0x104>)
 800058e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000590:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <SystemClock_Config+0x104>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <SystemClock_Config+0x104>)
 800059a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059c:	f003 0301 	and.w	r3, r3, #1
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005a4:	bf00      	nop
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0x100>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005b2:	d1f8      	bne.n	80005a6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005b4:	2322      	movs	r3, #34	; 0x22
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005cc:	230c      	movs	r3, #12
 80005ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005d0:	23b4      	movs	r3, #180	; 0xb4
 80005d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005e0:	2308      	movs	r3, #8
 80005e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 f997 	bl	8002924 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005fc:	f000 fa50 	bl	8000aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	233f      	movs	r3, #63	; 0x3f
 8000602:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800060c:	2308      	movs	r3, #8
 800060e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000614:	2340      	movs	r3, #64	; 0x40
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800061e:	2340      	movs	r3, #64	; 0x40
 8000620:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fd8c 	bl	8003144 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000632:	f000 fa35 	bl	8000aa0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000636:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800063a:	2100      	movs	r1, #0
 800063c:	2001      	movs	r0, #1
 800063e:	f002 ff37 	bl	80034b0 <HAL_RCC_MCOConfig>
}
 8000642:	bf00      	nop
 8000644:	3770      	adds	r7, #112	; 0x70
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	58024800 	.word	0x58024800
 8000650:	58000400 	.word	0x58000400

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_TIM1_Init+0x9c>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <MX_TIM1_Init+0xa0>)
 8000676:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 23;
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_TIM1_Init+0x9c>)
 800067a:	2217      	movs	r2, #23
 800067c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_TIM1_Init+0x9c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_TIM1_Init+0x9c>)
 8000686:	2218      	movs	r2, #24
 8000688:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_TIM1_Init+0x9c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_TIM1_Init+0x9c>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_TIM1_Init+0x9c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800069c:	4814      	ldr	r0, [pc, #80]	; (80006f0 <MX_TIM1_Init+0x9c>)
 800069e:	f004 f9bf 	bl	8004a20 <HAL_TIM_Base_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006a8:	f000 f9fa 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_TIM1_Init+0x9c>)
 80006ba:	f004 fbff 	bl	8004ebc <HAL_TIM_ConfigClockSource>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006c4:	f000 f9ec 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_TIM1_Init+0x9c>)
 80006da:	f005 f91b 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80006e4:	f000 f9dc 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200003e4 	.word	0x200003e4
 80006f4:	40010000 	.word	0x40010000

080006f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08e      	sub	sp, #56	; 0x38
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]
 8000726:	615a      	str	r2, [r3, #20]
 8000728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */


  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072a:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <MX_TIM2_Init+0xe0>)
 800072c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <MX_TIM2_Init+0xe0>)
 8000734:	22ef      	movs	r2, #239	; 0xef
 8000736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_TIM2_Init+0xe0>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <MX_TIM2_Init+0xe0>)
 8000740:	22c7      	movs	r2, #199	; 0xc7
 8000742:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_TIM2_Init+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_TIM2_Init+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000750:	4821      	ldr	r0, [pc, #132]	; (80007d8 <MX_TIM2_Init+0xe0>)
 8000752:	f004 f965 	bl	8004a20 <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800075c:	f000 f9a0 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	4619      	mov	r1, r3
 800076c:	481a      	ldr	r0, [pc, #104]	; (80007d8 <MX_TIM2_Init+0xe0>)
 800076e:	f004 fba5 	bl	8004ebc <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000778:	f000 f992 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <MX_TIM2_Init+0xe0>)
 800077e:	f004 f9a6 	bl	8004ace <HAL_TIM_OC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000788:	f000 f98a 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	480f      	ldr	r0, [pc, #60]	; (80007d8 <MX_TIM2_Init+0xe0>)
 800079c:	f005 f8ba 	bl	8005914 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007a6:	f000 f97b 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_TIM2_Init+0xe0>)
 80007c2:	f004 fb05 	bl	8004dd0 <HAL_TIM_OC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007cc:	f000 f968 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000430 	.word	0x20000430

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	; 0x30
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4ba3      	ldr	r3, [pc, #652]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f8:	4aa1      	ldr	r2, [pc, #644]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000802:	4b9f      	ldr	r3, [pc, #636]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
 800080e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000810:	4b9b      	ldr	r3, [pc, #620]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000816:	4a9a      	ldr	r2, [pc, #616]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000820:	4b97      	ldr	r3, [pc, #604]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b94      	ldr	r3, [pc, #592]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a92      	ldr	r2, [pc, #584]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b90      	ldr	r3, [pc, #576]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	4b8c      	ldr	r3, [pc, #560]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a8b      	ldr	r2, [pc, #556]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b88      	ldr	r3, [pc, #544]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b85      	ldr	r3, [pc, #532]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a83      	ldr	r2, [pc, #524]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b81      	ldr	r3, [pc, #516]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000888:	4b7d      	ldr	r3, [pc, #500]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a7c      	ldr	r2, [pc, #496]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b79      	ldr	r3, [pc, #484]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	4b76      	ldr	r3, [pc, #472]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a74      	ldr	r2, [pc, #464]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b72      	ldr	r3, [pc, #456]	; (8000a80 <MX_GPIO_Init+0x2a4>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0310 	and.w	r3, r3, #16
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f244 0101 	movw	r1, #16385	; 0x4001
 80008ca:	486e      	ldr	r0, [pc, #440]	; (8000a84 <MX_GPIO_Init+0x2a8>)
 80008cc:	f000 fdec 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d6:	486c      	ldr	r0, [pc, #432]	; (8000a88 <MX_GPIO_Init+0x2ac>)
 80008d8:	f000 fde6 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CLCK_GPIO_Port, CLCK_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2104      	movs	r1, #4
 80008e0:	486a      	ldr	r0, [pc, #424]	; (8000a8c <MX_GPIO_Init+0x2b0>)
 80008e2:	f000 fde1 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2102      	movs	r1, #2
 80008ea:	4869      	ldr	r0, [pc, #420]	; (8000a90 <MX_GPIO_Init+0x2b4>)
 80008ec:	f000 fddc 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4863      	ldr	r0, [pc, #396]	; (8000a94 <MX_GPIO_Init+0x2b8>)
 8000906:	f000 fc1f 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800090a:	2332      	movs	r3, #50	; 0x32
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091a:	230b      	movs	r3, #11
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	485b      	ldr	r0, [pc, #364]	; (8000a94 <MX_GPIO_Init+0x2b8>)
 8000926:	f000 fc0f 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800092a:	2386      	movs	r3, #134	; 0x86
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800093a:	230b      	movs	r3, #11
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4854      	ldr	r0, [pc, #336]	; (8000a98 <MX_GPIO_Init+0x2bc>)
 8000946:	f000 fbff 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800094a:	f244 0301 	movw	r3, #16385	; 0x4001
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4848      	ldr	r0, [pc, #288]	; (8000a84 <MX_GPIO_Init+0x2a8>)
 8000964:	f000 fbf0 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000968:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800097a:	230b      	movs	r3, #11
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	483f      	ldr	r0, [pc, #252]	; (8000a84 <MX_GPIO_Init+0x2a8>)
 8000986:	f000 fbdf 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800098a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800099c:	2307      	movs	r3, #7
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4838      	ldr	r0, [pc, #224]	; (8000a88 <MX_GPIO_Init+0x2ac>)
 80009a8:	f000 fbce 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4830      	ldr	r0, [pc, #192]	; (8000a88 <MX_GPIO_Init+0x2ac>)
 80009c6:	f000 fbbf 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLCK_Pin */
  GPIO_InitStruct.Pin = CLCK_Pin;
 80009ca:	2304      	movs	r3, #4
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CLCK_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	482a      	ldr	r0, [pc, #168]	; (8000a8c <MX_GPIO_Init+0x2b0>)
 80009e2:	f000 fbb1 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_Pin */
  GPIO_InitStruct.Pin = DATA_Pin;
 80009e6:	2308      	movs	r3, #8
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4824      	ldr	r0, [pc, #144]	; (8000a8c <MX_GPIO_Init+0x2b0>)
 80009fa:	f000 fba5 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009fe:	2380      	movs	r3, #128	; 0x80
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <MX_GPIO_Init+0x2c0>)
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481e      	ldr	r0, [pc, #120]	; (8000a8c <MX_GPIO_Init+0x2b0>)
 8000a12:	f000 fb99 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4818      	ldr	r0, [pc, #96]	; (8000a94 <MX_GPIO_Init+0x2b8>)
 8000a34:	f000 fb88 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4a:	230b      	movs	r3, #11
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_GPIO_Init+0x2b0>)
 8000a56:	f000 fb77 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_GPIO_Init+0x2b4>)
 8000a72:	f000 fb69 	bl	8001148 <HAL_GPIO_Init>

}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	; 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58020400 	.word	0x58020400
 8000a88:	58020c00 	.word	0x58020c00
 8000a8c:	58021800 	.word	0x58021800
 8000a90:	58021000 	.word	0x58021000
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58020000 	.word	0x58020000
 8000a9c:	11110000 	.word	0x11110000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x30>)
 8000ab4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab8:	4a08      	ldr	r2, [pc, #32]	; (8000adc <HAL_MspInit+0x30>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_MspInit+0x30>)
 8000ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	58024400 	.word	0x58024400

08000ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1d      	ldr	r2, [pc, #116]	; (8000b64 <HAL_TIM_Base_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d117      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <HAL_TIM_Base_MspInit+0x88>)
 8000af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <HAL_TIM_Base_MspInit+0x88>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_TIM_Base_MspInit+0x88>)
 8000b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2019      	movs	r0, #25
 8000b16:	f000 fae2 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b1a:	2019      	movs	r0, #25
 8000b1c:	f000 faf9 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b20:	e01b      	b.n	8000b5a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM2)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b2a:	d116      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_TIM_Base_MspInit+0x88>)
 8000b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b32:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <HAL_TIM_Base_MspInit+0x88>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_Base_MspInit+0x88>)
 8000b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	201c      	movs	r0, #28
 8000b50:	f000 fac5 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b54:	201c      	movs	r0, #28
 8000b56:	f000 fadc 	bl	8001112 <HAL_NVIC_EnableIRQ>
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40010000 	.word	0x40010000
 8000b68:	58024400 	.word	0x58024400

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f966 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	TIM1->SR &= ~TIM_SR_UIF; //flag reset
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <TIM1_UP_IRQHandler+0x28>)
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <TIM1_UP_IRQHandler+0x28>)
 8000bcc:	f023 0301 	bic.w	r3, r3, #1
 8000bd0:	6113      	str	r3, [r2, #16]
	lirPulse(&htim1, DATA_GPIO_Port, 3, CLCK_GPIO_Port, 2);
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <TIM1_UP_IRQHandler+0x2c>)
 8000bd8:	2203      	movs	r2, #3
 8000bda:	4904      	ldr	r1, [pc, #16]	; (8000bec <TIM1_UP_IRQHandler+0x2c>)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <TIM1_UP_IRQHandler+0x30>)
 8000bde:	f7ff fb7b 	bl	80002d8 <lirPulse>
  /* USER CODE END TIM1_UP_IRQn 0 */
//  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010000 	.word	0x40010000
 8000bec:	58021800 	.word	0x58021800
 8000bf0:	200003e4 	.word	0x200003e4

08000bf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	TIM2->SR &= ~TIM_SR_UIF; //flag reset
 8000bf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <TIM2_IRQHandler+0x28>)
 8000c0a:	f003 ffc1 	bl	8004b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  TIM1->CCER|=TIM_CCER_CC1E; //map to pins (pin PE9)
//  TIM1->BDTR|=TIM_BDTR_MOE; //main output enable
  lirCycle(&htim1, TIM1_UP_TIM10_IRQn);
 8000c0e:	2119      	movs	r1, #25
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <TIM2_IRQHandler+0x2c>)
 8000c12:	f7ff fc15 	bl	8000440 <lirCycle>
//  TIM1->DIER|= TIM1_CC_IRQn;
  /* USER CODE END TIM2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000430 	.word	0x20000430
 8000c20:	200003e4 	.word	0x200003e4

08000c24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <OTG_FS_IRQHandler+0x10>)
 8000c2a:	f000 fdad 	bl	8001788 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20001950 	.word	0x20001950

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b39      	ldr	r3, [pc, #228]	; (8000d24 <SystemInit+0xec>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a38      	ldr	r2, [pc, #224]	; (8000d24 <SystemInit+0xec>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <SystemInit+0xf0>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	2b06      	cmp	r3, #6
 8000c56:	d807      	bhi.n	8000c68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c58:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <SystemInit+0xf0>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f023 030f 	bic.w	r3, r3, #15
 8000c60:	4a31      	ldr	r2, [pc, #196]	; (8000d28 <SystemInit+0xf0>)
 8000c62:	f043 0307 	orr.w	r3, r3, #7
 8000c66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c68:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <SystemInit+0xf4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <SystemInit+0xf4>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <SystemInit+0xf4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <SystemInit+0xf4>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	492b      	ldr	r1, [pc, #172]	; (8000d2c <SystemInit+0xf4>)
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <SystemInit+0xf8>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c86:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <SystemInit+0xf0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d007      	beq.n	8000ca2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <SystemInit+0xf0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f023 030f 	bic.w	r3, r3, #15
 8000c9a:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <SystemInit+0xf0>)
 8000c9c:	f043 0307 	orr.w	r3, r3, #7
 8000ca0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <SystemInit+0xf4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <SystemInit+0xf4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <SystemInit+0xf4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <SystemInit+0xf4>)
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <SystemInit+0xfc>)
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <SystemInit+0xf4>)
 8000cbc:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <SystemInit+0x100>)
 8000cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <SystemInit+0xf4>)
 8000cc2:	4a1e      	ldr	r2, [pc, #120]	; (8000d3c <SystemInit+0x104>)
 8000cc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <SystemInit+0xf4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <SystemInit+0xf4>)
 8000cce:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <SystemInit+0x104>)
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <SystemInit+0xf4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <SystemInit+0xf4>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <SystemInit+0x104>)
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <SystemInit+0xf4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <SystemInit+0xf4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <SystemInit+0xf4>)
 8000cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <SystemInit+0xf4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <SystemInit+0x108>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <SystemInit+0x10c>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d02:	d202      	bcs.n	8000d0a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <SystemInit+0x110>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <SystemInit+0x114>)
 8000d0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000d10:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SystemInit+0xec>)
 8000d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d18:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	52002000 	.word	0x52002000
 8000d2c:	58024400 	.word	0x58024400
 8000d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d34:	02020200 	.word	0x02020200
 8000d38:	01ff0000 	.word	0x01ff0000
 8000d3c:	01010280 	.word	0x01010280
 8000d40:	5c001000 	.word	0x5c001000
 8000d44:	ffff0000 	.word	0xffff0000
 8000d48:	51008108 	.word	0x51008108
 8000d4c:	52004000 	.word	0x52004000

08000d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d54:	f7ff ff70 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	; (8000d9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f008 fbbf 	bl	8009500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d82:	f7ff fbbf 	bl	8000504 <main>
  bx  lr
 8000d86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000d94:	080095d0 	.word	0x080095d0
  ldr r2, =_sbss
 8000d98:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000d9c:	20001d58 	.word	0x20001d58

08000da0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC3_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f000 f98c 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000db0:	f002 fbe8 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8000db4:	4602      	mov	r2, r0
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_Init+0x68>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	f003 030f 	and.w	r3, r3, #15
 8000dc0:	4913      	ldr	r1, [pc, #76]	; (8000e10 <HAL_Init+0x6c>)
 8000dc2:	5ccb      	ldrb	r3, [r1, r3]
 8000dc4:	f003 031f 	and.w	r3, r3, #31
 8000dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_Init+0x68>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_Init+0x6c>)
 8000dd8:	5cd3      	ldrb	r3, [r2, r3]
 8000dda:	f003 031f 	and.w	r3, r3, #31
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	fa22 f303 	lsr.w	r3, r2, r3
 8000de4:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <HAL_Init+0x70>)
 8000de6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000de8:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <HAL_Init+0x74>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f814 	bl	8000e1c <HAL_InitTick>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e002      	b.n	8000e04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfe:	f7ff fe55 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	080095b8 	.word	0x080095b8
 8000e14:	20000004 	.word	0x20000004
 8000e18:	20000000 	.word	0x20000000

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_InitTick+0x60>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e021      	b.n	8000e74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_InitTick+0x64>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_InitTick+0x60>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f971 	bl	800112e <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f93b 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x68>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000000c 	.word	0x2000000c
 8000eac:	2000047c 	.word	0x2000047c

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2000047c 	.word	0x2000047c

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff ffee 	bl	8000eb0 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffde 	bl	8000eb0 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000000c 	.word	0x2000000c

08000f10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetREVID+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	0c1b      	lsrs	r3, r3, #16
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	5c001000 	.word	0x5c001000

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <__NVIC_SetPriorityGrouping+0x40>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x40>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00
 8000f6c:	05fa0000 	.word	0x05fa0000

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff40 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff90 	bl	800101c <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5f 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff33 	bl	8000f8c <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa4 	bl	8001084 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001156:	4b89      	ldr	r3, [pc, #548]	; (800137c <HAL_GPIO_Init+0x234>)
 8001158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800115a:	e194      	b.n	8001486 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8186 	beq.w	8001480 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d00b      	beq.n	8001194 <HAL_GPIO_Init+0x4c>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001188:	2b11      	cmp	r3, #17
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b12      	cmp	r3, #18
 8001192:	d130      	bne.n	80011f6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ca:	2201      	movs	r2, #1
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f003 0201 	and.w	r2, r3, #1
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0xee>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b12      	cmp	r3, #18
 8001234:	d123      	bne.n	800127e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	69b9      	ldr	r1, [r7, #24]
 800127a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0203 	and.w	r2, r3, #3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80e0 	beq.w	8001480 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <HAL_GPIO_Init+0x238>)
 80012c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c6:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <HAL_GPIO_Init+0x238>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_GPIO_Init+0x238>)
 80012d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a29      	ldr	r2, [pc, #164]	; (8001384 <HAL_GPIO_Init+0x23c>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <HAL_GPIO_Init+0x240>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d052      	beq.n	80013b0 <HAL_GPIO_Init+0x268>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <HAL_GPIO_Init+0x244>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d031      	beq.n	8001376 <HAL_GPIO_Init+0x22e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_GPIO_Init+0x248>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d02b      	beq.n	8001372 <HAL_GPIO_Init+0x22a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x24c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_GPIO_Init+0x250>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_GPIO_Init+0x254>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <HAL_GPIO_Init+0x258>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_GPIO_Init+0x25c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x260>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_GPIO_Init+0x264>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x20e>
 8001352:	2309      	movs	r3, #9
 8001354:	e02d      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001356:	230a      	movs	r3, #10
 8001358:	e02b      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800135a:	2308      	movs	r3, #8
 800135c:	e029      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800135e:	2307      	movs	r3, #7
 8001360:	e027      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001362:	2306      	movs	r3, #6
 8001364:	e025      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001366:	2305      	movs	r3, #5
 8001368:	e023      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800136a:	2304      	movs	r3, #4
 800136c:	e021      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800136e:	2303      	movs	r3, #3
 8001370:	e01f      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001372:	2302      	movs	r3, #2
 8001374:	e01d      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 8001376:	2301      	movs	r3, #1
 8001378:	e01b      	b.n	80013b2 <HAL_GPIO_Init+0x26a>
 800137a:	bf00      	nop
 800137c:	58000080 	.word	0x58000080
 8001380:	58024400 	.word	0x58024400
 8001384:	58000400 	.word	0x58000400
 8001388:	58020000 	.word	0x58020000
 800138c:	58020400 	.word	0x58020400
 8001390:	58020800 	.word	0x58020800
 8001394:	58020c00 	.word	0x58020c00
 8001398:	58021000 	.word	0x58021000
 800139c:	58021400 	.word	0x58021400
 80013a0:	58021800 	.word	0x58021800
 80013a4:	58021c00 	.word	0x58021c00
 80013a8:	58022000 	.word	0x58022000
 80013ac:	58022400 	.word	0x58022400
 80013b0:	2300      	movs	r3, #0
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	f002 0203 	and.w	r2, r2, #3
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	4093      	lsls	r3, r2
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c2:	4938      	ldr	r1, [pc, #224]	; (80014a4 <HAL_GPIO_Init+0x35c>)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800144a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3301      	adds	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	f47f ae63 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	58000400 	.word	0x58000400

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014dc:	b08f      	sub	sp, #60	; 0x3c
 80014de:	af0a      	add	r7, sp, #40	; 0x28
 80014e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e116      	b.n	800171a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f007 fcb4 	bl	8008e74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2203      	movs	r2, #3
 8001510:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f004 fbb9 	bl	8005ca2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	687e      	ldr	r6, [r7, #4]
 8001538:	466d      	mov	r5, sp
 800153a:	f106 0410 	add.w	r4, r6, #16
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001546:	e894 0003 	ldmia.w	r4, {r0, r1}
 800154a:	e885 0003 	stmia.w	r5, {r0, r1}
 800154e:	1d33      	adds	r3, r6, #4
 8001550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f004 fa84 	bl	8005a60 <USB_CoreInit>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0d7      	b.n	800171a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f004 fba7 	bl	8005cc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]
 800157a:	e04a      	b.n	8001612 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	333d      	adds	r3, #61	; 0x3d
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	333c      	adds	r3, #60	; 0x3c
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	b298      	uxth	r0, r3
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	3342      	adds	r3, #66	; 0x42
 80015b8:	4602      	mov	r2, r0
 80015ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	333f      	adds	r3, #63	; 0x3f
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015d0:	7bfa      	ldrb	r2, [r7, #15]
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	1a9b      	subs	r3, r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	3344      	adds	r3, #68	; 0x44
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	3348      	adds	r3, #72	; 0x48
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	3350      	adds	r3, #80	; 0x50
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	d3af      	bcc.n	800157c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	e044      	b.n	80016ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001622:	7bfa      	ldrb	r2, [r7, #15]
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	4613      	mov	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	1a9b      	subs	r3, r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	440b      	add	r3, r1
 800165c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	1a9b      	subs	r3, r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	440b      	add	r3, r1
 800169e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	3301      	adds	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d3b5      	bcc.n	8001622 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	687e      	ldr	r6, [r7, #4]
 80016be:	466d      	mov	r5, sp
 80016c0:	f106 0410 	add.w	r4, r6, #16
 80016c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016d4:	1d33      	adds	r3, r6, #4
 80016d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f004 fb1d 	bl	8005d18 <USB_DevInit>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2202      	movs	r2, #2
 80016e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e014      	b.n	800171a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	2b01      	cmp	r3, #1
 8001706:	d102      	bne.n	800170e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f001 f891 	bl	8002830 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f005 fb9d 	bl	8006e52 <USB_DevDisconnect>

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001722 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_PCD_Start+0x1c>
 800173a:	2302      	movs	r3, #2
 800173c:	e020      	b.n	8001780 <HAL_PCD_Start+0x5e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	2b01      	cmp	r3, #1
 800174c:	d109      	bne.n	8001762 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001752:	2b01      	cmp	r3, #1
 8001754:	d005      	beq.n	8001762 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f004 fa8a 	bl	8005c80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f005 fb4d 	bl	8006e10 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b08d      	sub	sp, #52	; 0x34
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 fc0b 	bl	8006fba <USB_GetMode>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 83ca 	bne.w	8001f40 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f005 fb6f 	bl	8006e94 <USB_ReadInterrupts>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 83c0 	beq.w	8001f3e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fb66 	bl	8006e94 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d107      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f002 0202 	and.w	r2, r2, #2
 80017e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f005 fb54 	bl	8006e94 <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b10      	cmp	r3, #16
 80017f4:	d161      	bne.n	80018ba <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	699a      	ldr	r2, [r3, #24]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 0210 	bic.w	r2, r2, #16
 8001804:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f003 020f 	and.w	r2, r3, #15
 8001812:	4613      	mov	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	1a9b      	subs	r3, r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	3304      	adds	r3, #4
 8001824:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	0c5b      	lsrs	r3, r3, #17
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	2b02      	cmp	r3, #2
 8001830:	d124      	bne.n	800187c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d035      	beq.n	80018aa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800184c:	b29b      	uxth	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	6a38      	ldr	r0, [r7, #32]
 8001852:	f005 f98b 	bl	8006b6c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001862:	441a      	add	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	091b      	lsrs	r3, r3, #4
 8001870:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001874:	441a      	add	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	619a      	str	r2, [r3, #24]
 800187a:	e016      	b.n	80018aa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	0c5b      	lsrs	r3, r3, #17
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	2b06      	cmp	r3, #6
 8001886:	d110      	bne.n	80018aa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800188e:	2208      	movs	r2, #8
 8001890:	4619      	mov	r1, r3
 8001892:	6a38      	ldr	r0, [r7, #32]
 8001894:	f005 f96a 	bl	8006b6c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	699a      	ldr	r2, [r3, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018a4:	441a      	add	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0210 	orr.w	r2, r2, #16
 80018b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 fae8 	bl	8006e94 <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80018ce:	d16e      	bne.n	80019ae <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f005 faee 	bl	8006eba <USB_ReadDevAllOutEpInterrupt>
 80018de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80018e0:	e062      	b.n	80019a8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80018e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d057      	beq.n	800199c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	4611      	mov	r1, r2
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 fb13 	bl	8006f22 <USB_ReadDevOutEPInterrupt>
 80018fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00c      	beq.n	8001922 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001914:	461a      	mov	r2, r3
 8001916:	2301      	movs	r3, #1
 8001918:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800191a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fddd 	bl	80024dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00c      	beq.n	8001946 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	4413      	add	r3, r2
 8001934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001938:	461a      	mov	r2, r3
 800193a:	2308      	movs	r3, #8
 800193c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800193e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 fed7 	bl	80026f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	d008      	beq.n	8001962 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	015a      	lsls	r2, r3, #5
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	4413      	add	r3, r2
 8001958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195c:	461a      	mov	r2, r3
 800195e:	2310      	movs	r3, #16
 8001960:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	4413      	add	r3, r2
 8001974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001978:	461a      	mov	r2, r3
 800197a:	2320      	movs	r3, #32
 800197c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001994:	461a      	mov	r2, r3
 8001996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3301      	adds	r3, #1
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d199      	bne.n	80018e2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 fa6e 	bl	8006e94 <USB_ReadInterrupts>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80019c2:	f040 80c0 	bne.w	8001b46 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f005 fa8f 	bl	8006eee <USB_ReadDevAllInEpInterrupt>
 80019d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80019d6:	e0b2      	b.n	8001b3e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80a7 	beq.w	8001b32 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f005 fab5 	bl	8006f5e <USB_ReadDevInEPInterrupt>
 80019f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d057      	beq.n	8001ab0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	2201      	movs	r2, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69f9      	ldr	r1, [r7, #28]
 8001a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001a20:	4013      	ands	r3, r2
 8001a22:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	015a      	lsls	r2, r3, #5
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a30:	461a      	mov	r2, r3
 8001a32:	2301      	movs	r3, #1
 8001a34:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d132      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3348      	adds	r3, #72	; 0x48
 8001a4e:	6819      	ldr	r1, [r3, #0]
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4403      	add	r3, r0
 8001a5e:	3344      	adds	r3, #68	; 0x44
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4419      	add	r1, r3
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4403      	add	r3, r0
 8001a72:	3348      	adds	r3, #72	; 0x48
 8001a74:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d113      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x31c>
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a80:	4613      	mov	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	1a9b      	subs	r3, r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3350      	adds	r3, #80	; 0x50
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d108      	bne.n	8001aa4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	f005 fabe 	bl	8007020 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f007 fa91 	bl	8008fd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d008      	beq.n	8001acc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	015a      	lsls	r2, r3, #5
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	2308      	movs	r3, #8
 8001aca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d008      	beq.n	8001ae8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	2310      	movs	r3, #16
 8001ae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001afe:	461a      	mov	r2, r3
 8001b00:	2340      	movs	r3, #64	; 0x40
 8001b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fc48 	bl	80023c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3a:	085b      	lsrs	r3, r3, #1
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f47f af49 	bne.w	80019d8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f005 f9a2 	bl	8006e94 <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b5a:	d122      	bne.n	8001ba2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d108      	bne.n	8001b8c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b82:	2100      	movs	r1, #0
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fe77 	bl	8002878 <HAL_PCDEx_LPM_Callback>
 8001b8a:	e002      	b.n	8001b92 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f007 fa97 	bl	80090c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f005 f974 	bl	8006e94 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bb6:	d112      	bne.n	8001bde <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d102      	bne.n	8001bce <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f007 fa53 	bl	8009074 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f005 f956 	bl	8006e94 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bf2:	d121      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001c02:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d111      	bne.n	8001c32 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	f003 020f 	and.w	r2, r3, #15
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001c28:	2101      	movs	r1, #1
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 fe24 	bl	8002878 <HAL_PCDEx_LPM_Callback>
 8001c30:	e002      	b.n	8001c38 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f007 fa1e 	bl	8009074 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 f929 	bl	8006e94 <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c4c:	f040 80c7 	bne.w	8001dde <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2110      	movs	r1, #16
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 f9b2 	bl	8005fd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c74:	e056      	b.n	8001d24 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c82:	461a      	mov	r2, r3
 8001c84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c9a:	0151      	lsls	r1, r2, #5
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	440a      	add	r2, r1
 8001ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ca8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cba:	0151      	lsls	r1, r2, #5
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	440a      	add	r2, r1
 8001cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001cc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cc8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001cdc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cee:	0151      	lsls	r1, r2, #5
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	440a      	add	r2, r1
 8001cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001cfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d00:	015a      	lsls	r2, r3, #5
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	4413      	add	r3, r2
 8001d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d0e:	0151      	lsls	r1, r2, #5
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	440a      	add	r2, r1
 8001d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001d18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d1c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d20:	3301      	adds	r3, #1
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d3a3      	bcc.n	8001c76 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d3c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001d40:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d5a:	f043 030b 	orr.w	r3, r3, #11
 8001d5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d70:	f043 030b 	orr.w	r3, r3, #11
 8001d74:	6453      	str	r3, [r2, #68]	; 0x44
 8001d76:	e015      	b.n	8001da4 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d86:	4619      	mov	r1, r3
 8001d88:	f242 032b 	movw	r3, #8235	; 0x202b
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	69fa      	ldr	r2, [r7, #28]
 8001d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d9e:	f043 030b 	orr.w	r3, r3, #11
 8001da2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001db6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f005 f929 	bl	8007020 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f005 f856 	bl	8006e94 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df2:	d124      	bne.n	8001e3e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f005 f8ed 	bl	8006fd8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 f947 	bl	8006096 <USB_GetDevSpeed>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681c      	ldr	r4, [r3, #0]
 8001e14:	f001 fd30 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 8001e18:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	4620      	mov	r0, r4
 8001e24:	f003 fe8a 	bl	8005b3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f007 f8fa 	bl	8009022 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f005 f826 	bl	8006e94 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d10a      	bne.n	8001e68 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f007 f8d7 	bl	8009006 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f002 0208 	and.w	r2, r2, #8
 8001e66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f005 f811 	bl	8006e94 <USB_ReadInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e7c:	d10f      	bne.n	8001e9e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	4619      	mov	r1, r3
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f007 f939 	bl	8009100 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 fff6 	bl	8006e94 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eb2:	d10f      	bne.n	8001ed4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f007 f90c 	bl	80090dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 ffdb 	bl	8006e94 <USB_ReadInterrupts>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee8:	d10a      	bne.n	8001f00 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f007 f91a 	bl	8009124 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f004 ffc5 	bl	8006e94 <USB_ReadInterrupts>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d115      	bne.n	8001f40 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f007 f90a 	bl	8009140 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	e000      	b.n	8001f40 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001f3e:	bf00      	nop
    }
  }
}
 8001f40:	3734      	adds	r7, #52	; 0x34
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd90      	pop	{r4, r7, pc}

08001f46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_SetAddress+0x1a>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e013      	b.n	8001f88 <HAL_PCD_SetAddress+0x42>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	78fa      	ldrb	r2, [r7, #3]
 8001f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 ff23 	bl	8006dc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	70fb      	strb	r3, [r7, #3]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	803b      	strh	r3, [r7, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da0f      	bge.n	8001fd6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	705a      	strb	r2, [r3, #1]
 8001fd4:	e00f      	b.n	8001ff6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 020f 	and.w	r2, r3, #15
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	3304      	adds	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002002:	883a      	ldrh	r2, [r7, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	78ba      	ldrb	r2, [r7, #2]
 800200c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	785b      	ldrb	r3, [r3, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002020:	78bb      	ldrb	r3, [r7, #2]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d102      	bne.n	800202c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_PCD_EP_Open+0xaa>
 8002036:	2302      	movs	r3, #2
 8002038:	e00e      	b.n	8002058 <HAL_PCD_EP_Open+0xc8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68f9      	ldr	r1, [r7, #12]
 8002048:	4618      	mov	r0, r3
 800204a:	f004 f849 	bl	80060e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002056:	7afb      	ldrb	r3, [r7, #11]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800206c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	da0f      	bge.n	8002094 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 020f 	and.w	r2, r3, #15
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3338      	adds	r3, #56	; 0x38
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	705a      	strb	r2, [r3, #1]
 8002092:	e00f      	b.n	80020b4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	f003 020f 	and.w	r2, r3, #15
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_PCD_EP_Close+0x6e>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e00e      	b.n	80020ec <HAL_PCD_EP_Close+0x8c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68f9      	ldr	r1, [r7, #12]
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 f887 	bl	80061f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	460b      	mov	r3, r1
 8002102:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f003 020f 	and.w	r2, r3, #15
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	4413      	add	r3, r2
 800211a:	3304      	adds	r3, #4
 800211c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	b2da      	uxtb	r2, r3
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d102      	bne.n	8002150 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002150:	7afb      	ldrb	r3, [r7, #11]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	f004 fb6a 	bl	8006840 <USB_EP0StartXfer>
 800216c:	e008      	b.n	8002180 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	6979      	ldr	r1, [r7, #20]
 800217c:	f004 f914 	bl	80063a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 020f 	and.w	r2, r3, #15
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	1a9b      	subs	r3, r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80021ac:	681b      	ldr	r3, [r3, #0]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	460b      	mov	r3, r1
 80021c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	f003 020f 	and.w	r2, r3, #15
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	3338      	adds	r3, #56	; 0x38
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	3304      	adds	r3, #4
 80021e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2201      	movs	r2, #1
 80021f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	7afb      	ldrb	r3, [r7, #11]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	b2da      	uxtb	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002214:	7afb      	ldrb	r3, [r7, #11]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	6979      	ldr	r1, [r7, #20]
 800222c:	f004 fb08 	bl	8006840 <USB_EP0StartXfer>
 8002230:	e008      	b.n	8002244 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	f004 f8b2 	bl	80063a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b084      	sub	sp, #16
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d901      	bls.n	800226c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e050      	b.n	800230e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800226c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002270:	2b00      	cmp	r3, #0
 8002272:	da0f      	bge.n	8002294 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	3338      	adds	r3, #56	; 0x38
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	4413      	add	r3, r2
 8002288:	3304      	adds	r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	705a      	strb	r2, [r3, #1]
 8002292:	e00d      	b.n	80022b0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	1a9b      	subs	r3, r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	3304      	adds	r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_PCD_EP_SetStall+0x82>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e01e      	b.n	800230e <HAL_PCD_EP_SetStall+0xc0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68f9      	ldr	r1, [r7, #12]
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 fc9c 	bl	8006c1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10a      	bne.n	8002304 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6818      	ldr	r0, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	b2d9      	uxtb	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80022fe:	461a      	mov	r2, r3
 8002300:	f004 fe8e 	bl	8007020 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 020f 	and.w	r2, r3, #15
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	d901      	bls.n	8002334 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e042      	b.n	80023ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002338:	2b00      	cmp	r3, #0
 800233a:	da0f      	bge.n	800235c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	4613      	mov	r3, r2
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	3338      	adds	r3, #56	; 0x38
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	3304      	adds	r3, #4
 8002352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	705a      	strb	r2, [r3, #1]
 800235a:	e00f      	b.n	800237c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	b2da      	uxtb	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_PCD_EP_ClrStall+0x86>
 8002398:	2302      	movs	r3, #2
 800239a:	e00e      	b.n	80023ba <HAL_PCD_EP_ClrStall+0xa4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f004 fca4 	bl	8006cf8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b08a      	sub	sp, #40	; 0x28
 80023c6:	af02      	add	r7, sp, #8
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	3338      	adds	r3, #56	; 0x38
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	3304      	adds	r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d901      	bls.n	80023fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e06c      	b.n	80024d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	429a      	cmp	r2, r3
 800240e:	d902      	bls.n	8002416 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3303      	adds	r3, #3
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800241e:	e02b      	b.n	8002478 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	429a      	cmp	r2, r3
 8002434:	d902      	bls.n	800243c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3303      	adds	r3, #3
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68d9      	ldr	r1, [r3, #12]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002454:	b2db      	uxtb	r3, r3
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4603      	mov	r3, r0
 800245a:	6978      	ldr	r0, [r7, #20]
 800245c:	f004 fb48 	bl	8006af0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	441a      	add	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	699a      	ldr	r2, [r3, #24]
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	441a      	add	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	b29b      	uxth	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	429a      	cmp	r2, r3
 800248c:	d809      	bhi.n	80024a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	699a      	ldr	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002496:	429a      	cmp	r2, r3
 8002498:	d203      	bcs.n	80024a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1be      	bne.n	8002420 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d811      	bhi.n	80024d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	2201      	movs	r2, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	6939      	ldr	r1, [r7, #16]
 80024ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024ce:	4013      	ands	r3, r2
 80024d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	333c      	adds	r3, #60	; 0x3c
 80024f4:	3304      	adds	r3, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 80a0 	bne.w	8002654 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d015      	beq.n	800254a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4a72      	ldr	r2, [pc, #456]	; (80026ec <PCD_EP_OutXfrComplete_int+0x210>)
 8002522:	4293      	cmp	r3, r2
 8002524:	f240 80dd 	bls.w	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80d7 	beq.w	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002540:	461a      	mov	r2, r3
 8002542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002546:	6093      	str	r3, [r2, #8]
 8002548:	e0cb      	b.n	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002560:	461a      	mov	r2, r3
 8002562:	2320      	movs	r3, #32
 8002564:	6093      	str	r3, [r2, #8]
 8002566:	e0bc      	b.n	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 80b7 	bne.w	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a5d      	ldr	r2, [pc, #372]	; (80026ec <PCD_EP_OutXfrComplete_int+0x210>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d90f      	bls.n	800259c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002592:	461a      	mov	r2, r3
 8002594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002598:	6093      	str	r3, [r2, #8]
 800259a:	e0a2      	b.n	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025ae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	0159      	lsls	r1, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	440b      	add	r3, r1
 80025b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80025c2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	1a9b      	subs	r3, r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4403      	add	r3, r0
 80025d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025d6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4403      	add	r3, r0
 80025fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4419      	add	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4403      	add	r3, r0
 8002610:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002614:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d114      	bne.n	8002646 <PCD_EP_OutXfrComplete_int+0x16a>
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d108      	bne.n	8002646 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800263e:	461a      	mov	r2, r3
 8002640:	2101      	movs	r1, #1
 8002642:	f004 fced 	bl	8007020 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f006 fca5 	bl	8008f9c <HAL_PCD_DataOutStageCallback>
 8002652:	e046      	b.n	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a26      	ldr	r2, [pc, #152]	; (80026f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d124      	bne.n	80026a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	e032      	b.n	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002692:	461a      	mov	r2, r3
 8002694:	2320      	movs	r3, #32
 8002696:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f006 fc7c 	bl	8008f9c <HAL_PCD_DataOutStageCallback>
 80026a4:	e01d      	b.n	80026e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d114      	bne.n	80026d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d108      	bne.n	80026d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026ce:	461a      	mov	r2, r3
 80026d0:	2100      	movs	r1, #0
 80026d2:	f004 fca5 	bl	8007020 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4619      	mov	r1, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f006 fc5d 	bl	8008f9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	4f54300a 	.word	0x4f54300a
 80026f0:	4f54310a 	.word	0x4f54310a

080026f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	333c      	adds	r3, #60	; 0x3c
 800270c:	3304      	adds	r3, #4
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a15      	ldr	r2, [pc, #84]	; (800277c <PCD_EP_OutSetupPacket_int+0x88>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d90e      	bls.n	8002748 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002740:	461a      	mov	r2, r3
 8002742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002746:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f006 fc15 	bl	8008f78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a0a      	ldr	r2, [pc, #40]	; (800277c <PCD_EP_OutSetupPacket_int+0x88>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d90c      	bls.n	8002770 <PCD_EP_OutSetupPacket_int+0x7c>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d108      	bne.n	8002770 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002768:	461a      	mov	r2, r3
 800276a:	2101      	movs	r1, #1
 800276c:	f004 fc58 	bl	8007020 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	4f54300a 	.word	0x4f54300a

08002780 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
 800278c:	4613      	mov	r3, r2
 800278e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800279e:	883b      	ldrh	r3, [r7, #0]
 80027a0:	0419      	lsls	r1, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
 80027ac:	e028      	b.n	8002800 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	0c1b      	lsrs	r3, r3, #16
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	4413      	add	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e00d      	b.n	80027de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	3340      	adds	r3, #64	; 0x40
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	4413      	add	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	3301      	adds	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d3ec      	bcc.n	80027c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80027e8:	883b      	ldrh	r3, [r7, #0]
 80027ea:	0418      	lsls	r0, r3, #16
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6819      	ldr	r1, [r3, #0]
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	4302      	orrs	r2, r0
 80027f8:	3340      	adds	r3, #64	; 0x40
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_PCDEx_ActivateLPM+0x44>)
 8002860:	4313      	orrs	r3, r2
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	10000003 	.word	0x10000003

08002878 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_PWREx_ConfigSupply+0x70>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d00a      	beq.n	80028ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <HAL_PWREx_ConfigSupply+0x70>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e01f      	b.n	80028f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e01d      	b.n	80028f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_PWREx_ConfigSupply+0x70>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f023 0207 	bic.w	r2, r3, #7
 80028c2:	490f      	ldr	r1, [pc, #60]	; (8002900 <HAL_PWREx_ConfigSupply+0x70>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ca:	f7fe faf1 	bl	8000eb0 <HAL_GetTick>
 80028ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028d0:	e009      	b.n	80028e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028d2:	f7fe faed 	bl	8000eb0 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e0:	d901      	bls.n	80028e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e007      	b.n	80028f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_PWREx_ConfigSupply+0x70>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f2:	d1ee      	bne.n	80028d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	58024800 	.word	0x58024800

08002904 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800290e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	58024800 	.word	0x58024800

08002924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e3ff      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002944:	4b99      	ldr	r3, [pc, #612]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800294e:	4b97      	ldr	r3, [pc, #604]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	2b10      	cmp	r3, #16
 8002958:	d007      	beq.n	800296a <HAL_RCC_OscConfig+0x46>
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	2b18      	cmp	r3, #24
 800295e:	d110      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d10b      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	4b90      	ldr	r3, [pc, #576]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x12c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d168      	bne.n	8002a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e3d9      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x76>
 800298c:	4b87      	ldr	r3, [pc, #540]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a86      	ldr	r2, [pc, #536]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e02e      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b82      	ldr	r3, [pc, #520]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a81      	ldr	r2, [pc, #516]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b7f      	ldr	r3, [pc, #508]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7e      	ldr	r2, [pc, #504]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0xbc>
 80029c6:	4b79      	ldr	r3, [pc, #484]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a78      	ldr	r2, [pc, #480]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029e0:	4b72      	ldr	r3, [pc, #456]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a71      	ldr	r2, [pc, #452]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b6f      	ldr	r3, [pc, #444]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6e      	ldr	r2, [pc, #440]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fa56 	bl	8000eb0 <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe fa52 	bl	8000eb0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e38d      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1a:	4b64      	ldr	r3, [pc, #400]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe4>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fa42 	bl	8000eb0 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe fa3e 	bl	8000eb0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e379      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a42:	4b5a      	ldr	r3, [pc, #360]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x10c>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80ae 	beq.w	8002bbc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a60:	4b52      	ldr	r3, [pc, #328]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a6a:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_RCC_OscConfig+0x162>
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	2b18      	cmp	r3, #24
 8002a7a:	d13a      	bne.n	8002af2 <HAL_RCC_OscConfig+0x1ce>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d135      	bne.n	8002af2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a86:	4b49      	ldr	r3, [pc, #292]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x17a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e34b      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	f7fe fa37 	bl	8000f10 <HAL_GetREVID>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d817      	bhi.n	8002adc <HAL_RCC_OscConfig+0x1b8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d108      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x1a2>
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002abc:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac4:	e07a      	b.n	8002bbc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac6:	4b39      	ldr	r3, [pc, #228]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	031b      	lsls	r3, r3, #12
 8002ad4:	4935      	ldr	r1, [pc, #212]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ada:	e06f      	b.n	8002bbc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	4930      	ldr	r1, [pc, #192]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af0:	e064      	b.n	8002bbc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d045      	beq.n	8002b86 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002afa:	4b2c      	ldr	r3, [pc, #176]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 0219 	bic.w	r2, r3, #25
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4929      	ldr	r1, [pc, #164]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f9d0 	bl	8000eb0 <HAL_GetTick>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b14:	f7fe f9cc 	bl	8000eb0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e307      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b26:	4b21      	ldr	r3, [pc, #132]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	f7fe f9ed 	bl	8000f10 <HAL_GetREVID>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d817      	bhi.n	8002b70 <HAL_RCC_OscConfig+0x24c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d108      	bne.n	8002b5a <HAL_RCC_OscConfig+0x236>
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b50:	4a16      	ldr	r2, [pc, #88]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b56:	6053      	str	r3, [r2, #4]
 8002b58:	e030      	b.n	8002bbc <HAL_RCC_OscConfig+0x298>
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	031b      	lsls	r3, r3, #12
 8002b68:	4910      	ldr	r1, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
 8002b6e:	e025      	b.n	8002bbc <HAL_RCC_OscConfig+0x298>
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	490b      	ldr	r1, [pc, #44]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	604b      	str	r3, [r1, #4]
 8002b84:	e01a      	b.n	8002bbc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <HAL_RCC_OscConfig+0x288>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b92:	f7fe f98d 	bl	8000eb0 <HAL_GetTick>
 8002b96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7fe f989 	bl	8000eb0 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d903      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e2c4      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
 8002bac:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bb0:	4ba4      	ldr	r3, [pc, #656]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a9 	beq.w	8002d1c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bca:	4b9e      	ldr	r3, [pc, #632]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bd4:	4b9b      	ldr	r3, [pc, #620]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d007      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x2cc>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b18      	cmp	r3, #24
 8002be4:	d13a      	bne.n	8002c5c <HAL_RCC_OscConfig+0x338>
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d135      	bne.n	8002c5c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bf0:	4b94      	ldr	r3, [pc, #592]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_OscConfig+0x2e4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e296      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c08:	f7fe f982 	bl	8000f10 <HAL_GetREVID>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d817      	bhi.n	8002c46 <HAL_RCC_OscConfig+0x322>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d108      	bne.n	8002c30 <HAL_RCC_OscConfig+0x30c>
 8002c1e:	4b89      	ldr	r3, [pc, #548]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c26:	4a87      	ldr	r2, [pc, #540]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c2e:	e075      	b.n	8002d1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c30:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	069b      	lsls	r3, r3, #26
 8002c3e:	4981      	ldr	r1, [pc, #516]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c44:	e06a      	b.n	8002d1c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c46:	4b7f      	ldr	r3, [pc, #508]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	497b      	ldr	r1, [pc, #492]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c5a:	e05f      	b.n	8002d1c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d042      	beq.n	8002cea <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c64:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a76      	ldr	r2, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe f91e 	bl	8000eb0 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c78:	f7fe f91a 	bl	8000eb0 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e255      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c96:	f7fe f93b 	bl	8000f10 <HAL_GetREVID>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d817      	bhi.n	8002cd4 <HAL_RCC_OscConfig+0x3b0>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d108      	bne.n	8002cbe <HAL_RCC_OscConfig+0x39a>
 8002cac:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cb4:	4a63      	ldr	r2, [pc, #396]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cba:	6053      	str	r3, [r2, #4]
 8002cbc:	e02e      	b.n	8002d1c <HAL_RCC_OscConfig+0x3f8>
 8002cbe:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	069b      	lsls	r3, r3, #26
 8002ccc:	495d      	ldr	r1, [pc, #372]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	604b      	str	r3, [r1, #4]
 8002cd2:	e023      	b.n	8002d1c <HAL_RCC_OscConfig+0x3f8>
 8002cd4:	4b5b      	ldr	r3, [pc, #364]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	4958      	ldr	r1, [pc, #352]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60cb      	str	r3, [r1, #12]
 8002ce8:	e018      	b.n	8002d1c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cea:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a55      	ldr	r2, [pc, #340]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe f8db 	bl	8000eb0 <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cfe:	f7fe f8d7 	bl	8000eb0 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e212      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d10:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f0      	bne.n	8002cfe <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d036      	beq.n	8002d96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d019      	beq.n	8002d64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d30:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d34:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f8b8 	bl	8000eb0 <HAL_GetTick>
 8002d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fe f8b4 	bl	8000eb0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1ef      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x420>
 8002d62:	e018      	b.n	8002d96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d64:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d68:	4a36      	ldr	r2, [pc, #216]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe f89e 	bl	8000eb0 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d78:	f7fe f89a 	bl	8000eb0 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1d5      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d036      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d019      	beq.n	8002dde <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002db0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002db4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002db6:	f7fe f87b 	bl	8000eb0 <HAL_GetTick>
 8002dba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dbe:	f7fe f877 	bl	8000eb0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1b2      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x49a>
 8002ddc:	e018      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a18      	ldr	r2, [pc, #96]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002de8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dea:	f7fe f861 	bl	8000eb0 <HAL_GetTick>
 8002dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002df2:	f7fe f85d 	bl	8000eb0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e198      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_RCC_OscConfig+0x520>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8085 	beq.w	8002f28 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_OscConfig+0x524>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <HAL_RCC_OscConfig+0x524>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2a:	f7fe f841 	bl	8000eb0 <HAL_GetTick>
 8002e2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e30:	e00c      	b.n	8002e4c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fe f83d 	bl	8000eb0 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d905      	bls.n	8002e4c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e178      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
 8002e44:	58024400 	.word	0x58024400
 8002e48:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4c:	4b96      	ldr	r3, [pc, #600]	; (80030a8 <HAL_RCC_OscConfig+0x784>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ec      	beq.n	8002e32 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x54a>
 8002e60:	4b92      	ldr	r3, [pc, #584]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a91      	ldr	r2, [pc, #580]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e02d      	b.n	8002eca <HAL_RCC_OscConfig+0x5a6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x56c>
 8002e76:	4b8d      	ldr	r3, [pc, #564]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4a8c      	ldr	r2, [pc, #560]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6713      	str	r3, [r2, #112]	; 0x70
 8002e82:	4b8a      	ldr	r3, [pc, #552]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	4a89      	ldr	r2, [pc, #548]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8e:	e01c      	b.n	8002eca <HAL_RCC_OscConfig+0x5a6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d10c      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x58e>
 8002e98:	4b84      	ldr	r3, [pc, #528]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a83      	ldr	r2, [pc, #524]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea4:	4b81      	ldr	r3, [pc, #516]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea8:	4a80      	ldr	r2, [pc, #512]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb0:	e00b      	b.n	8002eca <HAL_RCC_OscConfig+0x5a6>
 8002eb2:	4b7e      	ldr	r3, [pc, #504]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a7d      	ldr	r2, [pc, #500]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002eb8:	f023 0301 	bic.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	4b7b      	ldr	r3, [pc, #492]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a7a      	ldr	r2, [pc, #488]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d015      	beq.n	8002efe <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed2:	f7fd ffed 	bl	8000eb0 <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ed8:	e00a      	b.n	8002ef0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eda:	f7fd ffe9 	bl	8000eb0 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e122      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef0:	4b6e      	ldr	r3, [pc, #440]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ee      	beq.n	8002eda <HAL_RCC_OscConfig+0x5b6>
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fd ffd7 	bl	8000eb0 <HAL_GetTick>
 8002f02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fd ffd3 	bl	8000eb0 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e10c      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f1c:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1ee      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8101 	beq.w	8003134 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f32:	4b5e      	ldr	r3, [pc, #376]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f3a:	2b18      	cmp	r3, #24
 8002f3c:	f000 80bc 	beq.w	80030b8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	f040 8095 	bne.w	8003074 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b58      	ldr	r3, [pc, #352]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a57      	ldr	r2, [pc, #348]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002f50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7fd ffab 	bl	8000eb0 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f5e:	f7fd ffa7 	bl	8000eb0 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0e2      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f70:	4b4e      	ldr	r3, [pc, #312]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f0      	bne.n	8002f5e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f80:	4b4b      	ldr	r3, [pc, #300]	; (80030b0 <HAL_RCC_OscConfig+0x78c>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	4946      	ldr	r1, [pc, #280]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	628b      	str	r3, [r1, #40]	; 0x28
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	025b      	lsls	r3, r3, #9
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fc6:	4939      	ldr	r1, [pc, #228]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fcc:	4b37      	ldr	r3, [pc, #220]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	4a36      	ldr	r2, [pc, #216]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fd8:	4b34      	ldr	r3, [pc, #208]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fdc:	4b35      	ldr	r3, [pc, #212]	; (80030b4 <HAL_RCC_OscConfig+0x790>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe4:	00d2      	lsls	r2, r2, #3
 8002fe6:	4931      	ldr	r1, [pc, #196]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fec:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f023 020c 	bic.w	r2, r3, #12
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	492c      	ldr	r1, [pc, #176]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f023 0202 	bic.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	4928      	ldr	r1, [pc, #160]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 800300c:	4313      	orrs	r3, r2
 800300e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	4a25      	ldr	r2, [pc, #148]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800301c:	4b23      	ldr	r3, [pc, #140]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	4a22      	ldr	r2, [pc, #136]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003026:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 800302e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003032:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	4a1c      	ldr	r2, [pc, #112]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a19      	ldr	r2, [pc, #100]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fd ff30 	bl	8000eb0 <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fd ff2c 	bl	8000eb0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e067      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0x730>
 8003072:	e05f      	b.n	8003134 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0c      	ldr	r2, [pc, #48]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003080:	f7fd ff16 	bl	8000eb0 <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003088:	f7fd ff12 	bl	8000eb0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e04d      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <HAL_RCC_OscConfig+0x788>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x764>
 80030a6:	e045      	b.n	8003134 <HAL_RCC_OscConfig+0x810>
 80030a8:	58024800 	.word	0x58024800
 80030ac:	58024400 	.word	0x58024400
 80030b0:	fffffc0c 	.word	0xfffffc0c
 80030b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030b8:	4b21      	ldr	r3, [pc, #132]	; (8003140 <HAL_RCC_OscConfig+0x81c>)
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030be:	4b20      	ldr	r3, [pc, #128]	; (8003140 <HAL_RCC_OscConfig+0x81c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d031      	beq.n	8003130 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	f003 0203 	and.w	r2, r3, #3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d12a      	bne.n	8003130 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d122      	bne.n	8003130 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d11a      	bne.n	8003130 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	0a5b      	lsrs	r3, r3, #9
 80030fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003106:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d111      	bne.n	8003130 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	0c1b      	lsrs	r3, r3, #16
 8003110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d108      	bne.n	8003130 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	0e1b      	lsrs	r3, r3, #24
 8003122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3730      	adds	r7, #48	; 0x30
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	58024400 	.word	0x58024400

08003144 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e19c      	b.n	8003492 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b8a      	ldr	r3, [pc, #552]	; (8003384 <HAL_RCC_ClockConfig+0x240>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d910      	bls.n	8003188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b87      	ldr	r3, [pc, #540]	; (8003384 <HAL_RCC_ClockConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 020f 	bic.w	r2, r3, #15
 800316e:	4985      	ldr	r1, [pc, #532]	; (8003384 <HAL_RCC_ClockConfig+0x240>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b83      	ldr	r3, [pc, #524]	; (8003384 <HAL_RCC_ClockConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e184      	b.n	8003492 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d010      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	4b7b      	ldr	r3, [pc, #492]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d908      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031a4:	4b78      	ldr	r3, [pc, #480]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4975      	ldr	r1, [pc, #468]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d010      	beq.n	80031e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	4b70      	ldr	r3, [pc, #448]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d908      	bls.n	80031e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031d2:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	496a      	ldr	r1, [pc, #424]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d010      	beq.n	8003212 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	4b64      	ldr	r3, [pc, #400]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d908      	bls.n	8003212 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003200:	4b61      	ldr	r3, [pc, #388]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	495e      	ldr	r1, [pc, #376]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 800320e:	4313      	orrs	r3, r2
 8003210:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	4b59      	ldr	r3, [pc, #356]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800322a:	429a      	cmp	r2, r3
 800322c:	d908      	bls.n	8003240 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800322e:	4b56      	ldr	r3, [pc, #344]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	4953      	ldr	r1, [pc, #332]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 800323c:	4313      	orrs	r3, r2
 800323e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d010      	beq.n	800326e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	4b4d      	ldr	r3, [pc, #308]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	429a      	cmp	r2, r3
 800325a:	d908      	bls.n	800326e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325c:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f023 020f 	bic.w	r2, r3, #15
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4947      	ldr	r1, [pc, #284]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 800326a:	4313      	orrs	r3, r2
 800326c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d055      	beq.n	8003326 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800327a:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4940      	ldr	r1, [pc, #256]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003288:	4313      	orrs	r3, r2
 800328a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003294:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d121      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0f6      	b.n	8003492 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ac:	4b36      	ldr	r3, [pc, #216]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d115      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0ea      	b.n	8003492 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032c4:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0de      	b.n	8003492 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d4:	4b2c      	ldr	r3, [pc, #176]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0d6      	b.n	8003492 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f023 0207 	bic.w	r2, r3, #7
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4925      	ldr	r1, [pc, #148]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f6:	f7fd fddb 	bl	8000eb0 <HAL_GetTick>
 80032fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fe:	f7fd fdd7 	bl	8000eb0 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0be      	b.n	8003492 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003314:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	429a      	cmp	r2, r3
 8003324:	d1eb      	bne.n	80032fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	429a      	cmp	r2, r3
 8003340:	d208      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f023 020f 	bic.w	r2, r3, #15
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	490e      	ldr	r1, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x244>)
 8003350:	4313      	orrs	r3, r2
 8003352:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_ClockConfig+0x240>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d214      	bcs.n	800338c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_RCC_ClockConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f023 020f 	bic.w	r2, r3, #15
 800336a:	4906      	ldr	r1, [pc, #24]	; (8003384 <HAL_RCC_ClockConfig+0x240>)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_RCC_ClockConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e086      	b.n	8003492 <HAL_RCC_ClockConfig+0x34e>
 8003384:	52002000 	.word	0x52002000
 8003388:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d208      	bcs.n	80033ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033a8:	4b3c      	ldr	r3, [pc, #240]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	4939      	ldr	r1, [pc, #228]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d208      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	492e      	ldr	r1, [pc, #184]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	4b28      	ldr	r3, [pc, #160]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003400:	429a      	cmp	r2, r3
 8003402:	d208      	bcs.n	8003416 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4922      	ldr	r1, [pc, #136]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 8003412:	4313      	orrs	r3, r2
 8003414:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800342e:	429a      	cmp	r2, r3
 8003430:	d208      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003432:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	4917      	ldr	r1, [pc, #92]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 8003440:	4313      	orrs	r3, r2
 8003442:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003444:	f000 f89e 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	4912      	ldr	r1, [pc, #72]	; (80034a0 <HAL_RCC_ClockConfig+0x35c>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
 8003460:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_RCC_ClockConfig+0x358>)
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	4a0d      	ldr	r2, [pc, #52]	; (80034a0 <HAL_RCC_ClockConfig+0x35c>)
 800346c:	5cd3      	ldrb	r3, [r2, r3]
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
 8003478:	4a0a      	ldr	r2, [pc, #40]	; (80034a4 <HAL_RCC_ClockConfig+0x360>)
 800347a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x364>)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003482:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x368>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fcc8 	bl	8000e1c <HAL_InitTick>
 800348c:	4603      	mov	r3, r0
 800348e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	58024400 	.word	0x58024400
 80034a0:	080095b8 	.word	0x080095b8
 80034a4:	20000004 	.word	0x20000004
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000008 	.word	0x20000008

080034b0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08c      	sub	sp, #48	; 0x30
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d12a      	bne.n	8003518 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80034c2:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 80034c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c8:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d2:	4b29      	ldr	r3, [pc, #164]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 80034d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80034e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80034f2:	2300      	movs	r3, #0
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	4619      	mov	r1, r3
 80034fc:	481f      	ldr	r0, [pc, #124]	; (800357c <HAL_RCC_MCOConfig+0xcc>)
 80034fe:	f7fd fe23 	bl	8001148 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	430b      	orrs	r3, r1
 8003510:	4919      	ldr	r1, [pc, #100]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8003516:	e02a      	b.n	800356e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 800351a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800351e:	4a16      	ldr	r2, [pc, #88]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 8003520:	f043 0304 	orr.w	r3, r3, #4
 8003524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 800352a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800353a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353c:	2302      	movs	r3, #2
 800353e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003540:	2303      	movs	r3, #3
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4619      	mov	r1, r3
 8003552:	480b      	ldr	r0, [pc, #44]	; (8003580 <HAL_RCC_MCOConfig+0xd0>)
 8003554:	f7fd fdf8 	bl	8001148 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	01d9      	lsls	r1, r3, #7
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	430b      	orrs	r3, r1
 8003568:	4903      	ldr	r1, [pc, #12]	; (8003578 <HAL_RCC_MCOConfig+0xc8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	610b      	str	r3, [r1, #16]
}
 800356e:	bf00      	nop
 8003570:	3730      	adds	r7, #48	; 0x30
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	58024400 	.word	0x58024400
 800357c:	58020000 	.word	0x58020000
 8003580:	58020800 	.word	0x58020800

08003584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003584:	b480      	push	{r7}
 8003586:	b089      	sub	sp, #36	; 0x24
 8003588:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800358a:	4bb3      	ldr	r3, [pc, #716]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003592:	2b18      	cmp	r3, #24
 8003594:	f200 8155 	bhi.w	8003842 <HAL_RCC_GetSysClockFreq+0x2be>
 8003598:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	08003605 	.word	0x08003605
 80035a4:	08003843 	.word	0x08003843
 80035a8:	08003843 	.word	0x08003843
 80035ac:	08003843 	.word	0x08003843
 80035b0:	08003843 	.word	0x08003843
 80035b4:	08003843 	.word	0x08003843
 80035b8:	08003843 	.word	0x08003843
 80035bc:	08003843 	.word	0x08003843
 80035c0:	0800362b 	.word	0x0800362b
 80035c4:	08003843 	.word	0x08003843
 80035c8:	08003843 	.word	0x08003843
 80035cc:	08003843 	.word	0x08003843
 80035d0:	08003843 	.word	0x08003843
 80035d4:	08003843 	.word	0x08003843
 80035d8:	08003843 	.word	0x08003843
 80035dc:	08003843 	.word	0x08003843
 80035e0:	08003631 	.word	0x08003631
 80035e4:	08003843 	.word	0x08003843
 80035e8:	08003843 	.word	0x08003843
 80035ec:	08003843 	.word	0x08003843
 80035f0:	08003843 	.word	0x08003843
 80035f4:	08003843 	.word	0x08003843
 80035f8:	08003843 	.word	0x08003843
 80035fc:	08003843 	.word	0x08003843
 8003600:	08003637 	.word	0x08003637
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003604:	4b94      	ldr	r3, [pc, #592]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003610:	4b91      	ldr	r3, [pc, #580]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	4a90      	ldr	r2, [pc, #576]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003622:	e111      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003624:	4b8d      	ldr	r3, [pc, #564]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003626:	61bb      	str	r3, [r7, #24]
    break;
 8003628:	e10e      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800362a:	4b8d      	ldr	r3, [pc, #564]	; (8003860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800362c:	61bb      	str	r3, [r7, #24]
    break;
 800362e:	e10b      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003630:	4b8c      	ldr	r3, [pc, #560]	; (8003864 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003632:	61bb      	str	r3, [r7, #24]
    break;
 8003634:	e108      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003636:	4b88      	ldr	r3, [pc, #544]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003640:	4b85      	ldr	r3, [pc, #532]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800364a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800364c:	4b82      	ldr	r3, [pc, #520]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003656:	4b80      	ldr	r3, [pc, #512]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	08db      	lsrs	r3, r3, #3
 800365c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80e1 	beq.w	800383c <HAL_RCC_GetSysClockFreq+0x2b8>
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b02      	cmp	r3, #2
 800367e:	f000 8083 	beq.w	8003788 <HAL_RCC_GetSysClockFreq+0x204>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b02      	cmp	r3, #2
 8003686:	f200 80a1 	bhi.w	80037cc <HAL_RCC_GetSysClockFreq+0x248>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x114>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d056      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003696:	e099      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003698:	4b6f      	ldr	r3, [pc, #444]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d02d      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036a4:	4b6c      	ldr	r3, [pc, #432]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	08db      	lsrs	r3, r3, #3
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	4a6b      	ldr	r2, [pc, #428]	; (800385c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
 80036b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ce:	4b62      	ldr	r3, [pc, #392]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036de:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80036fe:	e087      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800386c <HAL_RCC_GetSysClockFreq+0x2e8>
 800370e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003712:	4b51      	ldr	r3, [pc, #324]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003722:	ed97 6a02 	vldr	s12, [r7, #8]
 8003726:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800372a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003742:	e065      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	ee07 3a90 	vmov	s15, r3
 800374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003870 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003756:	4b40      	ldr	r3, [pc, #256]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003766:	ed97 6a02 	vldr	s12, [r7, #8]
 800376a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800376e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800377a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003786:	e043      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003792:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003874 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800379a:	4b2f      	ldr	r3, [pc, #188]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80037ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037ca:	e021      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003870 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037de:	4b1e      	ldr	r3, [pc, #120]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800380e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003814:	0a5b      	lsrs	r3, r3, #9
 8003816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800381a:	3301      	adds	r3, #1
 800381c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	ee07 3a90 	vmov	s15, r3
 8003824:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003828:	edd7 6a07 	vldr	s13, [r7, #28]
 800382c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003834:	ee17 3a90 	vmov	r3, s15
 8003838:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800383a:	e005      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
    break;
 8003840:	e002      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003844:	61bb      	str	r3, [r7, #24]
    break;
 8003846:	bf00      	nop
  }

  return sysclockfreq;
 8003848:	69bb      	ldr	r3, [r7, #24]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3724      	adds	r7, #36	; 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	58024400 	.word	0x58024400
 800385c:	03d09000 	.word	0x03d09000
 8003860:	003d0900 	.word	0x003d0900
 8003864:	017d7840 	.word	0x017d7840
 8003868:	46000000 	.word	0x46000000
 800386c:	4c742400 	.word	0x4c742400
 8003870:	4a742400 	.word	0x4a742400
 8003874:	4bbebc20 	.word	0x4bbebc20

08003878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800387e:	f7ff fe81 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003882:	4602      	mov	r2, r0
 8003884:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	490f      	ldr	r1, [pc, #60]	; (80038cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	fa22 f303 	lsr.w	r3, r2, r3
 800389a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	4a09      	ldr	r2, [pc, #36]	; (80038cc <HAL_RCC_GetHCLKFreq+0x54>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	fa22 f303 	lsr.w	r3, r2, r3
 80038b2:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80038b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038b6:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	58024400 	.word	0x58024400
 80038cc:	080095b8 	.word	0x080095b8
 80038d0:	20000004 	.word	0x20000004
 80038d4:	20000000 	.word	0x20000000

080038d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038e0:	2300      	movs	r3, #0
 80038e2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038e4:	2300      	movs	r3, #0
 80038e6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d03f      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038fc:	d02a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003902:	d824      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003908:	d018      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800390a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800390e:	d81e      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003918:	d007      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800391a:	e018      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4bab      	ldr	r3, [pc, #684]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	4aaa      	ldr	r2, [pc, #680]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003928:	e015      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2102      	movs	r1, #2
 8003930:	4618      	mov	r0, r3
 8003932:	f000 ff11 	bl	8004758 <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800393a:	e00c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3324      	adds	r3, #36	; 0x24
 8003940:	2102      	movs	r1, #2
 8003942:	4618      	mov	r0, r3
 8003944:	f000 ffba 	bl	80048bc <RCCEx_PLL3_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
      break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800395c:	4b9b      	ldr	r3, [pc, #620]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800395e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003968:	4998      	ldr	r1, [pc, #608]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800396a:	4313      	orrs	r3, r2
 800396c:	650b      	str	r3, [r1, #80]	; 0x50
 800396e:	e001      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	2b00      	cmp	r3, #0
 800397e:	d03d      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	2b04      	cmp	r3, #4
 8003986:	d826      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039a5 	.word	0x080039a5
 8003994:	080039b3 	.word	0x080039b3
 8003998:	080039c5 	.word	0x080039c5
 800399c:	080039dd 	.word	0x080039dd
 80039a0:	080039dd 	.word	0x080039dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a4:	4b89      	ldr	r3, [pc, #548]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4a88      	ldr	r2, [pc, #544]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fecd 	bl	8004758 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039c2:	e00c      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3324      	adds	r3, #36	; 0x24
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 ff76 	bl	80048bc <RCCEx_PLL3_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
      break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80039dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d109      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e4:	4b79      	ldr	r3, [pc, #484]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	f023 0207 	bic.w	r2, r3, #7
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	4976      	ldr	r1, [pc, #472]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	650b      	str	r3, [r1, #80]	; 0x50
 80039f6:	e001      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
 80039fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d042      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a10:	d02b      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a16:	d825      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a18:	2bc0      	cmp	r3, #192	; 0xc0
 8003a1a:	d028      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a1c:	2bc0      	cmp	r3, #192	; 0xc0
 8003a1e:	d821      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d016      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003a24:	2b80      	cmp	r3, #128	; 0x80
 8003a26:	d81d      	bhi.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d007      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003a30:	e018      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a32:	4b66      	ldr	r3, [pc, #408]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4a65      	ldr	r2, [pc, #404]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a3e:	e017      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fe86 	bl	8004758 <RCCEx_PLL2_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a50:	e00e      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3324      	adds	r3, #36	; 0x24
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 ff2f 	bl	80048bc <RCCEx_PLL3_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003a62:	e005      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	75fb      	strb	r3, [r7, #23]
      break;
 8003a68:	e002      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a6a:	bf00      	nop
 8003a6c:	e000      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003a6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a76:	4b55      	ldr	r3, [pc, #340]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	4952      	ldr	r1, [pc, #328]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	650b      	str	r3, [r1, #80]	; 0x50
 8003a88:	e001      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d049      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003aa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aa4:	d030      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003aa6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aaa:	d82a      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003aac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ab0:	d02c      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003ab2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ab6:	d824      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003abc:	d018      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac2:	d81e      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003acc:	d007      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003ace:	e018      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4b3e      	ldr	r3, [pc, #248]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4a3d      	ldr	r2, [pc, #244]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003adc:	e017      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fe37 	bl	8004758 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003aee:	e00e      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3324      	adds	r3, #36	; 0x24
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fee0 	bl	80048bc <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b00:	e005      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b22:	492a      	ldr	r1, [pc, #168]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	658b      	str	r3, [r1, #88]	; 0x58
 8003b28:	e001      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d04c      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b44:	d030      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b4a:	d82a      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b50:	d02c      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003b52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b56:	d824      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b5c:	d018      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b62:	d81e      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b6c:	d007      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003b6e:	e018      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a15      	ldr	r2, [pc, #84]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b7c:	e017      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 fde7 	bl	8004758 <RCCEx_PLL2_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003b8e:	e00e      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3324      	adds	r3, #36	; 0x24
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fe90 	bl	80048bc <RCCEx_PLL3_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ba0:	e005      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bb4:	4b05      	ldr	r3, [pc, #20]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bc2:	4902      	ldr	r1, [pc, #8]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	658b      	str	r3, [r1, #88]	; 0x58
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003bca:	bf00      	nop
 8003bcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d032      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be4:	2b30      	cmp	r3, #48	; 0x30
 8003be6:	d01c      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003be8:	2b30      	cmp	r3, #48	; 0x30
 8003bea:	d817      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d00c      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d813      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d016      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d10f      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfc:	4baf      	ldr	r3, [pc, #700]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4aae      	ldr	r2, [pc, #696]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c08:	e00e      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fda1 	bl	8004758 <RCCEx_PLL2_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003c1a:	e005      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c20:	e002      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c2e:	4ba3      	ldr	r3, [pc, #652]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3a:	49a0      	ldr	r1, [pc, #640]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c40:	e001      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c42:	7dfb      	ldrb	r3, [r7, #23]
 8003c44:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d047      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c5a:	d030      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c60:	d82a      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c66:	d02c      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003c68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c6c:	d824      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c72:	d018      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c78:	d81e      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c82:	d007      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003c84:	e018      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c86:	4b8d      	ldr	r3, [pc, #564]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	4a8c      	ldr	r2, [pc, #560]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003c92:	e017      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fd5c 	bl	8004758 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ca4:	e00e      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3324      	adds	r3, #36	; 0x24
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fe05 	bl	80048bc <RCCEx_PLL3_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cb6:	e005      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbc:	e002      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cca:	4b7c      	ldr	r3, [pc, #496]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cce:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd6:	4979      	ldr	r1, [pc, #484]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	650b      	str	r3, [r1, #80]	; 0x50
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
 8003ce0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d049      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cf6:	d02e      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cfc:	d828      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d02:	d02a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003d04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d08:	d822      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d0e:	d026      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003d10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d14:	d81c      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d20:	d816      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01d      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2a:	d111      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	2101      	movs	r1, #1
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fd10 	bl	8004758 <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d3c:	e012      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3324      	adds	r3, #36	; 0x24
 8003d42:	2101      	movs	r1, #1
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fdb9 	bl	80048bc <RCCEx_PLL3_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d4e:	e009      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
      break;
 8003d54:	e006      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d56:	bf00      	nop
 8003d58:	e004      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e002      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e000      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d6a:	4b54      	ldr	r3, [pc, #336]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d76:	4951      	ldr	r1, [pc, #324]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	650b      	str	r3, [r1, #80]	; 0x50
 8003d7c:	e001      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d04b      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d98:	d02e      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9e:	d828      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d02a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003daa:	d822      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db0:	d026      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db6:	d81c      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dbc:	d010      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc2:	d816      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01d      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dcc:	d111      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fcbf 	bl	8004758 <RCCEx_PLL2_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003dde:	e012      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3324      	adds	r3, #36	; 0x24
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fd68 	bl	80048bc <RCCEx_PLL3_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003df0:	e009      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
      break;
 8003df6:	e006      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003df8:	bf00      	nop
 8003dfa:	e004      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003dfc:	bf00      	nop
 8003dfe:	e002      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e06:	7dfb      	ldrb	r3, [r7, #23]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e1a:	4928      	ldr	r1, [pc, #160]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	658b      	str	r3, [r1, #88]	; 0x58
 8003e20:	e001      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e22:	7dfb      	ldrb	r3, [r7, #23]
 8003e24:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d02f      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e3a:	d00e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e40:	d814      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d015      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e4a:	d10f      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e58:	e00c      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fc79 	bl	8004758 <RCCEx_PLL2_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e6a:	e003      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e70:	e000      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e86:	490d      	ldr	r1, [pc, #52]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	650b      	str	r3, [r1, #80]	; 0x50
 8003e8c:	e001      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
 8003e90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d033      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d81c      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ee7 	.word	0x08003ee7
 8003eb0:	08003ec1 	.word	0x08003ec1
 8003eb4:	08003ecf 	.word	0x08003ecf
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec0:	4bb8      	ldr	r3, [pc, #736]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	4ab7      	ldr	r2, [pc, #732]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fc3f 	bl	8004758 <RCCEx_PLL2_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003eee:	4bad      	ldr	r3, [pc, #692]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	f023 0203 	bic.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	49aa      	ldr	r1, [pc, #680]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f00:	e001      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8086 	beq.w	8004020 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f14:	4ba4      	ldr	r3, [pc, #656]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4aa3      	ldr	r2, [pc, #652]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f20:	f7fc ffc6 	bl	8000eb0 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f26:	e009      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f28:	f7fc ffc2 	bl	8000eb0 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d902      	bls.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	75fb      	strb	r3, [r7, #23]
        break;
 8003f3a:	e005      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f3c:	4b9a      	ldr	r3, [pc, #616]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ef      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003f48:	7dfb      	ldrb	r3, [r7, #23]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d166      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f4e:	4b95      	ldr	r3, [pc, #596]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f58:	4053      	eors	r3, r2
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d013      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f62:	4b90      	ldr	r3, [pc, #576]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f6c:	4b8d      	ldr	r3, [pc, #564]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f70:	4a8c      	ldr	r2, [pc, #560]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f76:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f78:	4b8a      	ldr	r3, [pc, #552]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	4a89      	ldr	r2, [pc, #548]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f84:	4a87      	ldr	r2, [pc, #540]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f94:	d115      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fc ff8b 	bl	8000eb0 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f9c:	e00b      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fc ff87 	bl	8000eb0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d902      	bls.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8003fb4:	e005      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb6:	4b7b      	ldr	r3, [pc, #492]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0ed      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003fc2:	7dfb      	ldrb	r3, [r7, #23]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d126      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003fd8:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fe6:	0919      	lsrs	r1, r3, #4
 8003fe8:	4b70      	ldr	r3, [pc, #448]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003fea:	400b      	ands	r3, r1
 8003fec:	496d      	ldr	r1, [pc, #436]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	610b      	str	r3, [r1, #16]
 8003ff2:	e005      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003ff4:	4b6b      	ldr	r3, [pc, #428]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	4a6a      	ldr	r2, [pc, #424]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ffa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ffe:	6113      	str	r3, [r2, #16]
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800400a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400e:	4965      	ldr	r1, [pc, #404]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004010:	4313      	orrs	r3, r2
 8004012:	670b      	str	r3, [r1, #112]	; 0x70
 8004014:	e004      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	75bb      	strb	r3, [r7, #22]
 800401a:	e001      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d07e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004030:	2b28      	cmp	r3, #40	; 0x28
 8004032:	d867      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004034:	a201      	add	r2, pc, #4	; (adr r2, 800403c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	0800410b 	.word	0x0800410b
 8004040:	08004105 	.word	0x08004105
 8004044:	08004105 	.word	0x08004105
 8004048:	08004105 	.word	0x08004105
 800404c:	08004105 	.word	0x08004105
 8004050:	08004105 	.word	0x08004105
 8004054:	08004105 	.word	0x08004105
 8004058:	08004105 	.word	0x08004105
 800405c:	080040e1 	.word	0x080040e1
 8004060:	08004105 	.word	0x08004105
 8004064:	08004105 	.word	0x08004105
 8004068:	08004105 	.word	0x08004105
 800406c:	08004105 	.word	0x08004105
 8004070:	08004105 	.word	0x08004105
 8004074:	08004105 	.word	0x08004105
 8004078:	08004105 	.word	0x08004105
 800407c:	080040f3 	.word	0x080040f3
 8004080:	08004105 	.word	0x08004105
 8004084:	08004105 	.word	0x08004105
 8004088:	08004105 	.word	0x08004105
 800408c:	08004105 	.word	0x08004105
 8004090:	08004105 	.word	0x08004105
 8004094:	08004105 	.word	0x08004105
 8004098:	08004105 	.word	0x08004105
 800409c:	0800410b 	.word	0x0800410b
 80040a0:	08004105 	.word	0x08004105
 80040a4:	08004105 	.word	0x08004105
 80040a8:	08004105 	.word	0x08004105
 80040ac:	08004105 	.word	0x08004105
 80040b0:	08004105 	.word	0x08004105
 80040b4:	08004105 	.word	0x08004105
 80040b8:	08004105 	.word	0x08004105
 80040bc:	0800410b 	.word	0x0800410b
 80040c0:	08004105 	.word	0x08004105
 80040c4:	08004105 	.word	0x08004105
 80040c8:	08004105 	.word	0x08004105
 80040cc:	08004105 	.word	0x08004105
 80040d0:	08004105 	.word	0x08004105
 80040d4:	08004105 	.word	0x08004105
 80040d8:	08004105 	.word	0x08004105
 80040dc:	0800410b 	.word	0x0800410b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fb36 	bl	8004758 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80040f0:	e00c      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fbdf 	bl	80048bc <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004102:	e003      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
      break;
 8004108:	e000      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800410a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411e:	4921      	ldr	r1, [pc, #132]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	654b      	str	r3, [r1, #84]	; 0x54
 8004124:	e001      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03e      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413a:	2b05      	cmp	r3, #5
 800413c:	d820      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004187 	.word	0x08004187
 8004148:	0800415d 	.word	0x0800415d
 800414c:	0800416f 	.word	0x0800416f
 8004150:	08004187 	.word	0x08004187
 8004154:	08004187 	.word	0x08004187
 8004158:	08004187 	.word	0x08004187
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3304      	adds	r3, #4
 8004160:	2101      	movs	r1, #1
 8004162:	4618      	mov	r0, r3
 8004164:	f000 faf8 	bl	8004758 <RCCEx_PLL2_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800416c:	e00c      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3324      	adds	r3, #36	; 0x24
 8004172:	2101      	movs	r1, #1
 8004174:	4618      	mov	r0, r3
 8004176:	f000 fba1 	bl	80048bc <RCCEx_PLL3_Config>
 800417a:	4603      	mov	r3, r0
 800417c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800417e:	e003      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
      break;
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8004186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d110      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f023 0207 	bic.w	r2, r3, #7
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419a:	4902      	ldr	r1, [pc, #8]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800419c:	4313      	orrs	r3, r2
 800419e:	654b      	str	r3, [r1, #84]	; 0x54
 80041a0:	e008      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
 80041a8:	58024800 	.word	0x58024800
 80041ac:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d039      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d820      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	08004213 	.word	0x08004213
 80041d4:	080041e9 	.word	0x080041e9
 80041d8:	080041fb 	.word	0x080041fb
 80041dc:	08004213 	.word	0x08004213
 80041e0:	08004213 	.word	0x08004213
 80041e4:	08004213 	.word	0x08004213
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	2101      	movs	r1, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fab2 	bl	8004758 <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80041f8:	e00c      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3324      	adds	r3, #36	; 0x24
 80041fe:	2101      	movs	r1, #1
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fb5b 	bl	80048bc <RCCEx_PLL3_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800420a:	e003      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	75fb      	strb	r3, [r7, #23]
      break;
 8004210:	e000      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004212:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800421a:	4bb7      	ldr	r3, [pc, #732]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	f023 0207 	bic.w	r2, r3, #7
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	49b3      	ldr	r1, [pc, #716]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800422a:	4313      	orrs	r3, r2
 800422c:	658b      	str	r3, [r1, #88]	; 0x58
 800422e:	e001      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	7dfb      	ldrb	r3, [r7, #23]
 8004232:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d04b      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800424a:	d02e      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800424c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004250:	d828      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d02a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d822      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800425e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004262:	d026      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004264:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004268:	d81c      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800426a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800426e:	d010      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004274:	d816      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01d      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800427a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800427e:	d111      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fa66 	bl	8004758 <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004290:	e012      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	; 0x24
 8004296:	2102      	movs	r1, #2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fb0f 	bl	80048bc <RCCEx_PLL3_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042a2:	e009      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	75fb      	strb	r3, [r7, #23]
      break;
 80042a8:	e006      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042aa:	bf00      	nop
 80042ac:	e004      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042ae:	bf00      	nop
 80042b0:	e002      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80042b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042be:	4b8e      	ldr	r3, [pc, #568]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042cc:	498a      	ldr	r1, [pc, #552]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	654b      	str	r3, [r1, #84]	; 0x54
 80042d2:	e001      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d04b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042ee:	d02e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80042f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042f4:	d828      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d02a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d822      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004302:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004306:	d026      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004308:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800430c:	d81c      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800430e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004312:	d010      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004318:	d816      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01d      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d111      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	2100      	movs	r1, #0
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fa14 	bl	8004758 <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004334:	e012      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3324      	adds	r3, #36	; 0x24
 800433a:	2102      	movs	r1, #2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fabd 	bl	80048bc <RCCEx_PLL3_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004346:	e009      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	75fb      	strb	r3, [r7, #23]
      break;
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800434e:	bf00      	nop
 8004350:	e004      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004352:	bf00      	nop
 8004354:	e002      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004356:	bf00      	nop
 8004358:	e000      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800435a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004362:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004370:	4961      	ldr	r1, [pc, #388]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004372:	4313      	orrs	r3, r2
 8004374:	658b      	str	r3, [r1, #88]	; 0x58
 8004376:	e001      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004384:	2b00      	cmp	r3, #0
 8004386:	d04b      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800438e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004392:	d02e      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004394:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004398:	d828      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800439a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439e:	d02a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80043a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a4:	d822      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043aa:	d026      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80043ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043b0:	d81c      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b6:	d010      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80043b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043bc:	d816      	bhi.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01d      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80043c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c6:	d111      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f9c2 	bl	8004758 <RCCEx_PLL2_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043d8:	e012      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3324      	adds	r3, #36	; 0x24
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fa6b 	bl	80048bc <RCCEx_PLL3_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80043ea:	e009      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75fb      	strb	r3, [r7, #23]
      break;
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043f2:	bf00      	nop
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80043fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004406:	4b3c      	ldr	r3, [pc, #240]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004414:	4938      	ldr	r1, [pc, #224]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004416:	4313      	orrs	r3, r2
 8004418:	658b      	str	r3, [r1, #88]	; 0x58
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0308 	and.w	r3, r3, #8
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d10a      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	2102      	movs	r1, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fa3c 	bl	80048bc <RCCEx_PLL3_Config>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800444e:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004452:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800445c:	4926      	ldr	r1, [pc, #152]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800445e:	4313      	orrs	r3, r2
 8004460:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004478:	d10a      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3324      	adds	r3, #36	; 0x24
 800447e:	2102      	movs	r1, #2
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fa1b 	bl	80048bc <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004490:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800449e:	4916      	ldr	r1, [pc, #88]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d036      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ba:	d01f      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80044bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c0:	d817      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80044cc:	e011      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f93f 	bl	8004758 <RCCEx_PLL2_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044de:	e00e      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3324      	adds	r3, #36	; 0x24
 80044e4:	2102      	movs	r1, #2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 f9e8 	bl	80048bc <RCCEx_PLL3_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80044f0:	e005      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80044f8:	58024400 	.word	0x58024400
      break;
 80044fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004504:	4b93      	ldr	r3, [pc, #588]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004512:	4990      	ldr	r1, [pc, #576]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004514:	4313      	orrs	r3, r2
 8004516:	658b      	str	r3, [r1, #88]	; 0x58
 8004518:	e001      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d033      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004530:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004534:	d01c      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004536:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800453a:	d816      	bhi.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800453c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004540:	d003      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004542:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004546:	d007      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004548:	e00f      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	4a81      	ldr	r2, [pc, #516]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004556:	e00c      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3324      	adds	r3, #36	; 0x24
 800455c:	2101      	movs	r1, #1
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f9ac 	bl	80048bc <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004568:	e003      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
      break;
 800456e:	e000      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004570:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004578:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004586:	4973      	ldr	r1, [pc, #460]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004588:	4313      	orrs	r3, r2
 800458a:	654b      	str	r3, [r1, #84]	; 0x54
 800458c:	e001      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d029      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045aa:	d007      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80045ac:	e00f      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045ae:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045ba:	e00b      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3304      	adds	r3, #4
 80045c0:	2102      	movs	r1, #2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f8c8 	bl	8004758 <RCCEx_PLL2_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80045cc:	e002      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
      break;
 80045d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045da:	4b5e      	ldr	r3, [pc, #376]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	495b      	ldr	r1, [pc, #364]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045ec:	e001      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3324      	adds	r3, #36	; 0x24
 8004602:	2102      	movs	r1, #2
 8004604:	4618      	mov	r0, r3
 8004606:	f000 f959 	bl	80048bc <RCCEx_PLL3_Config>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d030      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004628:	d017      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800462a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800462e:	d811      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004634:	d013      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800463a:	d80b      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d010      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004644:	d106      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004646:	4b43      	ldr	r3, [pc, #268]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4a42      	ldr	r2, [pc, #264]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800464c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004652:	e007      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	75fb      	strb	r3, [r7, #23]
      break;
 8004658:	e004      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800466a:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004676:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	654b      	str	r3, [r1, #84]	; 0x54
 800467c:	e001      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800468e:	4b31      	ldr	r3, [pc, #196]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004692:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	492e      	ldr	r1, [pc, #184]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046ba:	4926      	ldr	r1, [pc, #152]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046cc:	4b21      	ldr	r3, [pc, #132]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d8:	491e      	ldr	r1, [pc, #120]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ea:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4a19      	ldr	r2, [pc, #100]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046f4:	6113      	str	r3, [r2, #16]
 80046f6:	4b17      	ldr	r3, [pc, #92]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004700:	4914      	ldr	r1, [pc, #80]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da08      	bge.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800470e:	4b11      	ldr	r3, [pc, #68]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	490e      	ldr	r1, [pc, #56]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800471c:	4313      	orrs	r3, r2
 800471e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800472e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004730:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	4906      	ldr	r1, [pc, #24]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800473c:	4313      	orrs	r3, r2
 800473e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004740:	7dbb      	ldrb	r3, [r7, #22]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	58024400 	.word	0x58024400

08004758 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004766:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	2b03      	cmp	r3, #3
 8004770:	d101      	bne.n	8004776 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e099      	b.n	80048aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004776:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a4e      	ldr	r2, [pc, #312]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800477c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004782:	f7fc fb95 	bl	8000eb0 <HAL_GetTick>
 8004786:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004788:	e008      	b.n	800479c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800478a:	f7fc fb91 	bl	8000eb0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e086      	b.n	80048aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800479c:	4b45      	ldr	r3, [pc, #276]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80047a8:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	031b      	lsls	r3, r3, #12
 80047b6:	493f      	ldr	r1, [pc, #252]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	628b      	str	r3, [r1, #40]	; 0x28
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	025b      	lsls	r3, r3, #9
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	061b      	lsls	r3, r3, #24
 80047e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047ec:	4931      	ldr	r1, [pc, #196]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047f2:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	492d      	ldr	r1, [pc, #180]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004800:	4313      	orrs	r3, r2
 8004802:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004804:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f023 0220 	bic.w	r2, r3, #32
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	4928      	ldr	r1, [pc, #160]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004812:	4313      	orrs	r3, r2
 8004814:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004816:	4b27      	ldr	r3, [pc, #156]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800481c:	f023 0310 	bic.w	r3, r3, #16
 8004820:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004824:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004826:	4b24      	ldr	r3, [pc, #144]	; (80048b8 <RCCEx_PLL2_Config+0x160>)
 8004828:	4013      	ands	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	69d2      	ldr	r2, [r2, #28]
 800482e:	00d2      	lsls	r2, r2, #3
 8004830:	4920      	ldr	r1, [pc, #128]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004836:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800483c:	f043 0310 	orr.w	r3, r3, #16
 8004840:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800484e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004854:	e00f      	b.n	8004876 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d106      	bne.n	800486a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004868:	e005      	b.n	8004876 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004874:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004876:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800487c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004882:	f7fc fb15 	bl	8000eb0 <HAL_GetTick>
 8004886:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004888:	e008      	b.n	800489c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800488a:	f7fc fb11 	bl	8000eb0 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e006      	b.n	80048aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800489c:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <RCCEx_PLL2_Config+0x15c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80048a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	58024400 	.word	0x58024400
 80048b8:	ffff0007 	.word	0xffff0007

080048bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048ca:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d101      	bne.n	80048da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e099      	b.n	8004a0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048da:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a4e      	ldr	r2, [pc, #312]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e6:	f7fc fae3 	bl	8000eb0 <HAL_GetTick>
 80048ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048ec:	e008      	b.n	8004900 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80048ee:	f7fc fadf 	bl	8000eb0 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e086      	b.n	8004a0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004900:	4b45      	ldr	r3, [pc, #276]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1f0      	bne.n	80048ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800490c:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	051b      	lsls	r3, r3, #20
 800491a:	493f      	ldr	r1, [pc, #252]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	628b      	str	r3, [r1, #40]	; 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	3b01      	subs	r3, #1
 8004926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	3b01      	subs	r3, #1
 8004930:	025b      	lsls	r3, r3, #9
 8004932:	b29b      	uxth	r3, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	3b01      	subs	r3, #1
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004950:	4931      	ldr	r1, [pc, #196]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004956:	4b30      	ldr	r3, [pc, #192]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	492d      	ldr	r1, [pc, #180]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004964:	4313      	orrs	r3, r2
 8004966:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004968:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	4928      	ldr	r1, [pc, #160]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004976:	4313      	orrs	r3, r2
 8004978:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800497a:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800498a:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <RCCEx_PLL3_Config+0x160>)
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	69d2      	ldr	r2, [r2, #28]
 8004992:	00d2      	lsls	r2, r2, #3
 8004994:	4920      	ldr	r1, [pc, #128]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049b8:	e00f      	b.n	80049da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d106      	bne.n	80049ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80049c0:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049cc:	e005      	b.n	80049da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d2:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049da:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a0e      	ldr	r2, [pc, #56]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e6:	f7fc fa63 	bl	8000eb0 <HAL_GetTick>
 80049ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049ec:	e008      	b.n	8004a00 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049ee:	f7fc fa5f 	bl	8000eb0 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e006      	b.n	8004a0e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <RCCEx_PLL3_Config+0x15c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	58024400 	.word	0x58024400
 8004a1c:	ffff0007 	.word	0xffff0007

08004a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e049      	b.n	8004ac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc f84a 	bl	8000ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f000 fb52 	bl	8005108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e049      	b.n	8004b74 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f841 	bl	8004b7c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fafb 	bl	8005108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d122      	bne.n	8004bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d11b      	bne.n	8004bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0202 	mvn.w	r2, #2
 8004bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa7a 	bl	80050cc <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa6c 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fa7d 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b04      	cmp	r3, #4
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0204 	mvn.w	r2, #4
 8004c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fa50 	bl	80050cc <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fa42 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fa53 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	2b08      	cmp	r3, #8
 8004c4c:	d122      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d11b      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0208 	mvn.w	r2, #8
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2204      	movs	r2, #4
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa26 	bl	80050cc <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fa18 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fa29 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b10      	cmp	r3, #16
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0210 	mvn.w	r2, #16
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2208      	movs	r2, #8
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9fc 	bl	80050cc <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f9ee 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f9ff 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0201 	mvn.w	r2, #1
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f9c8 	bl	80050a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b80      	cmp	r3, #128	; 0x80
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fe7c 	bl	8005a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d4e:	d10e      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b80      	cmp	r3, #128	; 0x80
 8004d5c:	d107      	bne.n	8004d6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fe6f 	bl	8005a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d10e      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d107      	bne.n	8004d9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f9ad 	bl	80050f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d10e      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d107      	bne.n	8004dc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0220 	mvn.w	r2, #32
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fe2f 	bl	8005a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_TIM_OC_ConfigChannel+0x1a>
 8004de6:	2302      	movs	r3, #2
 8004de8:	e064      	b.n	8004eb4 <HAL_TIM_OC_ConfigChannel+0xe4>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b14      	cmp	r3, #20
 8004df6:	d857      	bhi.n	8004ea8 <HAL_TIM_OC_ConfigChannel+0xd8>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004ea9 	.word	0x08004ea9
 8004e08:	08004ea9 	.word	0x08004ea9
 8004e0c:	08004ea9 	.word	0x08004ea9
 8004e10:	08004e63 	.word	0x08004e63
 8004e14:	08004ea9 	.word	0x08004ea9
 8004e18:	08004ea9 	.word	0x08004ea9
 8004e1c:	08004ea9 	.word	0x08004ea9
 8004e20:	08004e71 	.word	0x08004e71
 8004e24:	08004ea9 	.word	0x08004ea9
 8004e28:	08004ea9 	.word	0x08004ea9
 8004e2c:	08004ea9 	.word	0x08004ea9
 8004e30:	08004e7f 	.word	0x08004e7f
 8004e34:	08004ea9 	.word	0x08004ea9
 8004e38:	08004ea9 	.word	0x08004ea9
 8004e3c:	08004ea9 	.word	0x08004ea9
 8004e40:	08004e8d 	.word	0x08004e8d
 8004e44:	08004ea9 	.word	0x08004ea9
 8004e48:	08004ea9 	.word	0x08004ea9
 8004e4c:	08004ea9 	.word	0x08004ea9
 8004e50:	08004e9b 	.word	0x08004e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 f9ee 	bl	800523c <TIM_OC1_SetConfig>
      break;
 8004e60:	e023      	b.n	8004eaa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fa77 	bl	800535c <TIM_OC2_SetConfig>
      break;
 8004e6e:	e01c      	b.n	8004eaa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fafa 	bl	8005470 <TIM_OC3_SetConfig>
      break;
 8004e7c:	e015      	b.n	8004eaa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 fb79 	bl	800557c <TIM_OC4_SetConfig>
      break;
 8004e8a:	e00e      	b.n	8004eaa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fbda 	bl	800564c <TIM_OC5_SetConfig>
      break;
 8004e98:	e007      	b.n	8004eaa <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fc35 	bl	8005710 <TIM_OC6_SetConfig>
      break;
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8004ea8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_ConfigClockSource+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0db      	b.n	800508c <HAL_TIM_ConfigClockSource+0x1d0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4b69      	ldr	r3, [pc, #420]	; (8005094 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a63      	ldr	r2, [pc, #396]	; (8005098 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	f000 80a9 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f10:	4a61      	ldr	r2, [pc, #388]	; (8005098 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	f200 80ae 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f18:	4a60      	ldr	r2, [pc, #384]	; (800509c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	f000 80a1 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f20:	4a5e      	ldr	r2, [pc, #376]	; (800509c <HAL_TIM_ConfigClockSource+0x1e0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	f200 80a6 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f28:	4a5d      	ldr	r2, [pc, #372]	; (80050a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	f000 8099 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f30:	4a5b      	ldr	r2, [pc, #364]	; (80050a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	f200 809e 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f3c:	f000 8091 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004f44:	f200 8096 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4c:	f000 8089 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f54:	f200 808e 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5c:	d03e      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0x120>
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	f200 8087 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6a:	f000 8085 	beq.w	8005078 <HAL_TIM_ConfigClockSource+0x1bc>
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f72:	d87f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f74:	2b70      	cmp	r3, #112	; 0x70
 8004f76:	d01a      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xf2>
 8004f78:	2b70      	cmp	r3, #112	; 0x70
 8004f7a:	d87b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f7c:	2b60      	cmp	r3, #96	; 0x60
 8004f7e:	d050      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x166>
 8004f80:	2b60      	cmp	r3, #96	; 0x60
 8004f82:	d877      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f84:	2b50      	cmp	r3, #80	; 0x50
 8004f86:	d03c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0x146>
 8004f88:	2b50      	cmp	r3, #80	; 0x50
 8004f8a:	d873      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d058      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x186>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d86f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f94:	2b30      	cmp	r3, #48	; 0x30
 8004f96:	d064      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	d86b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d060      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d867      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05c      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d05a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fac:	e062      	b.n	8005074 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f000 fc89 	bl	80058d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	609a      	str	r2, [r3, #8]
      break;
 8004fda:	e04e      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f000 fc72 	bl	80058d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffe:	609a      	str	r2, [r3, #8]
      break;
 8005000:	e03b      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	461a      	mov	r2, r3
 8005010:	f000 fbe2 	bl	80057d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2150      	movs	r1, #80	; 0x50
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fc3c 	bl	8005898 <TIM_ITRx_SetConfig>
      break;
 8005020:	e02b      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	461a      	mov	r2, r3
 8005030:	f000 fc01 	bl	8005836 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2160      	movs	r1, #96	; 0x60
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fc2c 	bl	8005898 <TIM_ITRx_SetConfig>
      break;
 8005040:	e01b      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	461a      	mov	r2, r3
 8005050:	f000 fbc2 	bl	80057d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2140      	movs	r1, #64	; 0x40
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fc1c 	bl	8005898 <TIM_ITRx_SetConfig>
      break;
 8005060:	e00b      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f000 fc13 	bl	8005898 <TIM_ITRx_SetConfig>
        break;
 8005072:	e002      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8005078:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	ffceff88 	.word	0xffceff88
 8005098:	00100040 	.word	0x00100040
 800509c:	00100030 	.word	0x00100030
 80050a0:	00100020 	.word	0x00100020

080050a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a40      	ldr	r2, [pc, #256]	; (800521c <TIM_Base_SetConfig+0x114>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d00f      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3d      	ldr	r2, [pc, #244]	; (8005220 <TIM_Base_SetConfig+0x118>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3c      	ldr	r2, [pc, #240]	; (8005224 <TIM_Base_SetConfig+0x11c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a3b      	ldr	r2, [pc, #236]	; (8005228 <TIM_Base_SetConfig+0x120>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3a      	ldr	r2, [pc, #232]	; (800522c <TIM_Base_SetConfig+0x124>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2f      	ldr	r2, [pc, #188]	; (800521c <TIM_Base_SetConfig+0x114>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01f      	beq.n	80051a2 <TIM_Base_SetConfig+0x9a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d01b      	beq.n	80051a2 <TIM_Base_SetConfig+0x9a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <TIM_Base_SetConfig+0x118>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d017      	beq.n	80051a2 <TIM_Base_SetConfig+0x9a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <TIM_Base_SetConfig+0x11c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <TIM_Base_SetConfig+0x9a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <TIM_Base_SetConfig+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00f      	beq.n	80051a2 <TIM_Base_SetConfig+0x9a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a29      	ldr	r2, [pc, #164]	; (800522c <TIM_Base_SetConfig+0x124>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <TIM_Base_SetConfig+0x9a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a28      	ldr	r2, [pc, #160]	; (8005230 <TIM_Base_SetConfig+0x128>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <TIM_Base_SetConfig+0x9a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a27      	ldr	r2, [pc, #156]	; (8005234 <TIM_Base_SetConfig+0x12c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_Base_SetConfig+0x9a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a26      	ldr	r2, [pc, #152]	; (8005238 <TIM_Base_SetConfig+0x130>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d108      	bne.n	80051b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a10      	ldr	r2, [pc, #64]	; (800521c <TIM_Base_SetConfig+0x114>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00f      	beq.n	8005200 <TIM_Base_SetConfig+0xf8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a12      	ldr	r2, [pc, #72]	; (800522c <TIM_Base_SetConfig+0x124>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00b      	beq.n	8005200 <TIM_Base_SetConfig+0xf8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a11      	ldr	r2, [pc, #68]	; (8005230 <TIM_Base_SetConfig+0x128>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_Base_SetConfig+0xf8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a10      	ldr	r2, [pc, #64]	; (8005234 <TIM_Base_SetConfig+0x12c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_Base_SetConfig+0xf8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a0f      	ldr	r2, [pc, #60]	; (8005238 <TIM_Base_SetConfig+0x130>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d103      	bne.n	8005208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	615a      	str	r2, [r3, #20]
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40010400 	.word	0x40010400
 8005230:	40014000 	.word	0x40014000
 8005234:	40014400 	.word	0x40014400
 8005238:	40014800 	.word	0x40014800

0800523c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0201 	bic.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4b37      	ldr	r3, [pc, #220]	; (8005344 <TIM_OC1_SetConfig+0x108>)
 8005268:	4013      	ands	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0303 	bic.w	r3, r3, #3
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f023 0302 	bic.w	r3, r3, #2
 8005284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a2d      	ldr	r2, [pc, #180]	; (8005348 <TIM_OC1_SetConfig+0x10c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d00f      	beq.n	80052b8 <TIM_OC1_SetConfig+0x7c>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a2c      	ldr	r2, [pc, #176]	; (800534c <TIM_OC1_SetConfig+0x110>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00b      	beq.n	80052b8 <TIM_OC1_SetConfig+0x7c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a2b      	ldr	r2, [pc, #172]	; (8005350 <TIM_OC1_SetConfig+0x114>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d007      	beq.n	80052b8 <TIM_OC1_SetConfig+0x7c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <TIM_OC1_SetConfig+0x118>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_OC1_SetConfig+0x7c>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a29      	ldr	r2, [pc, #164]	; (8005358 <TIM_OC1_SetConfig+0x11c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d10c      	bne.n	80052d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 0308 	bic.w	r3, r3, #8
 80052be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f023 0304 	bic.w	r3, r3, #4
 80052d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <TIM_OC1_SetConfig+0x10c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00f      	beq.n	80052fa <TIM_OC1_SetConfig+0xbe>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <TIM_OC1_SetConfig+0x110>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00b      	beq.n	80052fa <TIM_OC1_SetConfig+0xbe>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <TIM_OC1_SetConfig+0x114>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <TIM_OC1_SetConfig+0xbe>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a19      	ldr	r2, [pc, #100]	; (8005354 <TIM_OC1_SetConfig+0x118>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_OC1_SetConfig+0xbe>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a18      	ldr	r2, [pc, #96]	; (8005358 <TIM_OC1_SetConfig+0x11c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d111      	bne.n	800531e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	fffeff8f 	.word	0xfffeff8f
 8005348:	40010000 	.word	0x40010000
 800534c:	40010400 	.word	0x40010400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800

0800535c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f023 0210 	bic.w	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4b34      	ldr	r3, [pc, #208]	; (8005458 <TIM_OC2_SetConfig+0xfc>)
 8005388:	4013      	ands	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0320 	bic.w	r3, r3, #32
 80053a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a29      	ldr	r2, [pc, #164]	; (800545c <TIM_OC2_SetConfig+0x100>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <TIM_OC2_SetConfig+0x68>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a28      	ldr	r2, [pc, #160]	; (8005460 <TIM_OC2_SetConfig+0x104>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d10d      	bne.n	80053e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a1e      	ldr	r2, [pc, #120]	; (800545c <TIM_OC2_SetConfig+0x100>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00f      	beq.n	8005408 <TIM_OC2_SetConfig+0xac>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <TIM_OC2_SetConfig+0x104>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_OC2_SetConfig+0xac>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a1c      	ldr	r2, [pc, #112]	; (8005464 <TIM_OC2_SetConfig+0x108>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_OC2_SetConfig+0xac>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1b      	ldr	r2, [pc, #108]	; (8005468 <TIM_OC2_SetConfig+0x10c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_OC2_SetConfig+0xac>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <TIM_OC2_SetConfig+0x110>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d113      	bne.n	8005430 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800540e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	feff8fff 	.word	0xfeff8fff
 800545c:	40010000 	.word	0x40010000
 8005460:	40010400 	.word	0x40010400
 8005464:	40014000 	.word	0x40014000
 8005468:	40014400 	.word	0x40014400
 800546c:	40014800 	.word	0x40014800

08005470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a27      	ldr	r2, [pc, #156]	; (8005568 <TIM_OC3_SetConfig+0xf8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_OC3_SetConfig+0x66>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a26      	ldr	r2, [pc, #152]	; (800556c <TIM_OC3_SetConfig+0xfc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d10d      	bne.n	80054f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <TIM_OC3_SetConfig+0xf8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_OC3_SetConfig+0xaa>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1b      	ldr	r2, [pc, #108]	; (800556c <TIM_OC3_SetConfig+0xfc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_OC3_SetConfig+0xaa>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <TIM_OC3_SetConfig+0x100>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_OC3_SetConfig+0xaa>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a19      	ldr	r2, [pc, #100]	; (8005574 <TIM_OC3_SetConfig+0x104>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_OC3_SetConfig+0xaa>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a18      	ldr	r2, [pc, #96]	; (8005578 <TIM_OC3_SetConfig+0x108>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d113      	bne.n	8005542 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	4313      	orrs	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	621a      	str	r2, [r3, #32]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	40010000 	.word	0x40010000
 800556c:	40010400 	.word	0x40010400
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	031b      	lsls	r3, r3, #12
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <TIM_OC4_SetConfig+0xbc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00f      	beq.n	80055fc <TIM_OC4_SetConfig+0x80>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a17      	ldr	r2, [pc, #92]	; (800563c <TIM_OC4_SetConfig+0xc0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <TIM_OC4_SetConfig+0x80>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a16      	ldr	r2, [pc, #88]	; (8005640 <TIM_OC4_SetConfig+0xc4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <TIM_OC4_SetConfig+0x80>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a15      	ldr	r2, [pc, #84]	; (8005644 <TIM_OC4_SetConfig+0xc8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_OC4_SetConfig+0x80>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a14      	ldr	r2, [pc, #80]	; (8005648 <TIM_OC4_SetConfig+0xcc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d109      	bne.n	8005610 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	019b      	lsls	r3, r3, #6
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40010000 	.word	0x40010000
 800563c:	40010400 	.word	0x40010400
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800568c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a17      	ldr	r2, [pc, #92]	; (80056fc <TIM_OC5_SetConfig+0xb0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00f      	beq.n	80056c2 <TIM_OC5_SetConfig+0x76>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a16      	ldr	r2, [pc, #88]	; (8005700 <TIM_OC5_SetConfig+0xb4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00b      	beq.n	80056c2 <TIM_OC5_SetConfig+0x76>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a15      	ldr	r2, [pc, #84]	; (8005704 <TIM_OC5_SetConfig+0xb8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d007      	beq.n	80056c2 <TIM_OC5_SetConfig+0x76>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a14      	ldr	r2, [pc, #80]	; (8005708 <TIM_OC5_SetConfig+0xbc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_OC5_SetConfig+0x76>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a13      	ldr	r2, [pc, #76]	; (800570c <TIM_OC5_SetConfig+0xc0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d109      	bne.n	80056d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	621a      	str	r2, [r3, #32]
}
 80056f0:	bf00      	nop
 80056f2:	371c      	adds	r7, #28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40010000 	.word	0x40010000
 8005700:	40010400 	.word	0x40010400
 8005704:	40014000 	.word	0x40014000
 8005708:	40014400 	.word	0x40014400
 800570c:	40014800 	.word	0x40014800

08005710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4313      	orrs	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	051b      	lsls	r3, r3, #20
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <TIM_OC6_SetConfig+0xb4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00f      	beq.n	8005788 <TIM_OC6_SetConfig+0x78>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <TIM_OC6_SetConfig+0xb8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00b      	beq.n	8005788 <TIM_OC6_SetConfig+0x78>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a16      	ldr	r2, [pc, #88]	; (80057cc <TIM_OC6_SetConfig+0xbc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d007      	beq.n	8005788 <TIM_OC6_SetConfig+0x78>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <TIM_OC6_SetConfig+0xc0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_OC6_SetConfig+0x78>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a14      	ldr	r2, [pc, #80]	; (80057d4 <TIM_OC6_SetConfig+0xc4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d109      	bne.n	800579c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800578e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	029b      	lsls	r3, r3, #10
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40010000 	.word	0x40010000
 80057c8:	40010400 	.word	0x40010400
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40014400 	.word	0x40014400
 80057d4:	40014800 	.word	0x40014800

080057d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 030a 	bic.w	r3, r3, #10
 8005814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005836:	b480      	push	{r7}
 8005838:	b087      	sub	sp, #28
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f023 0210 	bic.w	r2, r3, #16
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	031b      	lsls	r3, r3, #12
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005872:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	011b      	lsls	r3, r3, #4
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	4313      	orrs	r3, r2
 800587c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <TIM_ITRx_SetConfig+0x38>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f043 0307 	orr.w	r3, r3, #7
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	609a      	str	r2, [r3, #8]
}
 80058c2:	bf00      	nop
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	ffcfff8f 	.word	0xffcfff8f

080058d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005928:	2302      	movs	r3, #2
 800592a:	e068      	b.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a2e      	ldr	r2, [pc, #184]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2d      	ldr	r2, [pc, #180]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005966:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01d      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599e:	d018      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00e      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d009      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a14      	ldr	r2, [pc, #80]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d10c      	bne.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40010400 	.word	0x40010400
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40000c00 	.word	0x40000c00
 8005a20:	40001800 	.word	0x40001800

08005a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a60:	b084      	sub	sp, #16
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b084      	sub	sp, #16
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	f107 001c 	add.w	r0, r7, #28
 8005a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d120      	bne.n	8005aba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <USB_CoreInit+0xd4>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d105      	bne.n	8005aae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fb14 	bl	80070dc <USB_CoreReset>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	73fb      	strb	r3, [r7, #15]
 8005ab8:	e01a      	b.n	8005af0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 fb08 	bl	80070dc <USB_CoreReset>
 8005acc:	4603      	mov	r3, r0
 8005ace:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
 8005ae2:	e005      	b.n	8005af0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d116      	bne.n	8005b24 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <USB_CoreInit+0xd8>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f043 0206 	orr.w	r2, r3, #6
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b30:	b004      	add	sp, #16
 8005b32:	4770      	bx	lr
 8005b34:	ffbdffbf 	.word	0xffbdffbf
 8005b38:	03ee0000 	.word	0x03ee0000

08005b3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d165      	bne.n	8005c1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4a41      	ldr	r2, [pc, #260]	; (8005c58 <USB_SetTurnaroundTime+0x11c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d906      	bls.n	8005b66 <USB_SetTurnaroundTime+0x2a>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4a40      	ldr	r2, [pc, #256]	; (8005c5c <USB_SetTurnaroundTime+0x120>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d202      	bcs.n	8005b66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b60:	230f      	movs	r3, #15
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e062      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4a3c      	ldr	r2, [pc, #240]	; (8005c5c <USB_SetTurnaroundTime+0x120>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d306      	bcc.n	8005b7c <USB_SetTurnaroundTime+0x40>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4a3b      	ldr	r2, [pc, #236]	; (8005c60 <USB_SetTurnaroundTime+0x124>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d202      	bcs.n	8005b7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b76:	230e      	movs	r3, #14
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e057      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4a38      	ldr	r2, [pc, #224]	; (8005c60 <USB_SetTurnaroundTime+0x124>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d306      	bcc.n	8005b92 <USB_SetTurnaroundTime+0x56>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4a37      	ldr	r2, [pc, #220]	; (8005c64 <USB_SetTurnaroundTime+0x128>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d202      	bcs.n	8005b92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005b8c:	230d      	movs	r3, #13
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e04c      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4a33      	ldr	r2, [pc, #204]	; (8005c64 <USB_SetTurnaroundTime+0x128>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d306      	bcc.n	8005ba8 <USB_SetTurnaroundTime+0x6c>
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	4a32      	ldr	r2, [pc, #200]	; (8005c68 <USB_SetTurnaroundTime+0x12c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d802      	bhi.n	8005ba8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ba2:	230c      	movs	r3, #12
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e041      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	; (8005c68 <USB_SetTurnaroundTime+0x12c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d906      	bls.n	8005bbe <USB_SetTurnaroundTime+0x82>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4a2e      	ldr	r2, [pc, #184]	; (8005c6c <USB_SetTurnaroundTime+0x130>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d802      	bhi.n	8005bbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005bb8:	230b      	movs	r3, #11
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	e036      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4a2a      	ldr	r2, [pc, #168]	; (8005c6c <USB_SetTurnaroundTime+0x130>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d906      	bls.n	8005bd4 <USB_SetTurnaroundTime+0x98>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4a29      	ldr	r2, [pc, #164]	; (8005c70 <USB_SetTurnaroundTime+0x134>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d802      	bhi.n	8005bd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005bce:	230a      	movs	r3, #10
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	e02b      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <USB_SetTurnaroundTime+0x134>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d906      	bls.n	8005bea <USB_SetTurnaroundTime+0xae>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4a25      	ldr	r2, [pc, #148]	; (8005c74 <USB_SetTurnaroundTime+0x138>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d202      	bcs.n	8005bea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005be4:	2309      	movs	r3, #9
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e020      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <USB_SetTurnaroundTime+0x138>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d306      	bcc.n	8005c00 <USB_SetTurnaroundTime+0xc4>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <USB_SetTurnaroundTime+0x13c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d802      	bhi.n	8005c00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005bfa:	2308      	movs	r3, #8
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	e015      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <USB_SetTurnaroundTime+0x13c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d906      	bls.n	8005c16 <USB_SetTurnaroundTime+0xda>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a1c      	ldr	r2, [pc, #112]	; (8005c7c <USB_SetTurnaroundTime+0x140>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d202      	bcs.n	8005c16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c10:	2307      	movs	r3, #7
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e00a      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c16:	2306      	movs	r3, #6
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e007      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c22:	2309      	movs	r3, #9
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e001      	b.n	8005c2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c28:	2309      	movs	r3, #9
 8005c2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	00d8acbf 	.word	0x00d8acbf
 8005c5c:	00e4e1c0 	.word	0x00e4e1c0
 8005c60:	00f42400 	.word	0x00f42400
 8005c64:	01067380 	.word	0x01067380
 8005c68:	011a499f 	.word	0x011a499f
 8005c6c:	01312cff 	.word	0x01312cff
 8005c70:	014ca43f 	.word	0x014ca43f
 8005c74:	016e3600 	.word	0x016e3600
 8005c78:	01a6ab1f 	.word	0x01a6ab1f
 8005c7c:	01e84800 	.word	0x01e84800

08005c80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f043 0201 	orr.w	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f023 0201 	bic.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d106      	bne.n	8005cf0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	e00b      	b.n	8005d08 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	e001      	b.n	8005d08 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e003      	b.n	8005d10 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005d08:	2032      	movs	r0, #50	; 0x32
 8005d0a:	f7fb f8dd 	bl	8000ec8 <HAL_Delay>

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d18:	b084      	sub	sp, #16
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	e009      	b.n	8005d4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3340      	adds	r3, #64	; 0x40
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	2200      	movs	r2, #0
 8005d44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	2b0e      	cmp	r3, #14
 8005d50:	d9f2      	bls.n	8005d38 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d11c      	bne.n	8005d92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d66:	f043 0302 	orr.w	r3, r3, #2
 8005d6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e005      	b.n	8005d9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005da4:	461a      	mov	r2, r3
 8005da6:	2300      	movs	r3, #0
 8005da8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db0:	4619      	mov	r1, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	461a      	mov	r2, r3
 8005dba:	680b      	ldr	r3, [r1, #0]
 8005dbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d10c      	bne.n	8005dde <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005dca:	2100      	movs	r1, #0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f949 	bl	8006064 <USB_SetDevSpeed>
 8005dd2:	e008      	b.n	8005de6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f944 	bl	8006064 <USB_SetDevSpeed>
 8005ddc:	e003      	b.n	8005de6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dde:	2103      	movs	r1, #3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f93f 	bl	8006064 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005de6:	2110      	movs	r1, #16
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f8f3 	bl	8005fd4 <USB_FlushTxFifo>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f911 	bl	8006020 <USB_FlushRxFifo>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	461a      	mov	r2, r3
 8005e10:	2300      	movs	r3, #0
 8005e12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e26:	461a      	mov	r2, r3
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	e043      	b.n	8005eba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e48:	d118      	bne.n	8005e7c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	e013      	b.n	8005e8e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e72:	461a      	mov	r2, r3
 8005e74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	e008      	b.n	8005e8e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	461a      	mov	r2, r3
 8005eae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d3b7      	bcc.n	8005e32 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	613b      	str	r3, [r7, #16]
 8005ec6:	e043      	b.n	8005f50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ede:	d118      	bne.n	8005f12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e013      	b.n	8005f24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e008      	b.n	8005f24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	461a      	mov	r2, r3
 8005f20:	2300      	movs	r3, #0
 8005f22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f30:	461a      	mov	r2, r3
 8005f32:	2300      	movs	r3, #0
 8005f34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	461a      	mov	r2, r3
 8005f44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d3b7      	bcc.n	8005ec8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d105      	bne.n	8005f8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	f043 0210 	orr.w	r2, r3, #16
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699a      	ldr	r2, [r3, #24]
 8005f90:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <USB_DevInit+0x2b4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f043 0208 	orr.w	r2, r3, #8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d105      	bne.n	8005fbc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699a      	ldr	r2, [r3, #24]
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <USB_DevInit+0x2b8>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fc8:	b004      	add	sp, #16
 8005fca:	4770      	bx	lr
 8005fcc:	803c3800 	.word	0x803c3800
 8005fd0:	40000004 	.word	0x40000004

08005fd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	019b      	lsls	r3, r3, #6
 8005fe6:	f043 0220 	orr.w	r2, r3, #32
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4a09      	ldr	r2, [pc, #36]	; (800601c <USB_FlushTxFifo+0x48>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d901      	bls.n	8006000 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e006      	b.n	800600e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b20      	cmp	r3, #32
 800600a:	d0f0      	beq.n	8005fee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	00030d40 	.word	0x00030d40

08006020 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2210      	movs	r2, #16
 8006030:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3301      	adds	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4a09      	ldr	r2, [pc, #36]	; (8006060 <USB_FlushRxFifo+0x40>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e006      	b.n	8006052 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b10      	cmp	r3, #16
 800604e:	d0f0      	beq.n	8006032 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	00030d40 	.word	0x00030d40

08006064 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006084:	4313      	orrs	r3, r2
 8006086:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006096:	b480      	push	{r7}
 8006098:	b087      	sub	sp, #28
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0306 	and.w	r3, r3, #6
 80060ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]
 80060ba:	e00a      	b.n	80060d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d002      	beq.n	80060c8 <USB_GetDevSpeed+0x32>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b06      	cmp	r3, #6
 80060c6:	d102      	bne.n	80060ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80060c8:	2302      	movs	r3, #2
 80060ca:	75fb      	strb	r3, [r7, #23]
 80060cc:	e001      	b.n	80060d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80060ce:	230f      	movs	r3, #15
 80060d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	785b      	ldrb	r3, [r3, #1]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d139      	bne.n	8006170 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	69da      	ldr	r2, [r3, #28]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	2101      	movs	r1, #1
 800610e:	fa01 f303 	lsl.w	r3, r1, r3
 8006112:	b29b      	uxth	r3, r3
 8006114:	68f9      	ldr	r1, [r7, #12]
 8006116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800611a:	4313      	orrs	r3, r2
 800611c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d153      	bne.n	80061dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	78db      	ldrb	r3, [r3, #3]
 800614e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006150:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	059b      	lsls	r3, r3, #22
 8006156:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006158:	431a      	orrs	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	0159      	lsls	r1, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	440b      	add	r3, r1
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	4619      	mov	r1, r3
 8006168:	4b20      	ldr	r3, [pc, #128]	; (80061ec <USB_ActivateEndpoint+0x10c>)
 800616a:	4313      	orrs	r3, r2
 800616c:	600b      	str	r3, [r1, #0]
 800616e:	e035      	b.n	80061dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f303 	lsl.w	r3, r1, r3
 8006186:	041b      	lsls	r3, r3, #16
 8006188:	68f9      	ldr	r1, [r7, #12]
 800618a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800618e:	4313      	orrs	r3, r2
 8006190:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d119      	bne.n	80061dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	78db      	ldrb	r3, [r3, #3]
 80061c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80061c4:	430b      	orrs	r3, r1
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	0159      	lsls	r1, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	440b      	add	r3, r1
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	4619      	mov	r1, r3
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <USB_ActivateEndpoint+0x10c>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	10008000 	.word	0x10008000

080061f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d161      	bne.n	80062d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800621e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006222:	d11f      	bne.n	8006264 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	440a      	add	r2, r1
 800623a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006242:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	440a      	add	r2, r1
 800625a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006262:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f303 	lsl.w	r3, r1, r3
 800627a:	b29b      	uxth	r3, r3
 800627c:	43db      	mvns	r3, r3
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006284:	4013      	ands	r3, r2
 8006286:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	2101      	movs	r1, #1
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	b29b      	uxth	r3, r3
 80062a0:	43db      	mvns	r3, r3
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a8:	4013      	ands	r3, r2
 80062aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	0159      	lsls	r1, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	440b      	add	r3, r1
 80062c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c6:	4619      	mov	r1, r3
 80062c8:	4b35      	ldr	r3, [pc, #212]	; (80063a0 <USB_DeactivateEndpoint+0x1b0>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]
 80062ce:	e060      	b.n	8006392 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062e6:	d11f      	bne.n	8006328 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	0151      	lsls	r1, r2, #5
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	440a      	add	r2, r1
 80062fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006306:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006326:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	2101      	movs	r1, #1
 800633a:	fa01 f303 	lsl.w	r3, r1, r3
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	43db      	mvns	r3, r3
 8006342:	68f9      	ldr	r1, [r7, #12]
 8006344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006348:	4013      	ands	r3, r2
 800634a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	69da      	ldr	r2, [r3, #28]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	2101      	movs	r1, #1
 800635e:	fa01 f303 	lsl.w	r3, r1, r3
 8006362:	041b      	lsls	r3, r3, #16
 8006364:	43db      	mvns	r3, r3
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800636c:	4013      	ands	r3, r2
 800636e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	0159      	lsls	r1, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	440b      	add	r3, r1
 8006386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638a:	4619      	mov	r1, r3
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <USB_DeactivateEndpoint+0x1b4>)
 800638e:	4013      	ands	r3, r2
 8006390:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	ec337800 	.word	0xec337800
 80063a4:	eff37800 	.word	0xeff37800

080063a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	785b      	ldrb	r3, [r3, #1]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	f040 8163 	bne.w	8006690 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d132      	bne.n	8006438 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	0159      	lsls	r1, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	440b      	add	r3, r1
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	4619      	mov	r1, r3
 80063ee:	4ba5      	ldr	r3, [pc, #660]	; (8006684 <USB_EPStartXfer+0x2dc>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006412:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	0159      	lsls	r1, r3, #5
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	440b      	add	r3, r1
 800642a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642e:	4619      	mov	r1, r3
 8006430:	4b95      	ldr	r3, [pc, #596]	; (8006688 <USB_EPStartXfer+0x2e0>)
 8006432:	4013      	ands	r3, r2
 8006434:	610b      	str	r3, [r1, #16]
 8006436:	e074      	b.n	8006522 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	0159      	lsls	r1, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	440b      	add	r3, r1
 800644e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006452:	4619      	mov	r1, r3
 8006454:	4b8c      	ldr	r3, [pc, #560]	; (8006688 <USB_EPStartXfer+0x2e0>)
 8006456:	4013      	ands	r3, r2
 8006458:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	0159      	lsls	r1, r3, #5
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	440b      	add	r3, r1
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	4619      	mov	r1, r3
 8006476:	4b83      	ldr	r3, [pc, #524]	; (8006684 <USB_EPStartXfer+0x2dc>)
 8006478:	4013      	ands	r3, r2
 800647a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6959      	ldr	r1, [r3, #20]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	440b      	add	r3, r1
 8006494:	1e59      	subs	r1, r3, #1
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	fbb1 f3f3 	udiv	r3, r1, r3
 800649e:	04d9      	lsls	r1, r3, #19
 80064a0:	4b7a      	ldr	r3, [pc, #488]	; (800668c <USB_EPStartXfer+0x2e4>)
 80064a2:	400b      	ands	r3, r1
 80064a4:	69b9      	ldr	r1, [r7, #24]
 80064a6:	0148      	lsls	r0, r1, #5
 80064a8:	69f9      	ldr	r1, [r7, #28]
 80064aa:	4401      	add	r1, r0
 80064ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064b0:	4313      	orrs	r3, r2
 80064b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	0148      	lsls	r0, r1, #5
 80064ce:	69f9      	ldr	r1, [r7, #28]
 80064d0:	4401      	add	r1, r0
 80064d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064d6:	4313      	orrs	r3, r2
 80064d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	78db      	ldrb	r3, [r3, #3]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d11f      	bne.n	8006522 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006500:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006520:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d14b      	bne.n	80065c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d128      	bne.n	800659e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006558:	2b00      	cmp	r3, #0
 800655a:	d110      	bne.n	800657e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	e00f      	b.n	800659e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800659c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	e133      	b.n	8006828 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	78db      	ldrb	r3, [r3, #3]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d015      	beq.n	8006614 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 811b 	beq.w	8006828 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	2101      	movs	r1, #1
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	69f9      	ldr	r1, [r7, #28]
 800660a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800660e:	4313      	orrs	r3, r2
 8006610:	634b      	str	r3, [r1, #52]	; 0x34
 8006612:	e109      	b.n	8006828 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d110      	bne.n	8006646 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	440a      	add	r2, r1
 800663a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	e00f      	b.n	8006666 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006664:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	68d9      	ldr	r1, [r3, #12]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	b298      	uxth	r0, r3
 8006674:	79fb      	ldrb	r3, [r7, #7]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4603      	mov	r3, r0
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fa38 	bl	8006af0 <USB_WritePacket>
 8006680:	e0d2      	b.n	8006828 <USB_EPStartXfer+0x480>
 8006682:	bf00      	nop
 8006684:	e007ffff 	.word	0xe007ffff
 8006688:	fff80000 	.word	0xfff80000
 800668c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	0159      	lsls	r1, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	440b      	add	r3, r1
 80066a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066aa:	4619      	mov	r1, r3
 80066ac:	4b61      	ldr	r3, [pc, #388]	; (8006834 <USB_EPStartXfer+0x48c>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	0159      	lsls	r1, r3, #5
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	440b      	add	r3, r1
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	4619      	mov	r1, r3
 80066ce:	4b5a      	ldr	r3, [pc, #360]	; (8006838 <USB_EPStartXfer+0x490>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d123      	bne.n	8006724 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f2:	69b9      	ldr	r1, [r7, #24]
 80066f4:	0148      	lsls	r0, r1, #5
 80066f6:	69f9      	ldr	r1, [r7, #28]
 80066f8:	4401      	add	r1, r0
 80066fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066fe:	4313      	orrs	r3, r2
 8006700:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006720:	6113      	str	r3, [r2, #16]
 8006722:	e033      	b.n	800678c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	4413      	add	r3, r2
 800672e:	1e5a      	subs	r2, r3, #1
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	8afb      	ldrh	r3, [r7, #22]
 800674a:	04d9      	lsls	r1, r3, #19
 800674c:	4b3b      	ldr	r3, [pc, #236]	; (800683c <USB_EPStartXfer+0x494>)
 800674e:	400b      	ands	r3, r1
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	0148      	lsls	r0, r1, #5
 8006754:	69f9      	ldr	r1, [r7, #28]
 8006756:	4401      	add	r1, r0
 8006758:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800675c:	4313      	orrs	r3, r2
 800675e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	8af9      	ldrh	r1, [r7, #22]
 8006774:	fb01 f303 	mul.w	r3, r1, r3
 8006778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800677c:	69b9      	ldr	r1, [r7, #24]
 800677e:	0148      	lsls	r0, r1, #5
 8006780:	69f9      	ldr	r1, [r7, #28]
 8006782:	4401      	add	r1, r0
 8006784:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006788:	4313      	orrs	r3, r2
 800678a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800678c:	79fb      	ldrb	r3, [r7, #7]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d10d      	bne.n	80067ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d009      	beq.n	80067ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	68d9      	ldr	r1, [r3, #12]
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	460a      	mov	r2, r1
 80067ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	78db      	ldrb	r3, [r3, #3]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d128      	bne.n	8006808 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d110      	bne.n	80067e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	e00f      	b.n	8006808 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006806:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	0151      	lsls	r1, r2, #5
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	440a      	add	r2, r1
 800681e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006826:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	fff80000 	.word	0xfff80000
 8006838:	e007ffff 	.word	0xe007ffff
 800683c:	1ff80000 	.word	0x1ff80000

08006840 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	2b01      	cmp	r3, #1
 800685e:	f040 80cd 	bne.w	80069fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d132      	bne.n	80068d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	0159      	lsls	r1, r3, #5
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	440b      	add	r3, r1
 8006880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006884:	4619      	mov	r1, r3
 8006886:	4b98      	ldr	r3, [pc, #608]	; (8006ae8 <USB_EP0StartXfer+0x2a8>)
 8006888:	4013      	ands	r3, r2
 800688a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	0159      	lsls	r1, r3, #5
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	440b      	add	r3, r1
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	4619      	mov	r1, r3
 80068c8:	4b88      	ldr	r3, [pc, #544]	; (8006aec <USB_EP0StartXfer+0x2ac>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	610b      	str	r3, [r1, #16]
 80068ce:	e04e      	b.n	800696e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	0159      	lsls	r1, r3, #5
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	440b      	add	r3, r1
 80068e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ea:	4619      	mov	r1, r3
 80068ec:	4b7f      	ldr	r3, [pc, #508]	; (8006aec <USB_EP0StartXfer+0x2ac>)
 80068ee:	4013      	ands	r3, r2
 80068f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fe:	691a      	ldr	r2, [r3, #16]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	0159      	lsls	r1, r3, #5
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	440b      	add	r3, r1
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	4619      	mov	r1, r3
 800690e:	4b76      	ldr	r3, [pc, #472]	; (8006ae8 <USB_EP0StartXfer+0x2a8>)
 8006910:	4013      	ands	r3, r2
 8006912:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	695a      	ldr	r2, [r3, #20]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	429a      	cmp	r2, r3
 800691e:	d903      	bls.n	8006928 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006946:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800695e:	6939      	ldr	r1, [r7, #16]
 8006960:	0148      	lsls	r0, r1, #5
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	4401      	add	r1, r0
 8006966:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800696a:	4313      	orrs	r3, r2
 800696c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d11e      	bne.n	80069b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d009      	beq.n	8006990 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	461a      	mov	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e092      	b.n	8006ad8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d07e      	beq.n	8006ad8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	f003 030f 	and.w	r3, r3, #15
 80069ea:	2101      	movs	r1, #1
 80069ec:	fa01 f303 	lsl.w	r3, r1, r3
 80069f0:	6979      	ldr	r1, [r7, #20]
 80069f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069f6:	4313      	orrs	r3, r2
 80069f8:	634b      	str	r3, [r1, #52]	; 0x34
 80069fa:	e06d      	b.n	8006ad8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	0159      	lsls	r1, r3, #5
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	440b      	add	r3, r1
 8006a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a16:	4619      	mov	r1, r3
 8006a18:	4b34      	ldr	r3, [pc, #208]	; (8006aec <USB_EP0StartXfer+0x2ac>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	0159      	lsls	r1, r3, #5
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	440b      	add	r3, r1
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4b2b      	ldr	r3, [pc, #172]	; (8006ae8 <USB_EP0StartXfer+0x2a8>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a86:	6939      	ldr	r1, [r7, #16]
 8006a88:	0148      	lsls	r0, r1, #5
 8006a8a:	6979      	ldr	r1, [r7, #20]
 8006a8c:	4401      	add	r1, r0
 8006a8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a92:	4313      	orrs	r3, r2
 8006a94:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d10d      	bne.n	8006ab8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d009      	beq.n	8006ab8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	68d9      	ldr	r1, [r3, #12]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	460a      	mov	r2, r1
 8006ab6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	e007ffff 	.word	0xe007ffff
 8006aec:	fff80000 	.word	0xfff80000

08006af0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b089      	sub	sp, #36	; 0x24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4611      	mov	r1, r2
 8006afc:	461a      	mov	r2, r3
 8006afe:	460b      	mov	r3, r1
 8006b00:	71fb      	strb	r3, [r7, #7]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d123      	bne.n	8006b5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b16:	88bb      	ldrh	r3, [r7, #4]
 8006b18:	3303      	adds	r3, #3
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e018      	b.n	8006b56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	031a      	lsls	r2, r3, #12
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b30:	461a      	mov	r2, r3
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	3301      	adds	r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	3301      	adds	r3, #1
 8006b48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	3301      	adds	r3, #1
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d3e2      	bcc.n	8006b24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3724      	adds	r7, #36	; 0x24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b08b      	sub	sp, #44	; 0x2c
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b82:	88fb      	ldrh	r3, [r7, #6]
 8006b84:	089b      	lsrs	r3, r3, #2
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b92:	2300      	movs	r3, #0
 8006b94:	623b      	str	r3, [r7, #32]
 8006b96:	e014      	b.n	8006bc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	3301      	adds	r3, #1
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	3301      	adds	r3, #1
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	623b      	str	r3, [r7, #32]
 8006bc2:	6a3a      	ldr	r2, [r7, #32]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d3e6      	bcc.n	8006b98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006bca:	8bfb      	ldrh	r3, [r7, #30]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01e      	beq.n	8006c0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f107 0310 	add.w	r3, r7, #16
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	701a      	strb	r2, [r3, #0]
      i++;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	3301      	adds	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c02:	8bfb      	ldrh	r3, [r7, #30]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c08:	8bfb      	ldrh	r3, [r7, #30]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1ea      	bne.n	8006be4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	372c      	adds	r7, #44	; 0x2c
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	785b      	ldrb	r3, [r3, #1]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d12c      	bne.n	8006c92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	db12      	blt.n	8006c70 <USB_EPSetStall+0x54>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00f      	beq.n	8006c70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	e02b      	b.n	8006cea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	db12      	blt.n	8006cca <USB_EPSetStall+0xae>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00f      	beq.n	8006cca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cc8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ce8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d128      	bne.n	8006d66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	78db      	ldrb	r3, [r3, #3]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d003      	beq.n	8006d44 <USB_EPClearStall+0x4c>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	78db      	ldrb	r3, [r3, #3]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d138      	bne.n	8006db6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	e027      	b.n	8006db6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	78db      	ldrb	r3, [r3, #3]
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d003      	beq.n	8006d96 <USB_EPClearStall+0x9e>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	78db      	ldrb	r3, [r3, #3]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d10f      	bne.n	8006db6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006de2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006de6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006df8:	68f9      	ldr	r1, [r7, #12]
 8006dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e2a:	f023 0303 	bic.w	r3, r3, #3
 8006e2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e3e:	f023 0302 	bic.w	r3, r3, #2
 8006e42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e6c:	f023 0303 	bic.w	r3, r3, #3
 8006e70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e80:	f043 0302 	orr.w	r3, r3, #2
 8006e84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006eac:	68fb      	ldr	r3, [r7, #12]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	4013      	ands	r3, r2
 8006edc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	0c1b      	lsrs	r3, r3, #16
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	b29b      	uxth	r3, r3
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f32:	78fb      	ldrb	r3, [r7, #3]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f50:	68bb      	ldr	r3, [r7, #8]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8e:	01db      	lsls	r3, r3, #7
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fac:	68bb      	ldr	r3, [r7, #8]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
	...

08006fd8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4b09      	ldr	r3, [pc, #36]	; (800701c <USB_ActivateSetup+0x44>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800700c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	fffff800 	.word	0xfffff800

08007020 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	460b      	mov	r3, r1
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	333c      	adds	r3, #60	; 0x3c
 8007036:	3304      	adds	r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	4a26      	ldr	r2, [pc, #152]	; (80070d8 <USB_EP0_OutStart+0xb8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d90a      	bls.n	800705a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007054:	d101      	bne.n	800705a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	e037      	b.n	80070ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007060:	461a      	mov	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007074:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007088:	f043 0318 	orr.w	r3, r3, #24
 800708c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800709c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80070a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d10f      	bne.n	80070c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	461a      	mov	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80070c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	4f54300a 	.word	0x4f54300a

080070dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4a13      	ldr	r2, [pc, #76]	; (8007140 <USB_CoreReset+0x64>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d901      	bls.n	80070fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e01b      	b.n	8007132 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	daf2      	bge.n	80070e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	f043 0201 	orr.w	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4a09      	ldr	r2, [pc, #36]	; (8007140 <USB_CoreReset+0x64>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d901      	bls.n	8007124 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e006      	b.n	8007132 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b01      	cmp	r3, #1
 800712e:	d0f0      	beq.n	8007112 <USB_CoreReset+0x36>

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	00030d40 	.word	0x00030d40

08007144 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007150:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007154:	f002 f990 	bl	8009478 <USBD_static_malloc>
 8007158:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d105      	bne.n	800716c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007168:	2302      	movs	r3, #2
 800716a:	e066      	b.n	800723a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	7c1b      	ldrb	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d119      	bne.n	80071b0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800717c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007180:	2202      	movs	r2, #2
 8007182:	2181      	movs	r1, #129	; 0x81
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f002 f854 	bl	8009232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007194:	2202      	movs	r2, #2
 8007196:	2101      	movs	r1, #1
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f002 f84a 	bl	8009232 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2210      	movs	r2, #16
 80071aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80071ae:	e016      	b.n	80071de <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	2202      	movs	r2, #2
 80071b4:	2181      	movs	r1, #129	; 0x81
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f002 f83b 	bl	8009232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80071c2:	2340      	movs	r3, #64	; 0x40
 80071c4:	2202      	movs	r2, #2
 80071c6:	2101      	movs	r1, #1
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f002 f832 	bl	8009232 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2210      	movs	r2, #16
 80071da:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80071de:	2308      	movs	r3, #8
 80071e0:	2203      	movs	r2, #3
 80071e2:	2182      	movs	r1, #130	; 0x82
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f002 f824 	bl	8009232 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7c1b      	ldrb	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d109      	bne.n	8007228 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800721a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800721e:	2101      	movs	r1, #1
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f002 f8f5 	bl	8009410 <USBD_LL_PrepareReceive>
 8007226:	e007      	b.n	8007238 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800722e:	2340      	movs	r3, #64	; 0x40
 8007230:	2101      	movs	r1, #1
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f002 f8ec 	bl	8009410 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800724e:	2181      	movs	r1, #129	; 0x81
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f002 f814 	bl	800927e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800725c:	2101      	movs	r1, #1
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f002 f80d 	bl	800927e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800726c:	2182      	movs	r1, #130	; 0x82
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f002 f805 	bl	800927e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00e      	beq.n	80072ac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800729e:	4618      	mov	r0, r3
 80072a0:	f002 f8f8 	bl	8009494 <USBD_static_free>
    pdev->pClassData = NULL;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80072dc:	2303      	movs	r3, #3
 80072de:	e0af      	b.n	8007440 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d03f      	beq.n	800736c <USBD_CDC_Setup+0xb4>
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	f040 809f 	bne.w	8007430 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	88db      	ldrh	r3, [r3, #6]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d02e      	beq.n	8007358 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b25b      	sxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	da16      	bge.n	8007332 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007310:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	88d2      	ldrh	r2, [r2, #6]
 8007316:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	88db      	ldrh	r3, [r3, #6]
 800731c:	2b07      	cmp	r3, #7
 800731e:	bf28      	it	cs
 8007320:	2307      	movcs	r3, #7
 8007322:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	89fa      	ldrh	r2, [r7, #14]
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f001 fb19 	bl	8008962 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007330:	e085      	b.n	800743e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	785a      	ldrb	r2, [r3, #1]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	88db      	ldrh	r3, [r3, #6]
 8007340:	b2da      	uxtb	r2, r3
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007348:	6939      	ldr	r1, [r7, #16]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	88db      	ldrh	r3, [r3, #6]
 800734e:	461a      	mov	r2, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fb32 	bl	80089ba <USBD_CtlPrepareRx>
      break;
 8007356:	e072      	b.n	800743e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	7850      	ldrb	r0, [r2, #1]
 8007364:	2200      	movs	r2, #0
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	4798      	blx	r3
      break;
 800736a:	e068      	b.n	800743e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	2b0b      	cmp	r3, #11
 8007372:	d852      	bhi.n	800741a <USBD_CDC_Setup+0x162>
 8007374:	a201      	add	r2, pc, #4	; (adr r2, 800737c <USBD_CDC_Setup+0xc4>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	080073ad 	.word	0x080073ad
 8007380:	08007429 	.word	0x08007429
 8007384:	0800741b 	.word	0x0800741b
 8007388:	0800741b 	.word	0x0800741b
 800738c:	0800741b 	.word	0x0800741b
 8007390:	0800741b 	.word	0x0800741b
 8007394:	0800741b 	.word	0x0800741b
 8007398:	0800741b 	.word	0x0800741b
 800739c:	0800741b 	.word	0x0800741b
 80073a0:	0800741b 	.word	0x0800741b
 80073a4:	080073d7 	.word	0x080073d7
 80073a8:	08007401 	.word	0x08007401
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d107      	bne.n	80073c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80073b8:	f107 030a 	add.w	r3, r7, #10
 80073bc:	2202      	movs	r2, #2
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 face 	bl	8008962 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073c6:	e032      	b.n	800742e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 fa58 	bl	8008880 <USBD_CtlError>
            ret = USBD_FAIL;
 80073d0:	2303      	movs	r3, #3
 80073d2:	75fb      	strb	r3, [r7, #23]
          break;
 80073d4:	e02b      	b.n	800742e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d107      	bne.n	80073f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073e2:	f107 030d 	add.w	r3, r7, #13
 80073e6:	2201      	movs	r2, #1
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 fab9 	bl	8008962 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073f0:	e01d      	b.n	800742e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 fa43 	bl	8008880 <USBD_CtlError>
            ret = USBD_FAIL;
 80073fa:	2303      	movs	r3, #3
 80073fc:	75fb      	strb	r3, [r7, #23]
          break;
 80073fe:	e016      	b.n	800742e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b03      	cmp	r3, #3
 800740a:	d00f      	beq.n	800742c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 fa36 	bl	8008880 <USBD_CtlError>
            ret = USBD_FAIL;
 8007414:	2303      	movs	r3, #3
 8007416:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007418:	e008      	b.n	800742c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fa2f 	bl	8008880 <USBD_CtlError>
          ret = USBD_FAIL;
 8007422:	2303      	movs	r3, #3
 8007424:	75fb      	strb	r3, [r7, #23]
          break;
 8007426:	e002      	b.n	800742e <USBD_CDC_Setup+0x176>
          break;
 8007428:	bf00      	nop
 800742a:	e008      	b.n	800743e <USBD_CDC_Setup+0x186>
          break;
 800742c:	bf00      	nop
      }
      break;
 800742e:	e006      	b.n	800743e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f001 fa24 	bl	8008880 <USBD_CtlError>
      ret = USBD_FAIL;
 8007438:	2303      	movs	r3, #3
 800743a:	75fb      	strb	r3, [r7, #23]
      break;
 800743c:	bf00      	nop
  }

  return (uint8_t)ret;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800745a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007466:	2303      	movs	r3, #3
 8007468:	e04f      	b.n	800750a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007470:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007472:	78fa      	ldrb	r2, [r7, #3]
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	3318      	adds	r3, #24
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d029      	beq.n	80074dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007488:	78fa      	ldrb	r2, [r7, #3]
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	440b      	add	r3, r1
 8007496:	3318      	adds	r3, #24
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	78f9      	ldrb	r1, [r7, #3]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	460b      	mov	r3, r1
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	1a5b      	subs	r3, r3, r1
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4403      	add	r3, r0
 80074a8:	3344      	adds	r3, #68	; 0x44
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80074b0:	fb03 f301 	mul.w	r3, r3, r1
 80074b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d110      	bne.n	80074dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	3318      	adds	r3, #24
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074ce:	78f9      	ldrb	r1, [r7, #3]
 80074d0:	2300      	movs	r3, #0
 80074d2:	2200      	movs	r2, #0
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 ff7a 	bl	80093ce <USBD_LL_Transmit>
 80074da:	e015      	b.n	8007508 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00b      	beq.n	8007508 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007524:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	e015      	b.n	8007560 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 ff8a 	bl	8009452 <USBD_LL_GetRxDataSize>
 800753e:	4602      	mov	r2, r0
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800755a:	4611      	mov	r1, r2
 800755c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007576:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800757e:	2303      	movs	r3, #3
 8007580:	e01b      	b.n	80075ba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d015      	beq.n	80075b8 <USBD_CDC_EP0_RxReady+0x50>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007592:	2bff      	cmp	r3, #255	; 0xff
 8007594:	d010      	beq.n	80075b8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80075a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80075ac:	b292      	uxth	r2, r2
 80075ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	22ff      	movs	r2, #255	; 0xff
 80075b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2243      	movs	r2, #67	; 0x43
 80075d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80075d2:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	20000098 	.word	0x20000098

080075e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2243      	movs	r2, #67	; 0x43
 80075f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80075f2:	4b03      	ldr	r3, [pc, #12]	; (8007600 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	20000054 	.word	0x20000054

08007604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2243      	movs	r2, #67	; 0x43
 8007610:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007612:	4b03      	ldr	r3, [pc, #12]	; (8007620 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	200000dc 	.word	0x200000dc

08007624 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	220a      	movs	r2, #10
 8007630:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007632:	4b03      	ldr	r3, [pc, #12]	; (8007640 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	20000010 	.word	0x20000010

08007644 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	e004      	b.n	8007662 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800766e:	b480      	push	{r7}
 8007670:	b087      	sub	sp, #28
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007680:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007688:	2303      	movs	r3, #3
 800768a:	e008      	b.n	800769e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	371c      	adds	r7, #28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b085      	sub	sp, #20
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e004      	b.n	80076d0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e01a      	b.n	8007734 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007704:	2b00      	cmp	r3, #0
 8007706:	d114      	bne.n	8007732 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2201      	movs	r2, #1
 800770c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007726:	2181      	movs	r1, #129	; 0x81
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fe50 	bl	80093ce <USBD_LL_Transmit>

    ret = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800774a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007756:	2303      	movs	r3, #3
 8007758:	e016      	b.n	8007788 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	7c1b      	ldrb	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d109      	bne.n	8007776 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800776c:	2101      	movs	r1, #1
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f001 fe4e 	bl	8009410 <USBD_LL_PrepareReceive>
 8007774:	e007      	b.n	8007786 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	2101      	movs	r1, #1
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f001 fe45 	bl	8009410 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e01f      	b.n	80077e8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	79fa      	ldrb	r2, [r7, #7]
 80077da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f001 fcbd 	bl	800915c <USBD_LL_Init>
 80077e2:	4603      	mov	r3, r0
 80077e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007804:	2303      	movs	r3, #3
 8007806:	e016      	b.n	8007836 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00b      	beq.n	8007834 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	f107 020e 	add.w	r2, r7, #14
 8007828:	4610      	mov	r0, r2
 800782a:	4798      	blx	r3
 800782c:	4602      	mov	r2, r0
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 fcd8 	bl	80091fc <USBD_LL_Start>
 800784c:	4603      	mov	r3, r0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	78fa      	ldrb	r2, [r7, #3]
 8007890:	4611      	mov	r1, r2
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d007      	beq.n	80078ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	78fa      	ldrb	r2, [r7, #3]
 80078c4:	4611      	mov	r1, r2
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	4798      	blx	r3
  }

  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 ff90 	bl	800880c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078fa:	461a      	mov	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007908:	f003 031f 	and.w	r3, r3, #31
 800790c:	2b02      	cmp	r3, #2
 800790e:	d01a      	beq.n	8007946 <USBD_LL_SetupStage+0x72>
 8007910:	2b02      	cmp	r3, #2
 8007912:	d822      	bhi.n	800795a <USBD_LL_SetupStage+0x86>
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <USBD_LL_SetupStage+0x4a>
 8007918:	2b01      	cmp	r3, #1
 800791a:	d00a      	beq.n	8007932 <USBD_LL_SetupStage+0x5e>
 800791c:	e01d      	b.n	800795a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa62 	bl	8007df0 <USBD_StdDevReq>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
      break;
 8007930:	e020      	b.n	8007974 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fac6 	bl	8007ecc <USBD_StdItfReq>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
      break;
 8007944:	e016      	b.n	8007974 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fb05 	bl	8007f5e <USBD_StdEPReq>
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
      break;
 8007958:	e00c      	b.n	8007974 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007960:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007964:	b2db      	uxtb	r3, r3
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f001 fca7 	bl	80092bc <USBD_LL_StallEP>
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]
      break;
 8007972:	bf00      	nop
  }

  return ret;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b086      	sub	sp, #24
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	460b      	mov	r3, r1
 8007988:	607a      	str	r2, [r7, #4]
 800798a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d138      	bne.n	8007a04 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007998:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079a0:	2b03      	cmp	r3, #3
 80079a2:	d14a      	bne.n	8007a3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d913      	bls.n	80079d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	1ad2      	subs	r2, r2, r3
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	4293      	cmp	r3, r2
 80079c8:	bf28      	it	cs
 80079ca:	4613      	movcs	r3, r2
 80079cc:	461a      	mov	r2, r3
 80079ce:	6879      	ldr	r1, [r7, #4]
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f001 f80f 	bl	80089f4 <USBD_CtlContinueRx>
 80079d6:	e030      	b.n	8007a3a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d10b      	bne.n	80079fc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f001 f80a 	bl	8008a16 <USBD_CtlSendStatus>
 8007a02:	e01a      	b.n	8007a3a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b03      	cmp	r3, #3
 8007a0e:	d114      	bne.n	8007a3a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00e      	beq.n	8007a3a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	7afa      	ldrb	r2, [r7, #11]
 8007a26:	4611      	mov	r1, r2
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	4798      	blx	r3
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	e000      	b.n	8007a3c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007a52:	7afb      	ldrb	r3, [r7, #11]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d16b      	bne.n	8007b30 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3314      	adds	r3, #20
 8007a5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d156      	bne.n	8007b16 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d914      	bls.n	8007a9e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	1ad2      	subs	r2, r2, r3
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 ff84 	bl	8008998 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a90:	2300      	movs	r3, #0
 8007a92:	2200      	movs	r2, #0
 8007a94:	2100      	movs	r1, #0
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f001 fcba 	bl	8009410 <USBD_LL_PrepareReceive>
 8007a9c:	e03b      	b.n	8007b16 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d11c      	bne.n	8007ae4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d316      	bcc.n	8007ae4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d20f      	bcs.n	8007ae4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f000 ff65 	bl	8008998 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2100      	movs	r1, #0
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f001 fc97 	bl	8009410 <USBD_LL_PrepareReceive>
 8007ae2:	e018      	b.n	8007b16 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d10b      	bne.n	8007b08 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b08:	2180      	movs	r1, #128	; 0x80
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f001 fbd6 	bl	80092bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f000 ff93 	bl	8008a3c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d122      	bne.n	8007b66 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff fe98 	bl	8007856 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b2e:	e01a      	b.n	8007b66 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d114      	bne.n	8007b66 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00e      	beq.n	8007b66 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	7afa      	ldrb	r2, [r7, #11]
 8007b52:	4611      	mov	r1, r2
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	4798      	blx	r3
 8007b58:	4603      	mov	r3, r0
 8007b5a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	e000      	b.n	8007b68 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e02f      	b.n	8007c04 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00f      	beq.n	8007bce <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6852      	ldr	r2, [r2, #4]
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	4611      	mov	r1, r2
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bce:	2340      	movs	r3, #64	; 0x40
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 fb2c 	bl	8009232 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2240      	movs	r2, #64	; 0x40
 8007be6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bea:	2340      	movs	r3, #64	; 0x40
 8007bec:	2200      	movs	r2, #0
 8007bee:	2180      	movs	r1, #128	; 0x80
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 fb1e 	bl	8009232 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2240      	movs	r2, #64	; 0x40
 8007c00:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	460b      	mov	r3, r1
 8007c16:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2204      	movs	r2, #4
 8007c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b04      	cmp	r3, #4
 8007c6a:	d106      	bne.n	8007c7a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d101      	bne.n	8007c9e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e012      	b.n	8007cc4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d10b      	bne.n	8007cc2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d005      	beq.n	8007cc2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e014      	b.n	8007d10 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d10d      	bne.n	8007d0e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d007      	beq.n	8007d0e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	78fa      	ldrb	r2, [r7, #3]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e014      	b.n	8007d5c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b03      	cmp	r3, #3
 8007d3c:	d10d      	bne.n	8007d5a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d007      	beq.n	8007d5a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	78fa      	ldrb	r2, [r7, #3]
 8007d54:	4611      	mov	r1, r2
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d009      	beq.n	8007da8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6852      	ldr	r2, [r2, #4]
 8007da0:	b2d2      	uxtb	r2, r2
 8007da2:	4611      	mov	r1, r2
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	4798      	blx	r3
  }

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b087      	sub	sp, #28
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007dd0:	8a3b      	ldrh	r3, [r7, #16]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	b21a      	sxth	r2, r3
 8007dd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b21b      	sxth	r3, r3
 8007dde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007de0:	89fb      	ldrh	r3, [r7, #14]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e06:	2b40      	cmp	r3, #64	; 0x40
 8007e08:	d005      	beq.n	8007e16 <USBD_StdDevReq+0x26>
 8007e0a:	2b40      	cmp	r3, #64	; 0x40
 8007e0c:	d853      	bhi.n	8007eb6 <USBD_StdDevReq+0xc6>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00b      	beq.n	8007e2a <USBD_StdDevReq+0x3a>
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	d14f      	bne.n	8007eb6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	4798      	blx	r3
 8007e24:	4603      	mov	r3, r0
 8007e26:	73fb      	strb	r3, [r7, #15]
      break;
 8007e28:	e04a      	b.n	8007ec0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b09      	cmp	r3, #9
 8007e30:	d83b      	bhi.n	8007eaa <USBD_StdDevReq+0xba>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <USBD_StdDevReq+0x48>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007ea1 	.word	0x08007ea1
 8007e40:	08007eab 	.word	0x08007eab
 8007e44:	08007e97 	.word	0x08007e97
 8007e48:	08007eab 	.word	0x08007eab
 8007e4c:	08007e6b 	.word	0x08007e6b
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007eab 	.word	0x08007eab
 8007e58:	08007e83 	.word	0x08007e83
 8007e5c:	08007e75 	.word	0x08007e75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f9de 	bl	8008224 <USBD_GetDescriptor>
          break;
 8007e68:	e024      	b.n	8007eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fb43 	bl	80084f8 <USBD_SetAddress>
          break;
 8007e72:	e01f      	b.n	8007eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fb82 	bl	8008580 <USBD_SetConfig>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
          break;
 8007e80:	e018      	b.n	8007eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fc21 	bl	80086cc <USBD_GetConfig>
          break;
 8007e8a:	e013      	b.n	8007eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fc52 	bl	8008738 <USBD_GetStatus>
          break;
 8007e94:	e00e      	b.n	8007eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fc81 	bl	80087a0 <USBD_SetFeature>
          break;
 8007e9e:	e009      	b.n	8007eb4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fc90 	bl	80087c8 <USBD_ClrFeature>
          break;
 8007ea8:	e004      	b.n	8007eb4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 fce7 	bl	8008880 <USBD_CtlError>
          break;
 8007eb2:	bf00      	nop
      }
      break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fce1 	bl	8008880 <USBD_CtlError>
      break;
 8007ebe:	bf00      	nop
  }

  return ret;
 8007ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop

08007ecc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ee2:	2b40      	cmp	r3, #64	; 0x40
 8007ee4:	d005      	beq.n	8007ef2 <USBD_StdItfReq+0x26>
 8007ee6:	2b40      	cmp	r3, #64	; 0x40
 8007ee8:	d82f      	bhi.n	8007f4a <USBD_StdItfReq+0x7e>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <USBD_StdItfReq+0x26>
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d12b      	bne.n	8007f4a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d81d      	bhi.n	8007f3c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	889b      	ldrh	r3, [r3, #4]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d813      	bhi.n	8007f32 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	6839      	ldr	r1, [r7, #0]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	88db      	ldrh	r3, [r3, #6]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d110      	bne.n	8007f46 <USBD_StdItfReq+0x7a>
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10d      	bne.n	8007f46 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fd73 	bl	8008a16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007f30:	e009      	b.n	8007f46 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fca3 	bl	8008880 <USBD_CtlError>
          break;
 8007f3a:	e004      	b.n	8007f46 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fc9e 	bl	8008880 <USBD_CtlError>
          break;
 8007f44:	e000      	b.n	8007f48 <USBD_StdItfReq+0x7c>
          break;
 8007f46:	bf00      	nop
      }
      break;
 8007f48:	e004      	b.n	8007f54 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fc97 	bl	8008880 <USBD_CtlError>
      break;
 8007f52:	bf00      	nop
  }

  return ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	889b      	ldrh	r3, [r3, #4]
 8007f70:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d007      	beq.n	8007f8e <USBD_StdEPReq+0x30>
 8007f7e:	2b40      	cmp	r3, #64	; 0x40
 8007f80:	f200 8145 	bhi.w	800820e <USBD_StdEPReq+0x2b0>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00c      	beq.n	8007fa2 <USBD_StdEPReq+0x44>
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	f040 8140 	bne.w	800820e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	4798      	blx	r3
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa0:	e13a      	b.n	8008218 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d007      	beq.n	8007fba <USBD_StdEPReq+0x5c>
 8007faa:	2b03      	cmp	r3, #3
 8007fac:	f300 8129 	bgt.w	8008202 <USBD_StdEPReq+0x2a4>
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d07f      	beq.n	80080b4 <USBD_StdEPReq+0x156>
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d03c      	beq.n	8008032 <USBD_StdEPReq+0xd4>
 8007fb8:	e123      	b.n	8008202 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d002      	beq.n	8007fcc <USBD_StdEPReq+0x6e>
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d016      	beq.n	8007ff8 <USBD_StdEPReq+0x9a>
 8007fca:	e02c      	b.n	8008026 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00d      	beq.n	8007fee <USBD_StdEPReq+0x90>
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	2b80      	cmp	r3, #128	; 0x80
 8007fd6:	d00a      	beq.n	8007fee <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f96d 	bl	80092bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fe2:	2180      	movs	r1, #128	; 0x80
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 f969 	bl	80092bc <USBD_LL_StallEP>
 8007fea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fec:	e020      	b.n	8008030 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc45 	bl	8008880 <USBD_CtlError>
              break;
 8007ff6:	e01b      	b.n	8008030 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	885b      	ldrh	r3, [r3, #2]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10e      	bne.n	800801e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <USBD_StdEPReq+0xc0>
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	2b80      	cmp	r3, #128	; 0x80
 800800a:	d008      	beq.n	800801e <USBD_StdEPReq+0xc0>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	88db      	ldrh	r3, [r3, #6]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d104      	bne.n	800801e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	4619      	mov	r1, r3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f001 f94f 	bl	80092bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fcf9 	bl	8008a16 <USBD_CtlSendStatus>

              break;
 8008024:	e004      	b.n	8008030 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008026:	6839      	ldr	r1, [r7, #0]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fc29 	bl	8008880 <USBD_CtlError>
              break;
 800802e:	bf00      	nop
          }
          break;
 8008030:	e0ec      	b.n	800820c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d002      	beq.n	8008044 <USBD_StdEPReq+0xe6>
 800803e:	2b03      	cmp	r3, #3
 8008040:	d016      	beq.n	8008070 <USBD_StdEPReq+0x112>
 8008042:	e030      	b.n	80080a6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00d      	beq.n	8008066 <USBD_StdEPReq+0x108>
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b80      	cmp	r3, #128	; 0x80
 800804e:	d00a      	beq.n	8008066 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f001 f931 	bl	80092bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800805a:	2180      	movs	r1, #128	; 0x80
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f001 f92d 	bl	80092bc <USBD_LL_StallEP>
 8008062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008064:	e025      	b.n	80080b2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fc09 	bl	8008880 <USBD_CtlError>
              break;
 800806e:	e020      	b.n	80080b2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	885b      	ldrh	r3, [r3, #2]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d11b      	bne.n	80080b0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008078:	7bbb      	ldrb	r3, [r7, #14]
 800807a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800807e:	2b00      	cmp	r3, #0
 8008080:	d004      	beq.n	800808c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 f937 	bl	80092fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fcc2 	bl	8008a16 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80080a4:	e004      	b.n	80080b0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fbe9 	bl	8008880 <USBD_CtlError>
              break;
 80080ae:	e000      	b.n	80080b2 <USBD_StdEPReq+0x154>
              break;
 80080b0:	bf00      	nop
          }
          break;
 80080b2:	e0ab      	b.n	800820c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d002      	beq.n	80080c6 <USBD_StdEPReq+0x168>
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d032      	beq.n	800812a <USBD_StdEPReq+0x1cc>
 80080c4:	e097      	b.n	80081f6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d007      	beq.n	80080dc <USBD_StdEPReq+0x17e>
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
 80080ce:	2b80      	cmp	r3, #128	; 0x80
 80080d0:	d004      	beq.n	80080dc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fbd3 	bl	8008880 <USBD_CtlError>
                break;
 80080da:	e091      	b.n	8008200 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	da0b      	bge.n	80080fc <USBD_StdEPReq+0x19e>
 80080e4:	7bbb      	ldrb	r3, [r7, #14]
 80080e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080ea:	4613      	mov	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	3310      	adds	r3, #16
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	3304      	adds	r3, #4
 80080fa:	e00b      	b.n	8008114 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080fc:	7bbb      	ldrb	r3, [r7, #14]
 80080fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	4413      	add	r3, r2
 8008112:	3304      	adds	r3, #4
 8008114:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2202      	movs	r2, #2
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fc1d 	bl	8008962 <USBD_CtlSendData>
              break;
 8008128:	e06a      	b.n	8008200 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800812a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800812e:	2b00      	cmp	r3, #0
 8008130:	da11      	bge.n	8008156 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	f003 020f 	and.w	r2, r3, #15
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	3324      	adds	r3, #36	; 0x24
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d117      	bne.n	800817c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fb96 	bl	8008880 <USBD_CtlError>
                  break;
 8008154:	e054      	b.n	8008200 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	f003 020f 	and.w	r2, r3, #15
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	440b      	add	r3, r1
 8008168:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d104      	bne.n	800817c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fb83 	bl	8008880 <USBD_CtlError>
                  break;
 800817a:	e041      	b.n	8008200 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800817c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	da0b      	bge.n	800819c <USBD_StdEPReq+0x23e>
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	3310      	adds	r3, #16
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	4413      	add	r3, r2
 8008198:	3304      	adds	r3, #4
 800819a:	e00b      	b.n	80081b4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800819c:	7bbb      	ldrb	r3, [r7, #14]
 800819e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	3304      	adds	r3, #4
 80081b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <USBD_StdEPReq+0x264>
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b80      	cmp	r3, #128	; 0x80
 80081c0:	d103      	bne.n	80081ca <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2200      	movs	r2, #0
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	e00e      	b.n	80081e8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 f8b2 	bl	8009338 <USBD_LL_IsStallEP>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2201      	movs	r2, #1
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	e002      	b.n	80081e8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	2202      	movs	r2, #2
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fbb7 	bl	8008962 <USBD_CtlSendData>
              break;
 80081f4:	e004      	b.n	8008200 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fb41 	bl	8008880 <USBD_CtlError>
              break;
 80081fe:	bf00      	nop
          }
          break;
 8008200:	e004      	b.n	800820c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fb3b 	bl	8008880 <USBD_CtlError>
          break;
 800820a:	bf00      	nop
      }
      break;
 800820c:	e004      	b.n	8008218 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fb35 	bl	8008880 <USBD_CtlError>
      break;
 8008216:	bf00      	nop
  }

  return ret;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b01      	subs	r3, #1
 8008244:	2b06      	cmp	r3, #6
 8008246:	f200 8128 	bhi.w	800849a <USBD_GetDescriptor+0x276>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <USBD_GetDescriptor+0x2c>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	0800826d 	.word	0x0800826d
 8008254:	08008285 	.word	0x08008285
 8008258:	080082c5 	.word	0x080082c5
 800825c:	0800849b 	.word	0x0800849b
 8008260:	0800849b 	.word	0x0800849b
 8008264:	0800843b 	.word	0x0800843b
 8008268:	08008467 	.word	0x08008467
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	7c12      	ldrb	r2, [r2, #16]
 8008278:	f107 0108 	add.w	r1, r7, #8
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	60f8      	str	r0, [r7, #12]
      break;
 8008282:	e112      	b.n	80084aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	7c1b      	ldrb	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10d      	bne.n	80082a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008294:	f107 0208 	add.w	r2, r7, #8
 8008298:	4610      	mov	r0, r2
 800829a:	4798      	blx	r3
 800829c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	2202      	movs	r2, #2
 80082a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80082a6:	e100      	b.n	80084aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	f107 0208 	add.w	r2, r7, #8
 80082b4:	4610      	mov	r0, r2
 80082b6:	4798      	blx	r3
 80082b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	2202      	movs	r2, #2
 80082c0:	701a      	strb	r2, [r3, #0]
      break;
 80082c2:	e0f2      	b.n	80084aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	885b      	ldrh	r3, [r3, #2]
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	f200 80ac 	bhi.w	8008428 <USBD_GetDescriptor+0x204>
 80082d0:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <USBD_GetDescriptor+0xb4>)
 80082d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d6:	bf00      	nop
 80082d8:	080082f1 	.word	0x080082f1
 80082dc:	08008325 	.word	0x08008325
 80082e0:	08008359 	.word	0x08008359
 80082e4:	0800838d 	.word	0x0800838d
 80082e8:	080083c1 	.word	0x080083c1
 80082ec:	080083f5 	.word	0x080083f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	7c12      	ldrb	r2, [r2, #16]
 8008308:	f107 0108 	add.w	r1, r7, #8
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008312:	e091      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fab2 	bl	8008880 <USBD_CtlError>
            err++;
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	3301      	adds	r3, #1
 8008320:	72fb      	strb	r3, [r7, #11]
          break;
 8008322:	e089      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	7c12      	ldrb	r2, [r2, #16]
 800833c:	f107 0108 	add.w	r1, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008346:	e077      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa98 	bl	8008880 <USBD_CtlError>
            err++;
 8008350:	7afb      	ldrb	r3, [r7, #11]
 8008352:	3301      	adds	r3, #1
 8008354:	72fb      	strb	r3, [r7, #11]
          break;
 8008356:	e06f      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00b      	beq.n	800837c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	7c12      	ldrb	r2, [r2, #16]
 8008370:	f107 0108 	add.w	r1, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837a:	e05d      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa7e 	bl	8008880 <USBD_CtlError>
            err++;
 8008384:	7afb      	ldrb	r3, [r7, #11]
 8008386:	3301      	adds	r3, #1
 8008388:	72fb      	strb	r3, [r7, #11]
          break;
 800838a:	e055      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	7c12      	ldrb	r2, [r2, #16]
 80083a4:	f107 0108 	add.w	r1, r7, #8
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ae:	e043      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa64 	bl	8008880 <USBD_CtlError>
            err++;
 80083b8:	7afb      	ldrb	r3, [r7, #11]
 80083ba:	3301      	adds	r3, #1
 80083bc:	72fb      	strb	r3, [r7, #11]
          break;
 80083be:	e03b      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	7c12      	ldrb	r2, [r2, #16]
 80083d8:	f107 0108 	add.w	r1, r7, #8
 80083dc:	4610      	mov	r0, r2
 80083de:	4798      	blx	r3
 80083e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083e2:	e029      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fa4a 	bl	8008880 <USBD_CtlError>
            err++;
 80083ec:	7afb      	ldrb	r3, [r7, #11]
 80083ee:	3301      	adds	r3, #1
 80083f0:	72fb      	strb	r3, [r7, #11]
          break;
 80083f2:	e021      	b.n	8008438 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	7c12      	ldrb	r2, [r2, #16]
 800840c:	f107 0108 	add.w	r1, r7, #8
 8008410:	4610      	mov	r0, r2
 8008412:	4798      	blx	r3
 8008414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008416:	e00f      	b.n	8008438 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa30 	bl	8008880 <USBD_CtlError>
            err++;
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	3301      	adds	r3, #1
 8008424:	72fb      	strb	r3, [r7, #11]
          break;
 8008426:	e007      	b.n	8008438 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa28 	bl	8008880 <USBD_CtlError>
          err++;
 8008430:	7afb      	ldrb	r3, [r7, #11]
 8008432:	3301      	adds	r3, #1
 8008434:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008436:	bf00      	nop
      }
      break;
 8008438:	e037      	b.n	80084aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	7c1b      	ldrb	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	f107 0208 	add.w	r2, r7, #8
 800844e:	4610      	mov	r0, r2
 8008450:	4798      	blx	r3
 8008452:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008454:	e029      	b.n	80084aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fa11 	bl	8008880 <USBD_CtlError>
        err++;
 800845e:	7afb      	ldrb	r3, [r7, #11]
 8008460:	3301      	adds	r3, #1
 8008462:	72fb      	strb	r3, [r7, #11]
      break;
 8008464:	e021      	b.n	80084aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	7c1b      	ldrb	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10d      	bne.n	800848a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008476:	f107 0208 	add.w	r2, r7, #8
 800847a:	4610      	mov	r0, r2
 800847c:	4798      	blx	r3
 800847e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	3301      	adds	r3, #1
 8008484:	2207      	movs	r2, #7
 8008486:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008488:	e00f      	b.n	80084aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f9f7 	bl	8008880 <USBD_CtlError>
        err++;
 8008492:	7afb      	ldrb	r3, [r7, #11]
 8008494:	3301      	adds	r3, #1
 8008496:	72fb      	strb	r3, [r7, #11]
      break;
 8008498:	e007      	b.n	80084aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f9ef 	bl	8008880 <USBD_CtlError>
      err++;
 80084a2:	7afb      	ldrb	r3, [r7, #11]
 80084a4:	3301      	adds	r3, #1
 80084a6:	72fb      	strb	r3, [r7, #11]
      break;
 80084a8:	bf00      	nop
  }

  if (err != 0U)
 80084aa:	7afb      	ldrb	r3, [r7, #11]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d11e      	bne.n	80084ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	88db      	ldrh	r3, [r3, #6]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d016      	beq.n	80084e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084b8:	893b      	ldrh	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00e      	beq.n	80084dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	88da      	ldrh	r2, [r3, #6]
 80084c2:	893b      	ldrh	r3, [r7, #8]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	bf28      	it	cs
 80084c8:	4613      	movcs	r3, r2
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084ce:	893b      	ldrh	r3, [r7, #8]
 80084d0:	461a      	mov	r2, r3
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fa44 	bl	8008962 <USBD_CtlSendData>
 80084da:	e009      	b.n	80084f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f9ce 	bl	8008880 <USBD_CtlError>
 80084e4:	e004      	b.n	80084f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fa95 	bl	8008a16 <USBD_CtlSendStatus>
 80084ec:	e000      	b.n	80084f0 <USBD_GetDescriptor+0x2cc>
    return;
 80084ee:	bf00      	nop
  }
}
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop

080084f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	889b      	ldrh	r3, [r3, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d131      	bne.n	800856e <USBD_SetAddress+0x76>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	88db      	ldrh	r3, [r3, #6]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d12d      	bne.n	800856e <USBD_SetAddress+0x76>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	885b      	ldrh	r3, [r3, #2]
 8008516:	2b7f      	cmp	r3, #127	; 0x7f
 8008518:	d829      	bhi.n	800856e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	885b      	ldrh	r3, [r3, #2]
 800851e:	b2db      	uxtb	r3, r3
 8008520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008524:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b03      	cmp	r3, #3
 8008530:	d104      	bne.n	800853c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f9a3 	bl	8008880 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853a:	e01d      	b.n	8008578 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7bfa      	ldrb	r2, [r7, #15]
 8008540:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 ff21 	bl	8009390 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa61 	bl	8008a16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008562:	e009      	b.n	8008578 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800856c:	e004      	b.n	8008578 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f985 	bl	8008880 <USBD_CtlError>
  }
}
 8008576:	bf00      	nop
 8008578:	bf00      	nop
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	885b      	ldrh	r3, [r3, #2]
 8008592:	b2da      	uxtb	r2, r3
 8008594:	4b4c      	ldr	r3, [pc, #304]	; (80086c8 <USBD_SetConfig+0x148>)
 8008596:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008598:	4b4b      	ldr	r3, [pc, #300]	; (80086c8 <USBD_SetConfig+0x148>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d905      	bls.n	80085ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f96c 	bl	8008880 <USBD_CtlError>
    return USBD_FAIL;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e088      	b.n	80086be <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d002      	beq.n	80085be <USBD_SetConfig+0x3e>
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d025      	beq.n	8008608 <USBD_SetConfig+0x88>
 80085bc:	e071      	b.n	80086a2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085be:	4b42      	ldr	r3, [pc, #264]	; (80086c8 <USBD_SetConfig+0x148>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d01c      	beq.n	8008600 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80085c6:	4b40      	ldr	r3, [pc, #256]	; (80086c8 <USBD_SetConfig+0x148>)
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085d0:	4b3d      	ldr	r3, [pc, #244]	; (80086c8 <USBD_SetConfig+0x148>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff f948 	bl	800786c <USBD_SetClassConfig>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d004      	beq.n	80085f0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f949 	bl	8008880 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085ee:	e065      	b.n	80086bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fa10 	bl	8008a16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2203      	movs	r2, #3
 80085fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085fe:	e05d      	b.n	80086bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fa08 	bl	8008a16 <USBD_CtlSendStatus>
      break;
 8008606:	e059      	b.n	80086bc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008608:	4b2f      	ldr	r3, [pc, #188]	; (80086c8 <USBD_SetConfig+0x148>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d112      	bne.n	8008636 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008618:	4b2b      	ldr	r3, [pc, #172]	; (80086c8 <USBD_SetConfig+0x148>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	461a      	mov	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008622:	4b29      	ldr	r3, [pc, #164]	; (80086c8 <USBD_SetConfig+0x148>)
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff f93b 	bl	80078a4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f9f1 	bl	8008a16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008634:	e042      	b.n	80086bc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008636:	4b24      	ldr	r3, [pc, #144]	; (80086c8 <USBD_SetConfig+0x148>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d02a      	beq.n	800869a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	b2db      	uxtb	r3, r3
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff f929 	bl	80078a4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008652:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <USBD_SetConfig+0x148>)
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <USBD_SetConfig+0x148>)
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff f902 	bl	800786c <USBD_SetClassConfig>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800866c:	7bfb      	ldrb	r3, [r7, #15]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00f      	beq.n	8008692 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f903 	bl	8008880 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b2db      	uxtb	r3, r3
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff f90e 	bl	80078a4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008690:	e014      	b.n	80086bc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f9bf 	bl	8008a16 <USBD_CtlSendStatus>
      break;
 8008698:	e010      	b.n	80086bc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9bb 	bl	8008a16 <USBD_CtlSendStatus>
      break;
 80086a0:	e00c      	b.n	80086bc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f8eb 	bl	8008880 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <USBD_SetConfig+0x148>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff f8f7 	bl	80078a4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086b6:	2303      	movs	r3, #3
 80086b8:	73fb      	strb	r3, [r7, #15]
      break;
 80086ba:	bf00      	nop
  }

  return ret;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	200001a0 	.word	0x200001a0

080086cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	88db      	ldrh	r3, [r3, #6]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d004      	beq.n	80086e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086de:	6839      	ldr	r1, [r7, #0]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f8cd 	bl	8008880 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086e6:	e023      	b.n	8008730 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	dc02      	bgt.n	80086fa <USBD_GetConfig+0x2e>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	dc03      	bgt.n	8008700 <USBD_GetConfig+0x34>
 80086f8:	e015      	b.n	8008726 <USBD_GetConfig+0x5a>
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d00b      	beq.n	8008716 <USBD_GetConfig+0x4a>
 80086fe:	e012      	b.n	8008726 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3308      	adds	r3, #8
 800870a:	2201      	movs	r2, #1
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f927 	bl	8008962 <USBD_CtlSendData>
        break;
 8008714:	e00c      	b.n	8008730 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	3304      	adds	r3, #4
 800871a:	2201      	movs	r2, #1
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f91f 	bl	8008962 <USBD_CtlSendData>
        break;
 8008724:	e004      	b.n	8008730 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f8a9 	bl	8008880 <USBD_CtlError>
        break;
 800872e:	bf00      	nop
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008748:	b2db      	uxtb	r3, r3
 800874a:	3b01      	subs	r3, #1
 800874c:	2b02      	cmp	r3, #2
 800874e:	d81e      	bhi.n	800878e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	88db      	ldrh	r3, [r3, #6]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d004      	beq.n	8008762 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f890 	bl	8008880 <USBD_CtlError>
        break;
 8008760:	e01a      	b.n	8008798 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800876e:	2b00      	cmp	r3, #0
 8008770:	d005      	beq.n	800877e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f043 0202 	orr.w	r2, r3, #2
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	330c      	adds	r3, #12
 8008782:	2202      	movs	r2, #2
 8008784:	4619      	mov	r1, r3
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f8eb 	bl	8008962 <USBD_CtlSendData>
      break;
 800878c:	e004      	b.n	8008798 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800878e:	6839      	ldr	r1, [r7, #0]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f875 	bl	8008880 <USBD_CtlError>
      break;
 8008796:	bf00      	nop
  }
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d106      	bne.n	80087c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f92b 	bl	8008a16 <USBD_CtlSendStatus>
  }
}
 80087c0:	bf00      	nop
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d80b      	bhi.n	80087f8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	885b      	ldrh	r3, [r3, #2]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d10c      	bne.n	8008802 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 f910 	bl	8008a16 <USBD_CtlSendStatus>
      }
      break;
 80087f6:	e004      	b.n	8008802 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f840 	bl	8008880 <USBD_CtlError>
      break;
 8008800:	e000      	b.n	8008804 <USBD_ClrFeature+0x3c>
      break;
 8008802:	bf00      	nop
  }
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	781a      	ldrb	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3301      	adds	r3, #1
 8008826:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	781a      	ldrb	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7ff fabb 	bl	8007db2 <SWAPBYTE>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3301      	adds	r3, #1
 8008848:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3301      	adds	r3, #1
 800884e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff faae 	bl	8007db2 <SWAPBYTE>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff faa1 	bl	8007db2 <SWAPBYTE>
 8008870:	4603      	mov	r3, r0
 8008872:	461a      	mov	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	80da      	strh	r2, [r3, #6]
}
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800888a:	2180      	movs	r1, #128	; 0x80
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fd15 	bl	80092bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008892:	2100      	movs	r1, #0
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fd11 	bl	80092bc <USBD_LL_StallEP>
}
 800889a:	bf00      	nop
 800889c:	3708      	adds	r7, #8
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b086      	sub	sp, #24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d036      	beq.n	8008926 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088bc:	6938      	ldr	r0, [r7, #16]
 80088be:	f000 f836 	bl	800892e <USBD_GetLen>
 80088c2:	4603      	mov	r3, r0
 80088c4:	3301      	adds	r3, #1
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	4413      	add	r3, r2
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	7812      	ldrb	r2, [r2, #0]
 80088da:	701a      	strb	r2, [r3, #0]
  idx++;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
 80088de:	3301      	adds	r3, #1
 80088e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	4413      	add	r3, r2
 80088e8:	2203      	movs	r2, #3
 80088ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	3301      	adds	r3, #1
 80088f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088f2:	e013      	b.n	800891c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	4413      	add	r3, r2
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	3301      	adds	r3, #1
 8008904:	613b      	str	r3, [r7, #16]
    idx++;
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	3301      	adds	r3, #1
 800890a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	4413      	add	r3, r2
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
    idx++;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	3301      	adds	r3, #1
 800891a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e7      	bne.n	80088f4 <USBD_GetString+0x52>
 8008924:	e000      	b.n	8008928 <USBD_GetString+0x86>
    return;
 8008926:	bf00      	nop
  }
}
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800892e:	b480      	push	{r7}
 8008930:	b085      	sub	sp, #20
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800893e:	e005      	b.n	800894c <USBD_GetLen+0x1e>
  {
    len++;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	3301      	adds	r3, #1
 8008944:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	3301      	adds	r3, #1
 800894a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f5      	bne.n	8008940 <USBD_GetLen+0x12>
  }

  return len;
 8008954:	7bfb      	ldrb	r3, [r7, #15]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2202      	movs	r2, #2
 8008972:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	2100      	movs	r1, #0
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fd20 	bl	80093ce <USBD_LL_Transmit>

  return USBD_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	2100      	movs	r1, #0
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fd0f 	bl	80093ce <USBD_LL_Transmit>

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	60b9      	str	r1, [r7, #8]
 80089c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2203      	movs	r2, #3
 80089ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	2100      	movs	r1, #0
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fd13 	bl	8009410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	2100      	movs	r1, #0
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fd02 	bl	8009410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2204      	movs	r2, #4
 8008a22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a26:	2300      	movs	r3, #0
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fcce 	bl	80093ce <USBD_LL_Transmit>

  return USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2205      	movs	r2, #5
 8008a48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2100      	movs	r1, #0
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fcdc 	bl	8009410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4913      	ldr	r1, [pc, #76]	; (8008ab8 <MX_USB_DEVICE_Init+0x54>)
 8008a6c:	4813      	ldr	r0, [pc, #76]	; (8008abc <MX_USB_DEVICE_Init+0x58>)
 8008a6e:	f7fe fe8f 	bl	8007790 <USBD_Init>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a78:	f7f8 f812 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a7c:	4910      	ldr	r1, [pc, #64]	; (8008ac0 <MX_USB_DEVICE_Init+0x5c>)
 8008a7e:	480f      	ldr	r0, [pc, #60]	; (8008abc <MX_USB_DEVICE_Init+0x58>)
 8008a80:	f7fe feb6 	bl	80077f0 <USBD_RegisterClass>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a8a:	f7f8 f809 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a8e:	490d      	ldr	r1, [pc, #52]	; (8008ac4 <MX_USB_DEVICE_Init+0x60>)
 8008a90:	480a      	ldr	r0, [pc, #40]	; (8008abc <MX_USB_DEVICE_Init+0x58>)
 8008a92:	f7fe fdd7 	bl	8007644 <USBD_CDC_RegisterInterface>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a9c:	f7f8 f800 	bl	8000aa0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008aa0:	4806      	ldr	r0, [pc, #24]	; (8008abc <MX_USB_DEVICE_Init+0x58>)
 8008aa2:	f7fe fecc 	bl	800783e <USBD_Start>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008aac:	f7f7 fff8 	bl	8000aa0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8008ab0:	f7f9 ff28 	bl	8002904 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ab4:	bf00      	nop
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	20000134 	.word	0x20000134
 8008abc:	20000480 	.word	0x20000480
 8008ac0:	2000001c 	.word	0x2000001c
 8008ac4:	20000120 	.word	0x20000120

08008ac8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008acc:	2200      	movs	r2, #0
 8008ace:	4905      	ldr	r1, [pc, #20]	; (8008ae4 <CDC_Init_FS+0x1c>)
 8008ad0:	4805      	ldr	r0, [pc, #20]	; (8008ae8 <CDC_Init_FS+0x20>)
 8008ad2:	f7fe fdcc 	bl	800766e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ad6:	4905      	ldr	r1, [pc, #20]	; (8008aec <CDC_Init_FS+0x24>)
 8008ad8:	4803      	ldr	r0, [pc, #12]	; (8008ae8 <CDC_Init_FS+0x20>)
 8008ada:	f7fe fde6 	bl	80076aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008ade:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20000f50 	.word	0x20000f50
 8008ae8:	20000480 	.word	0x20000480
 8008aec:	20000750 	.word	0x20000750

08008af0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008af4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	6039      	str	r1, [r7, #0]
 8008b0a:	71fb      	strb	r3, [r7, #7]
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	2b23      	cmp	r3, #35	; 0x23
 8008b14:	d84a      	bhi.n	8008bac <CDC_Control_FS+0xac>
 8008b16:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <CDC_Control_FS+0x1c>)
 8008b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1c:	08008bad 	.word	0x08008bad
 8008b20:	08008bad 	.word	0x08008bad
 8008b24:	08008bad 	.word	0x08008bad
 8008b28:	08008bad 	.word	0x08008bad
 8008b2c:	08008bad 	.word	0x08008bad
 8008b30:	08008bad 	.word	0x08008bad
 8008b34:	08008bad 	.word	0x08008bad
 8008b38:	08008bad 	.word	0x08008bad
 8008b3c:	08008bad 	.word	0x08008bad
 8008b40:	08008bad 	.word	0x08008bad
 8008b44:	08008bad 	.word	0x08008bad
 8008b48:	08008bad 	.word	0x08008bad
 8008b4c:	08008bad 	.word	0x08008bad
 8008b50:	08008bad 	.word	0x08008bad
 8008b54:	08008bad 	.word	0x08008bad
 8008b58:	08008bad 	.word	0x08008bad
 8008b5c:	08008bad 	.word	0x08008bad
 8008b60:	08008bad 	.word	0x08008bad
 8008b64:	08008bad 	.word	0x08008bad
 8008b68:	08008bad 	.word	0x08008bad
 8008b6c:	08008bad 	.word	0x08008bad
 8008b70:	08008bad 	.word	0x08008bad
 8008b74:	08008bad 	.word	0x08008bad
 8008b78:	08008bad 	.word	0x08008bad
 8008b7c:	08008bad 	.word	0x08008bad
 8008b80:	08008bad 	.word	0x08008bad
 8008b84:	08008bad 	.word	0x08008bad
 8008b88:	08008bad 	.word	0x08008bad
 8008b8c:	08008bad 	.word	0x08008bad
 8008b90:	08008bad 	.word	0x08008bad
 8008b94:	08008bad 	.word	0x08008bad
 8008b98:	08008bad 	.word	0x08008bad
 8008b9c:	08008bad 	.word	0x08008bad
 8008ba0:	08008bad 	.word	0x08008bad
 8008ba4:	08008bad 	.word	0x08008bad
 8008ba8:	08008bad 	.word	0x08008bad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008bac:	bf00      	nop
  }

  return (USBD_OK);
 8008bae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	4805      	ldr	r0, [pc, #20]	; (8008be0 <CDC_Receive_FS+0x24>)
 8008bca:	f7fe fd6e 	bl	80076aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008bce:	4804      	ldr	r0, [pc, #16]	; (8008be0 <CDC_Receive_FS+0x24>)
 8008bd0:	f7fe fdb4 	bl	800773c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008bd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000480 	.word	0x20000480

08008be4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008bf4:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <CDC_Transmit_FS+0x48>)
 8008bf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bfa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e00b      	b.n	8008c22 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c0a:	887b      	ldrh	r3, [r7, #2]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4806      	ldr	r0, [pc, #24]	; (8008c2c <CDC_Transmit_FS+0x48>)
 8008c12:	f7fe fd2c 	bl	800766e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c16:	4805      	ldr	r0, [pc, #20]	; (8008c2c <CDC_Transmit_FS+0x48>)
 8008c18:	f7fe fd60 	bl	80076dc <USBD_CDC_TransmitPacket>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20000480 	.word	0x20000480

08008c30 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
	...

08008c54 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	6039      	str	r1, [r7, #0]
 8008c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2212      	movs	r2, #18
 8008c64:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008c66:	4b03      	ldr	r3, [pc, #12]	; (8008c74 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	20000150 	.word	0x20000150

08008c78 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2204      	movs	r2, #4
 8008c88:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c8a:	4b03      	ldr	r3, [pc, #12]	; (8008c98 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	20000164 	.word	0x20000164

08008c9c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	6039      	str	r1, [r7, #0]
 8008ca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d105      	bne.n	8008cba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	4907      	ldr	r1, [pc, #28]	; (8008cd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cb2:	4808      	ldr	r0, [pc, #32]	; (8008cd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cb4:	f7ff fdf5 	bl	80088a2 <USBD_GetString>
 8008cb8:	e004      	b.n	8008cc4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	4904      	ldr	r1, [pc, #16]	; (8008cd0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008cbe:	4805      	ldr	r0, [pc, #20]	; (8008cd4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008cc0:	f7ff fdef 	bl	80088a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008cc4:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20001750 	.word	0x20001750
 8008cd4:	08009570 	.word	0x08009570

08008cd8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ce4:	683a      	ldr	r2, [r7, #0]
 8008ce6:	4904      	ldr	r1, [pc, #16]	; (8008cf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ce8:	4804      	ldr	r0, [pc, #16]	; (8008cfc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008cea:	f7ff fdda 	bl	80088a2 <USBD_GetString>
  return USBD_StrDesc;
 8008cee:	4b02      	ldr	r3, [pc, #8]	; (8008cf8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	20001750 	.word	0x20001750
 8008cfc:	08009588 	.word	0x08009588

08008d00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	4603      	mov	r3, r0
 8008d08:	6039      	str	r1, [r7, #0]
 8008d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	221a      	movs	r2, #26
 8008d10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d12:	f000 f843 	bl	8008d9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d16:	4b02      	ldr	r3, [pc, #8]	; (8008d20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	20000168 	.word	0x20000168

08008d24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	6039      	str	r1, [r7, #0]
 8008d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d105      	bne.n	8008d42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	4907      	ldr	r1, [pc, #28]	; (8008d58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d3a:	4808      	ldr	r0, [pc, #32]	; (8008d5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d3c:	f7ff fdb1 	bl	80088a2 <USBD_GetString>
 8008d40:	e004      	b.n	8008d4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	4904      	ldr	r1, [pc, #16]	; (8008d58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d46:	4805      	ldr	r0, [pc, #20]	; (8008d5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d48:	f7ff fdab 	bl	80088a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d4c:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3708      	adds	r7, #8
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20001750 	.word	0x20001750
 8008d5c:	0800959c 	.word	0x0800959c

08008d60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d6c:	79fb      	ldrb	r3, [r7, #7]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d105      	bne.n	8008d7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	4907      	ldr	r1, [pc, #28]	; (8008d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d76:	4808      	ldr	r0, [pc, #32]	; (8008d98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d78:	f7ff fd93 	bl	80088a2 <USBD_GetString>
 8008d7c:	e004      	b.n	8008d88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	4904      	ldr	r1, [pc, #16]	; (8008d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d82:	4805      	ldr	r0, [pc, #20]	; (8008d98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d84:	f7ff fd8d 	bl	80088a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	20001750 	.word	0x20001750
 8008d98:	080095a8 	.word	0x080095a8

08008d9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008da2:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <Get_SerialNum+0x44>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008da8:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <Get_SerialNum+0x48>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008dae:	4b0e      	ldr	r3, [pc, #56]	; (8008de8 <Get_SerialNum+0x4c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4413      	add	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	4909      	ldr	r1, [pc, #36]	; (8008dec <Get_SerialNum+0x50>)
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 f814 	bl	8008df4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008dcc:	2204      	movs	r2, #4
 8008dce:	4908      	ldr	r1, [pc, #32]	; (8008df0 <Get_SerialNum+0x54>)
 8008dd0:	68b8      	ldr	r0, [r7, #8]
 8008dd2:	f000 f80f 	bl	8008df4 <IntToUnicode>
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	1ff1e800 	.word	0x1ff1e800
 8008de4:	1ff1e804 	.word	0x1ff1e804
 8008de8:	1ff1e808 	.word	0x1ff1e808
 8008dec:	2000016a 	.word	0x2000016a
 8008df0:	2000017a 	.word	0x2000017a

08008df4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e02:	2300      	movs	r3, #0
 8008e04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	75fb      	strb	r3, [r7, #23]
 8008e0a:	e027      	b.n	8008e5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	0f1b      	lsrs	r3, r3, #28
 8008e10:	2b09      	cmp	r3, #9
 8008e12:	d80b      	bhi.n	8008e2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	0f1b      	lsrs	r3, r3, #28
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	7dfb      	ldrb	r3, [r7, #23]
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	4619      	mov	r1, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	440b      	add	r3, r1
 8008e24:	3230      	adds	r2, #48	; 0x30
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	e00a      	b.n	8008e42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	0f1b      	lsrs	r3, r3, #28
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	4619      	mov	r1, r3
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	440b      	add	r3, r1
 8008e3c:	3237      	adds	r2, #55	; 0x37
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008e48:	7dfb      	ldrb	r3, [r7, #23]
 8008e4a:	005b      	lsls	r3, r3, #1
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	4413      	add	r3, r2
 8008e52:	2200      	movs	r2, #0
 8008e54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	75fb      	strb	r3, [r7, #23]
 8008e5c:	7dfa      	ldrb	r2, [r7, #23]
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d3d3      	bcc.n	8008e0c <IntToUnicode+0x18>
  }
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b0b8      	sub	sp, #224	; 0xe0
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008e80:	2200      	movs	r2, #0
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	605a      	str	r2, [r3, #4]
 8008e86:	609a      	str	r2, [r3, #8]
 8008e88:	60da      	str	r2, [r3, #12]
 8008e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e8c:	f107 0310 	add.w	r3, r7, #16
 8008e90:	22bc      	movs	r2, #188	; 0xbc
 8008e92:	2100      	movs	r1, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fb57 	bl	8009548 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a33      	ldr	r2, [pc, #204]	; (8008f6c <HAL_PCD_MspInit+0xf8>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d15e      	bne.n	8008f62 <HAL_PCD_MspInit+0xee>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008ea4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ea8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008eaa:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8008eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008eb2:	f107 0310 	add.w	r3, r7, #16
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fa fd0e 	bl	80038d8 <HAL_RCCEx_PeriphCLKConfig>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8008ec2:	f7f7 fded 	bl	8000aa0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008ec6:	f7f9 fd1d 	bl	8002904 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eca:	4b29      	ldr	r3, [pc, #164]	; (8008f70 <HAL_PCD_MspInit+0xfc>)
 8008ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ed0:	4a27      	ldr	r2, [pc, #156]	; (8008f70 <HAL_PCD_MspInit+0xfc>)
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008eda:	4b25      	ldr	r3, [pc, #148]	; (8008f70 <HAL_PCD_MspInit+0xfc>)
 8008edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8008ee8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008eec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008efc:	2300      	movs	r3, #0
 8008efe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8008f02:	230a      	movs	r3, #10
 8008f04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4819      	ldr	r0, [pc, #100]	; (8008f74 <HAL_PCD_MspInit+0x100>)
 8008f10:	f7f8 f91a 	bl	8001148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4811      	ldr	r0, [pc, #68]	; (8008f74 <HAL_PCD_MspInit+0x100>)
 8008f30:	f7f8 f90a 	bl	8001148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f34:	4b0e      	ldr	r3, [pc, #56]	; (8008f70 <HAL_PCD_MspInit+0xfc>)
 8008f36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f3a:	4a0d      	ldr	r2, [pc, #52]	; (8008f70 <HAL_PCD_MspInit+0xfc>)
 8008f3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f40:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <HAL_PCD_MspInit+0xfc>)
 8008f46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008f4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f4e:	60bb      	str	r3, [r7, #8]
 8008f50:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f52:	2200      	movs	r2, #0
 8008f54:	2100      	movs	r1, #0
 8008f56:	2065      	movs	r0, #101	; 0x65
 8008f58:	f7f8 f8c1 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f5c:	2065      	movs	r0, #101	; 0x65
 8008f5e:	f7f8 f8d8 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f62:	bf00      	nop
 8008f64:	37e0      	adds	r7, #224	; 0xe0
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	40080000 	.word	0x40080000
 8008f70:	58024400 	.word	0x58024400
 8008f74:	58020000 	.word	0x58020000

08008f78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	f7fe fca0 	bl	80078d4 <USBD_LL_SetupStage>
}
 8008f94:	bf00      	nop
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	1a9b      	subs	r3, r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	f7fe fcda 	bl	800797e <USBD_LL_DataOutStage>
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008fe4:	78fa      	ldrb	r2, [r7, #3]
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	1a9b      	subs	r3, r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	440b      	add	r3, r1
 8008ff2:	3348      	adds	r3, #72	; 0x48
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f7fe fd23 	bl	8007a44 <USBD_LL_DataInStage>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fe37 	bl	8007c88 <USBD_LL_SOF>
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800902a:	2301      	movs	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]
 800903a:	e008      	b.n	800904e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	2b02      	cmp	r3, #2
 8009042:	d102      	bne.n	800904a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009044:	2301      	movs	r3, #1
 8009046:	73fb      	strb	r3, [r7, #15]
 8009048:	e001      	b.n	800904e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800904a:	f7f7 fd29 	bl	8000aa0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009054:	7bfa      	ldrb	r2, [r7, #15]
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fdd7 	bl	8007c0c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fd83 	bl	8007b70 <USBD_LL_Reset>
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fdd2 	bl	8007c2c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6812      	ldr	r2, [r2, #0]
 8009096:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800909a:	f043 0301 	orr.w	r3, r3, #1
 800909e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a1b      	ldr	r3, [r3, #32]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090a8:	4b04      	ldr	r3, [pc, #16]	; (80090bc <HAL_PCD_SuspendCallback+0x48>)
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	4a03      	ldr	r2, [pc, #12]	; (80090bc <HAL_PCD_SuspendCallback+0x48>)
 80090ae:	f043 0306 	orr.w	r3, r3, #6
 80090b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	e000ed00 	.word	0xe000ed00

080090c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe fdc2 	bl	8007c58 <USBD_LL_Resume>
}
 80090d4:	bf00      	nop
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	4611      	mov	r1, r2
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fe10 	bl	8007d18 <USBD_LL_IsoOUTIncomplete>
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe fdd8 	bl	8007ccc <USBD_LL_IsoINIncomplete>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fe16 	bl	8007d64 <USBD_LL_DevConnected>
}
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fe13 	bl	8007d7a <USBD_LL_DevDisconnected>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d13e      	bne.n	80091ea <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800916c:	4a21      	ldr	r2, [pc, #132]	; (80091f4 <USBD_LL_Init+0x98>)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a1f      	ldr	r2, [pc, #124]	; (80091f4 <USBD_LL_Init+0x98>)
 8009178:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800917c:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <USBD_LL_Init+0x98>)
 800917e:	4a1e      	ldr	r2, [pc, #120]	; (80091f8 <USBD_LL_Init+0x9c>)
 8009180:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8009182:	4b1c      	ldr	r3, [pc, #112]	; (80091f4 <USBD_LL_Init+0x98>)
 8009184:	2209      	movs	r2, #9
 8009186:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009188:	4b1a      	ldr	r3, [pc, #104]	; (80091f4 <USBD_LL_Init+0x98>)
 800918a:	2202      	movs	r2, #2
 800918c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800918e:	4b19      	ldr	r3, [pc, #100]	; (80091f4 <USBD_LL_Init+0x98>)
 8009190:	2200      	movs	r2, #0
 8009192:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009194:	4b17      	ldr	r3, [pc, #92]	; (80091f4 <USBD_LL_Init+0x98>)
 8009196:	2202      	movs	r2, #2
 8009198:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800919a:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <USBD_LL_Init+0x98>)
 800919c:	2200      	movs	r2, #0
 800919e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091a0:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <USBD_LL_Init+0x98>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091a6:	4b13      	ldr	r3, [pc, #76]	; (80091f4 <USBD_LL_Init+0x98>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80091ac:	4b11      	ldr	r3, [pc, #68]	; (80091f4 <USBD_LL_Init+0x98>)
 80091ae:	2201      	movs	r2, #1
 80091b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80091b2:	4b10      	ldr	r3, [pc, #64]	; (80091f4 <USBD_LL_Init+0x98>)
 80091b4:	2201      	movs	r2, #1
 80091b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091b8:	4b0e      	ldr	r3, [pc, #56]	; (80091f4 <USBD_LL_Init+0x98>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091be:	480d      	ldr	r0, [pc, #52]	; (80091f4 <USBD_LL_Init+0x98>)
 80091c0:	f7f8 f98b 	bl	80014da <HAL_PCD_Init>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80091ca:	f7f7 fc69 	bl	8000aa0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091ce:	2180      	movs	r1, #128	; 0x80
 80091d0:	4808      	ldr	r0, [pc, #32]	; (80091f4 <USBD_LL_Init+0x98>)
 80091d2:	f7f9 fb1c 	bl	800280e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091d6:	2240      	movs	r2, #64	; 0x40
 80091d8:	2100      	movs	r1, #0
 80091da:	4806      	ldr	r0, [pc, #24]	; (80091f4 <USBD_LL_Init+0x98>)
 80091dc:	f7f9 fad0 	bl	8002780 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091e0:	2280      	movs	r2, #128	; 0x80
 80091e2:	2101      	movs	r1, #1
 80091e4:	4803      	ldr	r0, [pc, #12]	; (80091f4 <USBD_LL_Init+0x98>)
 80091e6:	f7f9 facb 	bl	8002780 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	20001950 	.word	0x20001950
 80091f8:	40080000 	.word	0x40080000

080091fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009212:	4618      	mov	r0, r3
 8009214:	f7f8 fa85 	bl	8001722 <HAL_PCD_Start>
 8009218:	4603      	mov	r3, r0
 800921a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800921c:	7bfb      	ldrb	r3, [r7, #15]
 800921e:	4618      	mov	r0, r3
 8009220:	f000 f942 	bl	80094a8 <USBD_Get_USB_Status>
 8009224:	4603      	mov	r3, r0
 8009226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009228:	7bbb      	ldrb	r3, [r7, #14]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	4608      	mov	r0, r1
 800923c:	4611      	mov	r1, r2
 800923e:	461a      	mov	r2, r3
 8009240:	4603      	mov	r3, r0
 8009242:	70fb      	strb	r3, [r7, #3]
 8009244:	460b      	mov	r3, r1
 8009246:	70bb      	strb	r3, [r7, #2]
 8009248:	4613      	mov	r3, r2
 800924a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800925a:	78bb      	ldrb	r3, [r7, #2]
 800925c:	883a      	ldrh	r2, [r7, #0]
 800925e:	78f9      	ldrb	r1, [r7, #3]
 8009260:	f7f8 fe96 	bl	8001f90 <HAL_PCD_EP_Open>
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f91c 	bl	80094a8 <USBD_Get_USB_Status>
 8009270:	4603      	mov	r3, r0
 8009272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009274:	7bbb      	ldrb	r3, [r7, #14]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	4611      	mov	r1, r2
 800929c:	4618      	mov	r0, r3
 800929e:	f7f8 fedf 	bl	8002060 <HAL_PCD_EP_Close>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 f8fd 	bl	80094a8 <USBD_Get_USB_Status>
 80092ae:	4603      	mov	r3, r0
 80092b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	460b      	mov	r3, r1
 80092c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	4611      	mov	r1, r2
 80092da:	4618      	mov	r0, r3
 80092dc:	f7f8 ffb7 	bl	800224e <HAL_PCD_EP_SetStall>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f8de 	bl	80094a8 <USBD_Get_USB_Status>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	460b      	mov	r3, r1
 8009304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f7f8 fffc 	bl	8002316 <HAL_PCD_EP_ClrStall>
 800931e:	4603      	mov	r3, r0
 8009320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	4618      	mov	r0, r3
 8009326:	f000 f8bf 	bl	80094a8 <USBD_Get_USB_Status>
 800932a:	4603      	mov	r3, r0
 800932c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800932e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800934a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800934c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009350:	2b00      	cmp	r3, #0
 8009352:	da0b      	bge.n	800936c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	4613      	mov	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	1a9b      	subs	r3, r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	333e      	adds	r3, #62	; 0x3e
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	e00b      	b.n	8009384 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800936c:	78fb      	ldrb	r3, [r7, #3]
 800936e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	4613      	mov	r3, r2
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	1a9b      	subs	r3, r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	440b      	add	r3, r1
 800937e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009382:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	4611      	mov	r1, r2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7f8 fdc9 	bl	8001f46 <HAL_PCD_SetAddress>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 f874 	bl	80094a8 <USBD_Get_USB_Status>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	607a      	str	r2, [r7, #4]
 80093d8:	603b      	str	r3, [r7, #0]
 80093da:	460b      	mov	r3, r1
 80093dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80093ec:	7af9      	ldrb	r1, [r7, #11]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	f7f8 fee2 	bl	80021ba <HAL_PCD_EP_Transmit>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 f853 	bl	80094a8 <USBD_Get_USB_Status>
 8009402:	4603      	mov	r3, r0
 8009404:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009406:	7dbb      	ldrb	r3, [r7, #22]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	607a      	str	r2, [r7, #4]
 800941a:	603b      	str	r3, [r7, #0]
 800941c:	460b      	mov	r3, r1
 800941e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800942e:	7af9      	ldrb	r1, [r7, #11]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	f7f8 fe5e 	bl	80020f4 <HAL_PCD_EP_Receive>
 8009438:	4603      	mov	r3, r0
 800943a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f832 	bl	80094a8 <USBD_Get_USB_Status>
 8009444:	4603      	mov	r3, r0
 8009446:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009448:	7dbb      	ldrb	r3, [r7, #22]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3718      	adds	r7, #24
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b082      	sub	sp, #8
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	460b      	mov	r3, r1
 800945c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f7f8 fe8e 	bl	800218a <HAL_PCD_EP_GetRxCount>
 800946e:	4603      	mov	r3, r0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009480:	4b03      	ldr	r3, [pc, #12]	; (8009490 <USBD_static_malloc+0x18>)
}
 8009482:	4618      	mov	r0, r3
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	200001a4 	.word	0x200001a4

08009494 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]

}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4603      	mov	r3, r0
 80094b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d817      	bhi.n	80094ec <USBD_Get_USB_Status+0x44>
 80094bc:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <USBD_Get_USB_Status+0x1c>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094db 	.word	0x080094db
 80094cc:	080094e1 	.word	0x080094e1
 80094d0:	080094e7 	.word	0x080094e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
    break;
 80094d8:	e00b      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094da:	2303      	movs	r3, #3
 80094dc:	73fb      	strb	r3, [r7, #15]
    break;
 80094de:	e008      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
    break;
 80094e4:	e005      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094e6:	2303      	movs	r3, #3
 80094e8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ea:	e002      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	73fb      	strb	r3, [r7, #15]
    break;
 80094f0:	bf00      	nop
  }
  return usb_status;
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <__libc_init_array>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	4d0d      	ldr	r5, [pc, #52]	; (8009538 <__libc_init_array+0x38>)
 8009504:	4c0d      	ldr	r4, [pc, #52]	; (800953c <__libc_init_array+0x3c>)
 8009506:	1b64      	subs	r4, r4, r5
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	2600      	movs	r6, #0
 800950c:	42a6      	cmp	r6, r4
 800950e:	d109      	bne.n	8009524 <__libc_init_array+0x24>
 8009510:	4d0b      	ldr	r5, [pc, #44]	; (8009540 <__libc_init_array+0x40>)
 8009512:	4c0c      	ldr	r4, [pc, #48]	; (8009544 <__libc_init_array+0x44>)
 8009514:	f000 f820 	bl	8009558 <_init>
 8009518:	1b64      	subs	r4, r4, r5
 800951a:	10a4      	asrs	r4, r4, #2
 800951c:	2600      	movs	r6, #0
 800951e:	42a6      	cmp	r6, r4
 8009520:	d105      	bne.n	800952e <__libc_init_array+0x2e>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	f855 3b04 	ldr.w	r3, [r5], #4
 8009528:	4798      	blx	r3
 800952a:	3601      	adds	r6, #1
 800952c:	e7ee      	b.n	800950c <__libc_init_array+0xc>
 800952e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009532:	4798      	blx	r3
 8009534:	3601      	adds	r6, #1
 8009536:	e7f2      	b.n	800951e <__libc_init_array+0x1e>
 8009538:	080095c8 	.word	0x080095c8
 800953c:	080095c8 	.word	0x080095c8
 8009540:	080095c8 	.word	0x080095c8
 8009544:	080095cc 	.word	0x080095cc

08009548 <memset>:
 8009548:	4402      	add	r2, r0
 800954a:	4603      	mov	r3, r0
 800954c:	4293      	cmp	r3, r2
 800954e:	d100      	bne.n	8009552 <memset+0xa>
 8009550:	4770      	bx	lr
 8009552:	f803 1b01 	strb.w	r1, [r3], #1
 8009556:	e7f9      	b.n	800954c <memset+0x4>

08009558 <_init>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	bf00      	nop
 800955c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955e:	bc08      	pop	{r3}
 8009560:	469e      	mov	lr, r3
 8009562:	4770      	bx	lr

08009564 <_fini>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	bf00      	nop
 8009568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956a:	bc08      	pop	{r3}
 800956c:	469e      	mov	lr, r3
 800956e:	4770      	bx	lr
